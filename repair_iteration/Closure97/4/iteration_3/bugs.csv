bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.VAR  &&  left.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	71	2	replace
2	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.VAR  &&  left.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	71	2	replace
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	71	2	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	71	2	replace
5	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
6	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
7	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
8	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.SCRIPT  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
9	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
10	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
11	[BUG]  [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  newNumber);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  newNumber);  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Integer  result  =  tryFoldShift(n,  left,  right,  newNumber);	  Integer    result    =    tryFoldShift(n,    left,    right);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
12	[BUG]  [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  MAX_FOLD_NUMBER);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Integer  result  =  tryFoldShift(n,  left,  right,  MAX_FOLD_NUMBER);	  Integer    result    =    tryFoldShift(n,    left,    right);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
13	[BUG]  [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  false);  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Integer  result  =  tryFoldShift(n,  left,  right,  false);	  Integer    result    =    tryFoldShift(n,    left,    right);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
14	[BUG]  [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  rval);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  rval);  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Integer  result  =  tryFoldShift(n,  left,  right,  rval);	  Integer    result    =    tryFoldShift(n,    left,    right);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
15	[BUG]  [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  null);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  null);  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Integer  result  =  tryFoldShift(n,  left,  right,  null);	  Integer    result    =    tryFoldShift(n,    left,    right);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
16	[BUG]  [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  0);  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Integer  result  =  tryFoldShift(n,  left,  right,  0);	  Integer    result    =    tryFoldShift(n,    left,    right);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	73	1	replace
18	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	73	1	replace
19	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	73	2	replace
20	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	73	2	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
22	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
23	[BUG]  [BUGGY]  if(n.getType()  ==  Token.SCALE  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  cannot  find  symbol  SCALE  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.SCALE  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.SCALE  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol  SCALE	6	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	147	1	replace
25	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	147	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  right.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	63	1	replace
27	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  right.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	63	1	replace
28	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	63	2	replace
29	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	63	2	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	122	1	replace
31	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	122	1	replace
32	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	133	2	replace
33	[BUG]  [BUGGY]  if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	133	2	replace
34	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	133	2	replace
35	[BUG]  [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	133	2	replace
36	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	133	2	replace
37	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	133	2	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
39	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
41	[BUG]  [BUGGY]  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
42	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	4	2	replace
43	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	4	2	replace
44	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
45	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
46	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left!=  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
47	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
48	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
49	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  >=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  >=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left  >=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
50	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left!=  null  ||  left.getType()  ==  NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	77	1	replace
52	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	77	1	replace
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.NUMBER)  {	  if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	10	2	replace
54	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.NUMBER)  {	  if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	10	2	replace
55	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	98	2	replace
56	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	98	2	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
58	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
60	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
61	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	75	2	replace
62	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	75	2	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
64	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
65	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	75	2	replace
66	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	75	2	replace
67	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	146	None	add
68	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	146	None	add
69	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	146	None	add
70	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	146	None	add
71	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	146	None	add
72	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	146	None	add
73	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	148	None	add
74	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	148	None	add
75	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	148	None	add
76	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	148	None	add
77	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	148	None	add
78	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	148	None	add
79	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	125	2	replace
80	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	125	2	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	125	1	replace
82	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	125	1	replace
83	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.CALL)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	125	2	replace
84	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.CALL)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.CALL)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	125	2	replace
85	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.SCALE  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  cannot  find  symbol  SCALE  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.SCALE  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.SCALE  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol  SCALE	125	None	replace
86	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
87	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
88	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
89	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left  >=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
90	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(right!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
91	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    If(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
92	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
93	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
94	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
95	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
96	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
97	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Node.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Node.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Node.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
98	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
99	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
100	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  left  =  left.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
101	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  left  =  right.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
102	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  left  =  left.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
103	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  left  =  right.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    TOKEN    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	136	2	replace
105	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    TOKEN    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	136	2	replace
106	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  ComparisonFailure  	170	2	replace
107	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.CALL)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  ComparisonFailure  	170	2	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	170	1	replace
109	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	170	1	replace
110	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  ComparisonFailure  	170	2	replace
111	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  ComparisonFailure  	170	2	replace
112	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  ComparisonFailure  	170	2	replace
113	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [FE]  ComparisonFailure  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  ComparisonFailure  	170	2	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    TOken.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
115	[BUG]  [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    TOken.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    TOken.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
117	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    TOken.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    TOken.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
119	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    TOken.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
120	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	88	2	replace
121	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	88	2	replace
122	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	51	2	replace
123	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	51	2	replace
124	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
125	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
126	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
127	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
128	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
129	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()!=  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()!=  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()!=  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
130	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(RIGHT.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(RIGHT.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(RIGHT.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
131	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	150	None	add
132	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	150	None	add
133	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	150	None	add
134	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.VAR)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	150	None	add
135	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	150	None	add
136	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(left.getType()  >=  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(left.getType()  >=  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    if(left.getType()  >=  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	150	None	add
137	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
138	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
139	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
140	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
141	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
142	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
143	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.FUNCTION  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
145	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
147	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()!=  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
149	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
151	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
153	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
154	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Integer.NUMBER)  {  [CE]  cannot  find  symbol  NUMBER  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Integer.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Integer.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER	16	None	replace
155	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Integer.MIN_VALUE)  {  [CE]  cannot  find  symbol  NUMBER  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Integer.MIN_VALUE)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Integer.MIN_VALUE)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER	16	None	replace
156	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
157	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
158	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
159	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
160	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
161	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
162	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	94	None	add
163	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	94	None	add
164	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if  (right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if  (right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if  (right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	94	None	add
165	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.VAR  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	94	None	add
166	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()!=  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()!=  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()!=  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	94	None	add
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	156	1	replace
168	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	156	1	replace
169	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    >=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	93	2	replace
170	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    >=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	93	2	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
172	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
173	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
174	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
175	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
176	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
177	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
178	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
179	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Node.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Node.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Node.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
180	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	111	2	replace
181	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	111	2	replace
182	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	111	2	replace
183	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	111	2	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
185	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
186	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	117	2	replace
187	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	117	2	replace
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
189	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
191	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
192	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	137	None	add
193	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	137	None	add
194	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	137	None	add
195	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  >=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	137	None	add
196	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	137	None	add
197	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  >=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  >=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  >=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	137	None	add
198	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	163	None	add
199	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	163	None	add
200	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	163	None	add
201	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	163	None	add
202	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()!=  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()!=  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()!=  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	163	None	add
203	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	163	None	add
204	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	163	None	add
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	127	1	replace
206	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	127	1	replace
207	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	127	2	replace
208	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	127	2	replace
209	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	127	2	replace
210	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	127	2	replace
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	127	1	replace
212	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	127	1	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	127	1	replace
214	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	127	1	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
216	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
217	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	43	2	replace
218	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	43	2	replace
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
220	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
221	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	107	2	replace
222	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	107	2	replace
223	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	107	2	replace
224	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	107	2	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	120	1	replace
226	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	120	1	replace
227	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	120	2	replace
228	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	120	2	replace
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	120	1	replace
230	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	120	1	replace
231	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	135	2	replace
232	[BUG]  [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	135	2	replace
233	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	135	2	replace
234	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	135	2	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	135	1	replace
236	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	135	1	replace
237	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
238	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
239	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
240	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Integer.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
241	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(right!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
242	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(left  >=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
243	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    If(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
244	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
245	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
246	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
247	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Node.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Node.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Node.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
248	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
249	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Integer.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
250	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left  >=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
251	[BUG]  [BUGGY]  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	87	None	replace
252	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	87	None	replace
253	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	87	None	replace
254	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	87	None	replace
255	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  left  =  n.getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
256	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	165	None	add
257	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	165	None	add
258	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	165	None	add
259	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	165	None	add
260	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  >=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  >=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER)    {    if(left.getType()  >=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	165	None	add
261	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
262	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
263	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
264	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
265	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left!=  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
266	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  >=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  >=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left  >=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
267	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
268	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
269	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
270	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.FUNCTION  ||  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
271	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
272	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
273	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  If(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  If(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    If(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
274	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	157	None	add
275	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	157	None	add
276	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	157	None	add
277	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	157	None	add
278	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	157	None	add
279	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(right  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	157	None	add
280	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    If(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	157	None	add
281	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
282	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
283	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
284	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
285	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
286	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
287	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
288	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  &&  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  &&  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
289	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
291	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
293	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
294	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  cannot  find  symbol  NUMBER  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Node.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER	23	None	replace
295	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	86	None	replace
296	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	69	2	replace
297	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	69	2	replace
298	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
299	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
300	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
301	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
302	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
303	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
304	[BUG]  [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
305	[BUG]  [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
306	[BUG]  [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
307	[BUG]  [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (right!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (right!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if  (right!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
308	[BUG]  [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if  (left!=  null  &&  left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
309	[BUG]  [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (left  ==  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (left  ==  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if  (left  ==  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
310	[BUG]  [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  If  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  If  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    If  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
311	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
312	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
313	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
314	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
315	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
316	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
318	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	90	1	replace
320	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	90	1	replace
321	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
322	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
323	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
324	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
325	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
326	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
328	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
330	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
332	[BUG]  [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
333	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.SCRIPT  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	172	2	replace
334	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SCRIPT  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	172	2	replace
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
336	[BUG]  [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
337	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.SCRIPT  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	172	2	replace
338	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SCRIPT  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	172	2	replace
339	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	167	None	add
340	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	167	None	add
341	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	167	None	add
342	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	167	None	add
343	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	167	None	add
344	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	167	None	add
345	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	41	2	replace
346	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	41	2	replace
347	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	129	2	replace
348	[BUG]  [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	129	2	replace
349	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	129	2	replace
350	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	129	2	replace
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	129	1	replace
352	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	129	1	replace
353	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	129	1	replace
354	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	129	1	replace
355	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
356	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
357	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
358	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
359	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
360	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
361	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
363	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
365	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
366	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
367	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	66	1	replace
369	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	66	1	replace
370	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  &&  n.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	49	2	replace
371	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  n.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  n.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	49	2	replace
372	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	49	2	replace
373	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	49	2	replace
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	131	1	replace
375	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	131	1	replace
376	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	131	2	replace
377	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	131	2	replace
378	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
379	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
380	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
381	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
382	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
383	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
384	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
385	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
386	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
387	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
388	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
389	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    if(left.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
390	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
391	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
392	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	115	2	replace
393	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	115	2	replace
394	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	115	2	replace
395	[BUG]  [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	115	2	replace
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	115	1	replace
397	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	115	1	replace
398	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
399	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
400	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	21	1	replace
401	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
402	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
403	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	166	2	replace
404	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	166	2	replace
405	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	166	2	replace
406	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	166	2	replace
407	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.SCRIPT)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	166	2	replace
408	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT)  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SCRIPT)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	166	2	replace
409	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	166	2	replace
410	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	166	2	replace
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
412	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
414	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
416	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
417	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
418	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
419	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
420	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
421	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
422	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
423	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  n.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  &&  n.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	113	2	replace
424	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  n.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  n.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  n.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	113	2	replace
425	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	126	None	add
426	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	126	None	add
427	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	126	None	add
428	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.GETELEM  &&  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.GETELEM  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.GETELEM  &&  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	126	None	add
429	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	126	None	add
430	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	126	None	add
431	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
432	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
434	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
435	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	38	2	replace
436	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	38	2	replace
437	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
438	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if  (right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if  (right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if  (right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
439	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
440	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
441	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
442	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    If  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
443	[BUG]  [BUGGY]  double  negNum  =  n.getIntValue();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  double  negNum  =  n.getIntValue();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	double  negNum  =  n.getIntValue();	  int    negNum    =    n.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
444	[BUG]  [BUGGY]  int  negNum  =  n.getIntValue()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  int  negNum  =  n.getIntValue()  +  1;  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	int  negNum  =  n.getIntValue()  +  1;	  int    negNum    =    n.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
445	[BUG]  [BUGGY]  int  negNum  =  left.getIntValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  int  negNum  =  left.getIntValue();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	int  negNum  =  left.getIntValue();	  int    negNum    =    n.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
446	[BUG]  [BUGGY]  int  negNum  =  n.getIntValue()  *  2;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  int  negNum  =  n.getIntValue()  *  2;  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	int  negNum  =  n.getIntValue()  *  2;	  int    negNum    =    n.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
447	[BUG]  [BUGGY]  int  negNum  =  right.getIntValue();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  int  negNum  =  right.getIntValue();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	int  negNum  =  right.getIntValue();	  int    negNum    =    n.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
449	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
450	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	65	2	replace
451	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	65	2	replace
452	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
453	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
454	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
455	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
456	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
457	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
458	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	145	1	replace
460	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	145	1	replace
461	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	145	1	replace
462	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	145	1	replace
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	145	1	replace
464	[BUG]  [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	145	1	replace
465	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
466	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
467	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
468	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
469	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
470	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
471	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
472	[BUG]  [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
473	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
474	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
475	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
476	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
477	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Node.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Node.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Node.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
478	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
479	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
480	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
481	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
482	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
483	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
484	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
485	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
486	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
487	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
488	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
489	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
490	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
491	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
492	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
493	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
494	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
495	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	161	None	add
496	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	161	None	add
497	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	161	None	add
498	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	161	None	add
499	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	161	None	add
500	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	161	None	add
501	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
502	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
503	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	44	1	replace
504	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                      ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	44	1	replace
505	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	44	1	replace
506	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	44	1	replace
507	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
508	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
509	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
510	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
511	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
512	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  >=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  >=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  ||  right.getType()  >=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
513	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  left.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
514	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
515	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  node.getFirstChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  node.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
516	[BUG]  [BUGGY]  Node  right  =  n.getNext()  ||  left.getType()  ==  Token.FUNCTION;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getNext()  ||  left.getType()  ==  Token.FUNCTION;  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n.getNext()  ||  left.getType()  ==  Token.FUNCTION;	  Node    right    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
517	[BUG]  [BUGGY]  Node  right  =  n.getNext()  ||  left.getType()  ==  Token.NAME;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getNext()  ||  left.getType()  ==  Token.NAME;  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n.getNext()  ||  left.getType()  ==  Token.NAME;	  Node    right    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
518	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	97	2	replace
519	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	97	2	replace
520	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
521	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
522	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  right.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
523	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  >=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  >=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  >=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
524	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
525	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
526	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  TOken.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  TOken.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()!=  TOken.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
527	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
528	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
530	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
531	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
532	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
533	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	96	None	add
534	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	96	None	add
535	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	96	None	add
536	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.VAR  ||  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	96	None	add
537	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	96	None	add
538	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	96	None	add
539	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	159	None	add
540	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	159	None	add
541	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	159	None	add
542	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	159	None	add
543	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	159	None	add
544	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	159	None	add
545	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	45	2	replace
546	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	45	2	replace
547	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	45	2	replace
548	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	45	2	replace
549	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
550	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
551	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Integer.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
552	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
553	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left  >=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
554	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Node.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Node.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Node.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
555	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
556	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	39	2	replace
557	[BUG]  [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	39	2	replace
558	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  ComparisonFailure  	151	2	replace
559	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.VAR)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  ComparisonFailure  	151	2	replace
560	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	151	1	replace
561	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	151	1	replace
562	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  ComparisonFailure  	151	2	replace
563	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  ComparisonFailure  	151	2	replace
564	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  ComparisonFailure  	151	2	replace
565	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [FE]  ComparisonFailure  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  ComparisonFailure  	151	2	replace
566	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
567	[BUG]  [BUGGY]  Node  right  =  left.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext()  +  1;  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  left.getNext()  +  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
568	[BUG]  [BUGGY]  Node  right  =  left.getNext()  /  2;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext()  /  2;  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  left.getNext()  /  2;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
569	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
570	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
571	[BUG]  [BUGGY]  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	143	None	replace
572	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	143	None	replace
573	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	143	None	replace
574	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	143	None	replace
575	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	139	None	add
576	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	139	None	add
577	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	139	None	add
578	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left  >=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	139	None	add
579	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	139	None	add
580	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	139	None	add
581	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	169	None	add
582	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	169	None	add
583	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.CALL)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	169	None	add
584	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	169	None	add
585	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	169	None	add
586	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(left.getType()  >=  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(left.getType()  >=  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    if(left.getType()  >=  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	169	None	add
587	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Integer.NUMBER)  {  [CE]  cannot  find  symbol  NUMBER  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Integer.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Integer.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER	24	None	replace
588	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Integer.MIN_VALUE  ||  right.getType()  ==  Integer.MAX_VALUE)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Integer.MIN_VALUE  ||  right.getType()  ==  Integer.MAX_VALUE)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	24	2	replace
589	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Integer.MIN_VALUE  ||  right.getType()  ==  Integer.MAX_VALUE)  {  [FE]  ComparisonFailure  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Integer.MIN_VALUE  ||  right.getType()  ==  Integer.MAX_VALUE)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Integer.MIN_VALUE  ||  right.getType()  ==  Integer.MAX_VALUE)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	24	2	replace
590	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
591	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
592	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
593	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
594	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
595	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
596	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
597	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
598	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	158	2	replace
599	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	158	2	replace
600	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
601	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
602	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
603	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
604	[BUG]  [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
605	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
606	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
607	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Integer.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
608	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Node.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Node.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Node.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
609	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
610	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if(left  >=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
611	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
612	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	162	1	replace
613	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	162	1	replace
614	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
615	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
616	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
617	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
618	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
619	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
620	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
621	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	138	1	replace
622	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	138	1	replace
623	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	138	1	replace
624	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	138	1	replace
625	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
626	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
627	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
628	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	107	None	replace
629	[BUG]  [BUGGY]  Node  left  =  n.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n.removeFirstChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  left  =  n.removeFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
630	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CRALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	118	None	replace
631	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CRALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	118	None	replace
632	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CRALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	118	None	replace
633	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CRALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	118	None	replace
634	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CRALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	118	None	replace
635	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
636	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
637	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
638	[BUG]  [BUGGY]  if(left!=  null)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
639	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
640	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
641	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
642	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
643	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
644	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
645	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
646	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	145	None	replace
647	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	145	1	replace
648	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	145	1	replace
649	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
650	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
651	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
652	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
653	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(right.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
654	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	77	None	replace
655	[BUG]  [BUGGY]  if(left!=  null)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	77	None	replace
656	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	77	None	replace
657	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
658	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
659	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
660	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
661	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CRALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
662	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
663	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	98	None	replace
664	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	98	None	replace
665	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	98	None	replace
666	[BUG]  [BUGGY]  int  negNum  =  n.getIntValue()  *  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  int  negNum  =  n.getIntValue()  *  MAX_FOLD_NUMBER;  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	int  negNum  =  n.getIntValue()  *  MAX_FOLD_NUMBER;	  int    negNum    =    n.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
667	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
668	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
669	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
670	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
671	[BUG]  [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
672	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  If(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  If(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  If(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	143	None	replace
673	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	73	2	replace
674	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	73	2	replace
675	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
676	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SCRIPT)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
677	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
678	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
679	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	142	1	replace
680	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	142	1	replace
681	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    If(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
682	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
683	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
684	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    TOken.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
685	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
686	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
687	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  If(left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  If(left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER)    {    If(left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	165	None	add
688	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
689	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOKENS_ERROR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOKENS_ERROR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  TOKENS_ERROR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
690	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
691	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
692	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
693	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
694	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
695	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
696	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
697	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  left  =  n.getFirstChild().getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
698	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
699	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
700	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
701	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
702	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
703	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
704	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
705	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
706	[BUG]  [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
707	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	91	None	replace
708	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	91	None	replace
709	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	91	None	replace
710	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Integer.MIN_VALUE  ||  right.getType()  ==  Integer.MAX_VALUE)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Integer.MIN_VALUE  ||  right.getType()  ==  Integer.MAX_VALUE)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
711	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Integer.MIN_VALUE  ||  right.getType()  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Integer.MIN_VALUE  ||  right.getType()  ==  Integer.MAX_VALUE)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Integer.MIN_VALUE  ||  right.getType()  ==  Integer.MAX_VALUE)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
712	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.StrING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.StrING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.StrING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	139	None	add
713	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    If(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
714	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
715	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	100	None	replace
716	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	138	1	replace
718	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	138	1	replace
719	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	125	2	replace
720	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	125	2	replace
721	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	125	2	replace
722	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	125	2	replace
723	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CRALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CRALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.CRALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
724	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(RIGHT.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(RIGHT.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(RIGHT.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
725	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	104	None	replace
726	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	104	None	replace
727	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
728	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
729	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
730	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
731	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
732	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
733	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Integer.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
734	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	113	2	replace
735	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	113	2	replace
736	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	113	2	replace
737	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SCRIPT  ||  left.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	113	2	replace
738	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	113	2	replace
739	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	113	2	replace
740	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	113	2	replace
741	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.STRING)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	113	2	replace
742	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.SCRIPT)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.SCRIPT)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	70	2	replace
743	[BUG]  [BUGGY]  if(n.getType()  ==  Token.SCRIPT)  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.SCRIPT)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.SCRIPT)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	70	2	replace
744	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NAME)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	70	2	replace
745	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NAME)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	70	2	replace
746	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	156	None	replace
747	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
748	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Integer.VAR    &&    right.getType()    ==    Integer.NUMBER)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
749	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Integer.VAR    &&    right.getType()    ==    Integer.NUMBER)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
750	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Integer.VAR  ||  right.getType()  ==  Integer.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Integer.VAR    &&    right.getType()    ==    Integer.NUMBER)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
751	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
752	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
753	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
754	[BUG]  [BUGGY]  if(left!=  null)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
755	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
756	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
757	[BUG]  [BUGGY]  Node  right  =  n.getParent();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getParent();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n.getParent();	  Node    right    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
758	[BUG]  [BUGGY]  Node  right  =  n.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getNext()  +  1;  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n.getNext()  +  1;	  Node    right    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
759	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
760	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
761	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	151	1	replace
762	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	151	1	replace
763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	151	1	replace
764	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	151	1	replace
765	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
766	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  >>  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  >>  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  >>  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
767	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	170	1	replace
768	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	170	1	replace
769	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	170	1	replace
770	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	170	1	replace
771	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.VAR    ||    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	148	None	add
772	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
773	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(left  >=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
774	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.NAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
775	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.VOID  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.VOID  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.VOID  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	116	None	add
776	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	43	1	replace
777	[BUG]  [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	43	1	replace
778	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	43	2	replace
779	[BUG]  [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	43	2	replace
780	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
781	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
782	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	88	None	replace
783	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	88	None	replace
784	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CRALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CRALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CRALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	167	None	add
785	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()!=    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	99	None	replace
786	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(left.getType()!=  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()!=    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	99	None	replace
787	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	102	None	replace
788	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	102	None	replace
789	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	71	1	replace
790	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	71	1	replace
791	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  &&  left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
792	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.FALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.FALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  &&  left.getType()  ==  Token.FALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
793	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
794	[BUG]  [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  val);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  val);  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Integer  result  =  tryFoldShift(n,  left,  right,  val);	  Integer    result    =    tryFoldShift(n,    left,    right);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
795	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
796	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
797	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
798	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
799	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
800	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
801	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
802	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(RIGHT.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(RIGHT.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(RIGHT.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	163	None	add
803	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    TOKEN    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	136	None	replace
804	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    TOKEN    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	136	None	replace
805	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    TOKEN    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	136	None	replace
806	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  If(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  If(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.STRING)    {    If(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
807	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    >=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
808	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  >=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  >=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  >=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    >=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
809	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    >=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
810	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    >=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
811	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    >=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	93	None	replace
812	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	115	2	replace
813	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	115	2	replace
814	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
815	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
816	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
817	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
818	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(left!=  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(left!=  null  ||  left.getType()  ==  TOKEN  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
819	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	120	2	replace
820	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	120	2	replace
821	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	26	2	replace
822	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	26	2	replace
823	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
824	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
825	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
826	[BUG]  [BUGGY]  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
827	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
828	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
829	[BUG]  [BUGGY]  if(n.getType()  ==  Token.SCRIPT)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.SCRIPT)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.SCRIPT)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
830	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.VAR)  {	  if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	51	2	replace
831	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.VAR)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.VAR)  {	  if(n.getType()    ==    Token.VAR    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	51	2	replace
832	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    If(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
833	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.VAR  &&  right.getType()  ==  Integer.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.VAR  &&  right.getType()  ==  Integer.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Integer.VAR  &&  right.getType()  ==  Integer.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
834	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
835	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
836	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
837	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
838	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	155	None	replace
839	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	155	None	replace
840	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	155	None	replace
841	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	155	None	replace
842	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
843	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
844	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
845	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
846	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (right.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
847	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	45	2	replace
848	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	45	2	replace
849	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
850	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getFirstChild()  :  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n!=  null?  left.getFirstChild()  :  n.getFirstChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n!=  null?  left.getFirstChild()  :  n.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
851	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getLastChild()  :  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n!=  null?  left.getLastChild()  :  n.getLastChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n!=  null?  left.getLastChild()  :  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
852	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	101	2	replace
853	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	101	2	replace
854	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	101	2	replace
855	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  &&  left.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	101	2	replace
856	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
857	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING)  {  if(right.getType()  ==  Token.STRING  ||  right.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.STRING    &&    right.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
858	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CRALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CRALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CRALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
859	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	84	None	replace
860	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	84	None	replace
861	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	84	None	replace
862	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	166	2	replace
863	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	166	2	replace
864	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	166	1	replace
865	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.GETELEM)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.GETELEM)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	166	1	replace
866	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
867	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	66	1	replace
868	[BUG]  [BUGGY]  if(left!=  null)  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	66	1	replace
869	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
870	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
871	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
872	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
873	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
874	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCALE  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  cannot  find  symbol  SCALE  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCALE  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SCALE  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol  SCALE	8	None	replace
875	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
876	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
877	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	127	2	replace
878	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	127	2	replace
879	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETPROP  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.GETPROP  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	127	2	replace
880	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETPROP  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETPROP  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.GETPROP  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	127	2	replace
881	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	127	2	replace
882	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	127	2	replace
883	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()!=    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	105	None	replace
884	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.CALL)  {  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()!=    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	105	None	replace
885	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
886	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
887	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.EMPTY  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.EMPTY  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
888	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.EMPTY  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.EMPTY  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.EMPTY  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
889	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  If(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  If(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    If(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
890	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
891	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
892	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
893	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
894	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
895	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
896	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
897	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
898	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	123	1	replace
899	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	123	1	replace
900	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	123	1	replace
901	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	123	1	replace
902	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  right;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext(),  right;  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  left.getNext(),  right;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
903	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.STRING)    {    if(left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
904	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	137	None	add
905	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	90	None	replace
906	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
907	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
908	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    if(right  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
909	[BUG]  [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.ASSIGN)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	143	None	replace
910	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
911	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
912	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
913	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if    (left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
914	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
915	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left  >=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
916	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.STRING)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	120	2	replace
917	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.STRING)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  ComparisonFailure  	120	2	replace
918	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
919	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
920	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	152	None	replace
921	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	152	None	replace
922	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
923	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	115	2	replace
924	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  &&  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	115	2	replace
925	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
926	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	162	2	replace
927	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	162	2	replace
928	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.ASSIGN)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	40	2	replace
929	[BUG]  [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.ASSIGN)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	40	2	replace
930	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
931	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]            ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
932	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	127	1	replace
933	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	127	1	replace
934	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.SETELEM  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	127	1	replace
935	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SETELEM  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SETELEM  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.GETELEM    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	127	1	replace
936	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
937	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
938	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if(right!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	114	None	add
939	[BUG]  [BUGGY]  Node  left  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  node.getLastChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  left  =  node.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
940	[BUG]  [BUGGY]  Node  right  =  n.getAncestor(2);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getAncestor(2);  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n.getAncestor(2);	  Node    right    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
941	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	38	2	replace
942	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	38	2	replace
943	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    >=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	93	1	replace
944	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()    >=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	93	1	replace
945	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	73	2	replace
946	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	73	2	replace
947	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.VAR)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
948	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
949	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
950	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
951	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
952	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getFirstChild().getNext();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n.getFirstChild().getNext();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
953	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  &&  right.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	45	2	replace
954	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  right.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  right.getType()!=  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    &&    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	45	2	replace
955	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
956	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
957	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
958	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
959	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
960	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
961	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
962	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
963	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()!=  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	43	1	replace
964	[BUG]  [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()!=  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	43	1	replace
965	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	43	2	replace
966	[BUG]  [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	43	2	replace
967	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
968	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    TOken.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
969	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	142	2	replace
970	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.STRING    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	142	2	replace
971	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
972	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    ||    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
973	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	49	2	replace
974	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	49	2	replace
975	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.FUNCTION    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
976	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
977	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
978	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
979	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
980	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
981	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.FUNCTION    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
982	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()!=  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()!=  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
983	[BUG]  [BUGGY]  if(left.getType()!=  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()!=  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()!=  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
984	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.SCRIPT  ||  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	172	2	replace
985	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SCRIPT  ||  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	172	2	replace
986	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
987	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.STRING    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	140	1	replace
988	[BUG]  [BUGGY]  Node  right  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  node.getLastChild();  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  node.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
989	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.VAR)    {    if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	150	None	add
990	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	107	2	replace
991	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()    ==    Token.CALL    &&    right.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	107	2	replace
992	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.SCRIPT    ||    right.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
993	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.SCRIPT)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.SCRIPT)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	166	1	replace
994	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.SCRIPT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.SCRIPT)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.SCRIPT)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	166	1	replace
995	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.BLOCK)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	166	1	replace
996	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.BLOCK)  {	  if(left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	166	1	replace
997	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(right!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	128	None	add
998	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
999	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
1000	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.FUNCTION)    {    if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
1001	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	145	None	replace
1002	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
1003	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
1004	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.N  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.N  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.N	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
1005	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Integer.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
1006	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.BLOCK  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.BLOCK  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	125	2	replace
1007	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.BLOCK  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.BLOCK  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.BLOCK  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    &&    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	125	2	replace
1008	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Node.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
1009	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Node.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
1010	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	155	None	replace
1011	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	155	None	replace
1012	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.N	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	155	None	replace
1013	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
1014	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.VAR    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
1015	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    right.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
1016	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	138	1	replace
1017	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    &&    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	138	1	replace
1018	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
1019	[BUG]  [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
1020	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
1021	[BUG]  [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
1022	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.STRING)    {    if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
1023	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  ComparisonFailure  	170	2	replace
1024	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.CALL)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    	compilable	  [FE]  ComparisonFailure  	170	2	replace
1025	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	59	2	replace
1026	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  ComparisonFailure  	59	2	replace
1027	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	123	None	replace
1028	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
1029	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()!=    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
1030	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.CALL)    {    if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	169	None	add
1031	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
1032	[BUG]  [BUGGY]  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
1033	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	144	None	replace
1034	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
1035	[BUG]  [BUGGY]  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
1036	[BUG]  [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (right!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  if  (right!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    if  (right!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
1037	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()    ==    Token.CALL    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1038	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	133	2	replace
1039	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  &&  right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	133	2	replace
1040	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	133	1	replace
1041	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left!=    null    &&    right.getType()    ==    Token.STRING    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	133	1	replace
1042	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	90	1	replace
1043	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	90	1	replace
1044	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	90	1	replace
1045	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.STRING)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.STRING)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()    ==    Token.NUMBER    ||    left.getType()!=    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	90	1	replace
1046	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	129	2	replace
1047	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	129	2	replace
1048	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
1049	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
1050	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1051	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1052	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
1053	[BUG]  [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Integer  result  =  tryFoldShift(n,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  Integer    result    =    tryFoldShift(n,    left,    right);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
1054	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
1055	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
1056	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]      right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  &&  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=    null    ||    right.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
