bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
2	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
4	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
6	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
7	[BUG]  [BUGGY]  if  (lvalInt  ==  lvalInt)  {  if  (lvalInt  ==  lvalInt)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  lvalInt)  {  if  (lvalInt  ==  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    lvalInt)    {    if  (lvalInt  ==  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
8	[BUG]  [BUGGY]  if  (lvalInt  ==  lvalInt)  {  if  (lvalInt!=  lvalInt)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  lvalInt)  {  if  (lvalInt!=  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    lvalInt)    {    if  (lvalInt!=  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
9	[BUG]  [BUGGY]  if  (lvalInt  ==  lvalInt)  {  If  (lvalInt  ==  lvalInt)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  lvalInt)  {  If  (lvalInt  ==  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    lvalInt)    {    If  (lvalInt  ==  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
10	[BUG]  [BUGGY]  if  (lvalInt  ==  lvalInt)  {  if  (lvalInt  >=  lvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  lvalInt)  {  if  (lvalInt  >=  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    lvalInt)    {    if  (lvalInt  >=  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
11	[BUG]  [BUGGY]  if  (lvalInt  ==  lvalInt)  {  if  (lvalInt  >>  lvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  lvalInt)  {  if  (lvalInt  >>  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    lvalInt)    {    if  (lvalInt  >>  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
12	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
13	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
14	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
15	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
16	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  [BUGGY]  MAX_FOLD_NUMBER)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  [BUGGY]  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  [BUGGY]  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    lvalInt)    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
18	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    lvalInt)    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
19	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {	  if    (lvalInt!=    lvalInt)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	8	None	replace
20	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_FOLD_NUMBER_ERROR)  {	  if    (lvalInt    ==    lvalInt)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	15	None	replace
21	[BUG]  [BUGGY]  if  (lvalInt  ==  left)  {  [CE]  incomparable  types:  int  and  Node  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  left)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  left)  {	  if    (lvalInt    ==    lvalInt)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	15	None	replace
22	[BUG]  [BUGGY]  if  (lvalInt!=  lvalInt)  {  if  (lvalInt!=  lvalInt)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  lvalInt)  {  if  (lvalInt!=  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    lvalInt)    {    if  (lvalInt!=  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
23	[BUG]  [BUGGY]  if  (lvalInt!=  lvalInt)  {  if  (lvalInt  >=  lvalInt)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  lvalInt)  {  if  (lvalInt  >=  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    lvalInt)    {    if  (lvalInt  >=  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
24	[BUG]  [BUGGY]  if  (lvalInt!=  lvalInt)  {  if  (lvalInt  >>  lvalInt)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  lvalInt)  {  if  (lvalInt  >>  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    lvalInt)    {    if  (lvalInt  >>  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
25	[BUG]  [BUGGY]  if  (lvalInt!=  lvalInt)  {  if  (lvalInt  ==  lvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  lvalInt)  {  if  (lvalInt  ==  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    lvalInt)    {    if  (lvalInt  ==  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
26	[BUG]  [BUGGY]  if  (lvalInt!=  lvalInt)  {  If  (lvalInt!=  lvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  lvalInt)  {  If  (lvalInt!=  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    lvalInt)    {    If  (lvalInt!=  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
27	[BUG]  [BUGGY]  if  (lvalInt!=  left.length)  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  left.length)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.length)  {	  if    (lvalInt!=    left)    {    	non-compiled	[CE]  cannot  find  symbol  length	5	None	replace
28	[BUG]  [BUGGY]  if  (lvalInt!=  left.intValue())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  left.intValue())  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.intValue())  {	  if    (lvalInt!=    left)    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
29	[BUG]  [BUGGY]  if  (lvalInt  >=  left)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  >=  left)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  left)  {	  if    (lvalInt!=    left)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	replace
30	[BUG]  [BUGGY]  if  (lvalInt!=  n)  {  [CE]  incomparable  types:  int  and  Node  [FE]          AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  n)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  n)  {	  if    (lvalInt!=    rvalInt)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	16	None	replace
31	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  MAX_FOLD_NUMBER);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  n  =  Math.min(lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(lvalInt,  MAX_FOLD_NUMBER);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  Math.min(lvalInt,  lvalInt));  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  Math.min(lvalInt,  lvalInt));  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  lvalInt));	      	non-compiled	[CE]  ';'  expected	9	None	replace
33	[BUG]  [BUGGY]  int  left  =(int)lvalInt;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  int  left  =(int)lvalInt;  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  left  =(int)lvalInt;	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  lvalInt  =(int)lvalInt;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  lvalInt  =(int)lvalInt;  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	lvalInt  =(int)lvalInt;	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  lvalInt);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  n  =  Math.min(lvalInt,  lvalInt);  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(lvalInt,  lvalInt);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  int  left  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  int  left  =  n.getFirstChild();  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  left  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  if  (lvalInt!=  rval)  {  if  (lvalInt!=  rval)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  rval)  {  if  (lvalInt!=  rval)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    rval)    {    if  (lvalInt!=  rval)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
38	[BUG]  [BUGGY]  if  (lvalInt!=  rval)  {  if  (lvalInt  >=  rval)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  rval)  {  if  (lvalInt  >=  rval)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    rval)    {    if  (lvalInt  >=  rval)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
39	[BUG]  [BUGGY]  if  (lvalInt!=  rval)  {  if  (lvalInt  >>  rval)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  rval)  {  if  (lvalInt  >>  rval)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    rval)    {    if  (lvalInt  >>  rval)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
40	[BUG]  [BUGGY]  if  (lvalInt!=  rval)  {  if  (lvalInt  ==  rval)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  rval)  {  if  (lvalInt  ==  rval)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    rval)    {    if  (lvalInt  ==  rval)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
41	[BUG]  [BUGGY]  if  (lvalInt!=  rval)  {  If  (lvalInt!=  rval)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  rval)  {  If  (lvalInt!=  rval)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    rval)    {    If  (lvalInt!=  rval)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
42	[BUG]  [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]              AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	6	None	replace
43	[BUG]  [BUGGY]  if  (lvalInt!=  NEGATING_A_NON_NUMBER_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  NEGATING_A_NON_NUMBER_ERROR)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  NEGATING_A_NON_NUMBER_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	6	None	replace
44	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_0_ERROR  [FE]                  AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_BY_0_ERROR)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BY_0_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0_ERROR	6	None	replace
45	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  MAX_BITWISE_OPERAND_OUT_OF_RANGE  [FE]                    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BITWISE_OPERAND_OUT_OF_RANGE	6	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  rval)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  ==  rval)  {	  if    (lvalInt!=    rval)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
47	[BUG]  [BUGGY]  if  (lvalInt  ==  rval)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  rval)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  rval)  {	  if    (lvalInt!=    rval)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
48	[BUG]  [BUGGY]  if  (lvalInt!=  0)  {  if  (lvalInt!=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  0)  {  if  (lvalInt!=  0)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    0)    {    if  (lvalInt!=  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
49	[BUG]  [BUGGY]  if  (lvalInt!=  0)  {  if  (lvalInt  >=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  0)  {  if  (lvalInt  >=  0)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    0)    {    if  (lvalInt  >=  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
50	[BUG]  [BUGGY]  if  (lvalInt!=  0)  {  if  (lvalInt  >>  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  0)  {  if  (lvalInt  >>  0)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    0)    {    if  (lvalInt  >>  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
51	[BUG]  [BUGGY]  if  (lvalInt!=  0)  {  if  (lvalInt  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  0)  {  if  (lvalInt  ==  0)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    0)    {    if  (lvalInt  ==  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
52	[BUG]  [BUGGY]  if  (lvalInt!=  0)  {  If  (lvalInt!=  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  0)  {  If  (lvalInt!=  0)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    0)    {    If  (lvalInt!=  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
53	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
54	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
55	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
56	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
57	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    If  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
59	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
61	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  0)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  ==  0)  {	  if    (lvalInt!=    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
63	[BUG]  [BUGGY]  if  (lvalInt  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  0)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  0)  {	  if    (lvalInt!=    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  >=  0)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  >=  0)  {	  if    (lvalInt!=    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
65	[BUG]  [BUGGY]  if  (lvalInt  >=  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  >=  0)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  0)  {	  if    (lvalInt!=    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  32)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt!=  32)  {	  if    (lvalInt!=    0)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
67	[BUG]  [BUGGY]  if  (lvalInt!=  32)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  32)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  32)  {	  if    (lvalInt!=    0)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
68	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BITWISE_OPERAND)  {  [CE]  cannot  find  symbol  MAX_BITWISE_OPERAND  [FE]              AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_BITWISE_OPERAND)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BITWISE_OPERAND)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BITWISE_OPERAND	6	None	replace
69	[BUG]  [BUGGY]  if  (lvalInt!=  INDEX_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE  [FE]                AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  INDEX_OUT_OF_RANGE)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INDEX_OUT_OF_RANGE)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE	6	None	replace
70	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    If  (lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
71	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
72	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  n.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
73	[BUG]  [BUGGY]  Math.min(lvalInt,  left.length()  -  lvalInt));  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  Math.min(lvalInt,  left.length()  -  lvalInt));  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  left.length()  -  lvalInt));	      	non-compiled	[CE]  ';'  expected	9	None	replace
74	[BUG]  [BUGGY]  if  (left!=  lvalInt)  {  [CE]  incomparable  types:  Node  and  int  [FE]            AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (left!=  lvalInt)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (left!=  lvalInt)  {	  if    (lvalInt!=    left)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	5	None	replace
75	[BUG]  [BUGGY]  if  (lvalInt!=  right)  {  [CE]  incomparable  types:  int  and  Node  [FE]              AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  right)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  right)  {	  if    (lvalInt!=    left)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	5	None	replace
76	[BUG]  [BUGGY]  if  (lvalInt!=  0)  {  if  (lvalInt  [BUGGY]  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  0)  {  if  (lvalInt  [BUGGY]  0)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    0)    {    if  (lvalInt  [BUGGY]  0)  {	  	non-compiled	[CE]  ')'  expected	12	None	add
77	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_BITWISE_OPERAND)  {  [CE]  cannot  find  symbol  MAX_BITWISE_OPERAND  [FE]    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt  ==  MAX_BITWISE_OPERAND)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_BITWISE_OPERAND)  {	  if    (lvalInt    ==    lvalInt)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BITWISE_OPERAND	15	None	replace
78	[BUG]  [BUGGY]  double  rvalInt  =  (double)lvalInt;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  double  rvalInt  =  (double)lvalInt;  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	double  rvalInt  =  (double)lvalInt;	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  int  rvalInt  =  (int)lvalInt;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  int  rvalInt  =  (int)lvalInt;  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  rvalInt  =  (int)lvalInt;	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_BOUNDS_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_BOUNDS_ERROR  [FE]              AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_BOUNDS_ERROR)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_BOUNDS_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_BOUNDS_ERROR	6	None	replace
81	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_BY_0_ERROR  [FE]                AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  MAX_FOLD_BY_0_ERROR)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_BY_0_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_BY_0_ERROR	6	None	replace
82	[BUG]  [BUGGY]  if  (lvalInt!=  BY_0_ERROR)  {  [CE]  cannot  find  symbol  BY_0_ERROR  [FE]          AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  BY_0_ERROR)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  BY_0_ERROR)  {	  if    (lvalInt!=    rvalInt)    {    	non-compiled	[CE]  cannot  find  symbol  BY_0_ERROR	16	None	replace
83	[BUG]  [BUGGY]  if  (lvalInt!=  left.intValue)  {  [CE]  cannot  find  symbol  intValue  [FE]            AssertionFailedError    [CONTEXT]      if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;    [BUGGY]  if  (lvalInt!=  left.intValue)  {  [BUGGY]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.intValue)  {	  if    (lvalInt!=    left)    {    	non-compiled	[CE]  cannot  find  symbol  intValue	5	None	replace
