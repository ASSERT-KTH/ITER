bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
2	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
4	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
6	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
7	[BUG]  [BUGGY]  float  rvalInt  =  (float)lvalInt;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  float  rvalInt  =  (float)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	float  rvalInt  =  (float)lvalInt;	  int    rvalInt    =    (int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
8	[BUG]  [BUGGY]  long  rvalInt  =  (long)lvalInt;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  long  rvalInt  =  (long)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	long  rvalInt  =  (long)lvalInt;	  int    rvalInt    =    (int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
9	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
10	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
11	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
12	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
13	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
14	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
15	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  ==  32)  {	  if    (lvalInt!=    32)    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
17	[BUG]  [BUGGY]  if  (lvalInt  ==  32)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  32)  {	  if    (lvalInt!=    32)    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
18	[BUG]  [BUGGY]  if  (lvalInt!=  left.int)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left.int)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.int)  {	  if    (lvalInt!=    left.intValue)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
19	[BUG]  [BUGGY]  if  (lvalInt!=  left.nextInt)  {  [CE]  cannot  find  symbol  nextInt  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left.nextInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.nextInt)  {	  if    (lvalInt!=    left.intValue)    {    	non-compiled	[CE]  cannot  find  symbol  nextInt	83	None	replace
20	[BUG]  [BUGGY]  if  (lvalInt!=  left.nodeValue)  {  [CE]  cannot  find  symbol  nodeValue  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left.nodeValue)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.nodeValue)  {	  if    (lvalInt!=    left.intValue)    {    	non-compiled	[CE]  cannot  find  symbol  nodeValue	83	None	replace
21	[BUG]  [BUGGY]  if  (lvalInt!=  left.nextInt())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left.nextInt())  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.nextInt())  {	  if    (lvalInt!=    left.intValue)    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
22	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  right.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
23	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  right.getLastChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
24	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  left.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
25	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  n.getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
27	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
28	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_FOLD_NUMBER_ERROR)  {	  if    (lvalInt!=    NEGATING_A_NON_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	43	None	replace
29	[BUG]  [BUGGY]  if  (lvalInt  ==  rval)  {  if  (lvalInt  ==  rval)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  rval)  {  if  (lvalInt  ==  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    rval)    {    if  (lvalInt  ==  rval)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
30	[BUG]  [BUGGY]  if  (lvalInt  ==  rval)  {  if  (lvalInt!=  rval)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  rval)  {  if  (lvalInt!=  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    rval)    {    if  (lvalInt!=  rval)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
31	[BUG]  [BUGGY]  if  (lvalInt  ==  rval)  {  If  (lvalInt  ==  rval)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  rval)  {  If  (lvalInt  ==  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    rval)    {    If  (lvalInt  ==  rval)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
32	[BUG]  [BUGGY]  if  (lvalInt  ==  rval)  {  if  (lvalInt  >=  rval)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  rval)  {  if  (lvalInt  >=  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    rval)    {    if  (lvalInt  >=  rval)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
33	[BUG]  [BUGGY]  if  (lvalInt  ==  rval)  {  if  (lvalInt  >>  rval)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  rval)  {  if  (lvalInt  >>  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    rval)    {    if  (lvalInt  >>  rval)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
34	[BUG]  [BUGGY]  if  (lvalInt  >=  left.length)  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  left.length)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  left.length)  {	  if    (lvalInt    >=    left)    {    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
35	[BUG]  [BUGGY]  if  (lvalInt  >=  left.intValue())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  left.intValue())  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  left.intValue())  {	  if    (lvalInt    >=    left)    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
36	[BUG]  [BUGGY]  If  (lvalInt!=  left)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt!=  left)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt!=  left)  {	  if    (lvalInt!=    lvalInt)    {    If    (lvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
37	[BUG]  [BUGGY]  If  (lvalInt!=  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt!=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt!=  0)  {	  if    (lvalInt!=    lvalInt)    {    If    (lvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
38	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
39	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
40	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
41	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
42	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
43	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
44	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
45	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BY_0_ERROR  ||  lvalInt!=  MAX_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_0_ERROR  [FE]          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_BY_0_ERROR  ||  lvalInt!=  MAX_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BY_0_ERROR  ||  lvalInt!=  MAX_BY_0_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0_ERROR	19	None	replace
46	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_FOLD_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	19	None	replace
47	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER_ERROR  ||  lvalInt  >=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER_ERROR  ||  lvalInt  >=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_NUMBER_ERROR  ||  lvalInt  >=  MAX_FOLD_NUMBER_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	19	None	replace
48	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_BY_0_ERROR  ||  lvalInt!=  MAX_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_0_ERROR  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_BY_0_ERROR  ||  lvalInt!=  MAX_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_BY_0_ERROR  ||  lvalInt!=  MAX_BY_0_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0_ERROR	19	None	replace
49	[BUG]  [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	19	None	replace
50	[BUG]  [BUGGY]  if  (lvalInt!=  right.length)  {  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  right.length)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  right.length)  {	  if    (lvalInt!=    left.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	27	None	replace
51	[BUG]  [BUGGY]  if  (lvalInt  ==  left.length)  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  left.length)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  left.length)  {	  if    (lvalInt!=    left.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	27	None	replace
52	[BUG]  [BUGGY]  n  =  Math.min(MAX_FOLD_NUMBER,  lvalInt);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(MAX_FOLD_NUMBER,  lvalInt);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(MAX_FOLD_NUMBER,  lvalInt);	  n    =    Math.min(lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
53	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  MAX_FOLD_NUMBER,  lvalInt);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(lvalInt,  MAX_FOLD_NUMBER,  lvalInt);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(lvalInt,  MAX_FOLD_NUMBER,  lvalInt);	  n    =    Math.min(lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
54	[BUG]  [BUGGY]  n  =  Math.min(Math.min(lvalInt,  lvalInt));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(Math.min(lvalInt,  lvalInt));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(Math.min(lvalInt,  lvalInt));	  n    =    Math.min(lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
55	[BUG]  [BUGGY]  n  =  Math.min(Math.min(lvalInt,  lvalInt),  MAX_FOLD_NUMBER);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(Math.min(lvalInt,  lvalInt),  MAX_FOLD_NUMBER);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(Math.min(lvalInt,  lvalInt),  MAX_FOLD_NUMBER);	  n    =    Math.min(lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
56	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(lvalInt,  0);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(lvalInt,  0);	  n    =    Math.min(lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
57	[BUG]  [BUGGY]  int  left  =(int)lvalInt  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  int  left  =(int)lvalInt  +  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  left  =(int)lvalInt  +  1;	  int    left    =(int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
58	[BUG]  [BUGGY]  int  left  =(int)lvalInt  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  int  left  =(int)lvalInt  -  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  left  =(int)lvalInt  -  1;	  int    left    =(int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
59	[BUG]  [BUGGY]  float  left  =(float)lvalInt;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  float  left  =(float)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	float  left  =(float)lvalInt;	  int    left    =(int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
60	[BUG]  [BUGGY]  int  left  =(int)lvalInt.doubleValue();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  int  left  =(int)lvalInt.doubleValue();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  left  =(int)lvalInt.doubleValue();	  int    left    =(int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
61	[BUG]  [BUGGY]  if  (lvalInt!=  INDEX_OUT_OF_BOUNDS_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  INDEX_OUT_OF_BOUNDS_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INDEX_OUT_OF_BOUNDS_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_BOUNDS_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	80	None	replace
62	[BUG]  [BUGGY]  Node  left  =  lvalInt.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Node  left  =  lvalInt.getLastChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  lvalInt.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
63	[BUG]  [BUGGY]  Node  left  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Node  left  =  node.getLastChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  node.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
64	[BUG]  [BUGGY]  if  (lvalInt  ==  NEGATING_A_NON_NUMBER_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  NEGATING_A_NON_NUMBER_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  NEGATING_A_NON_NUMBER_ERROR)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	20	None	replace
65	[BUG]  [BUGGY]  if  (lvalInt  ==  n)  {  [CE]  incomparable  types:  int  and  Node  [FE]          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  n)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  n)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	20	None	replace
66	[BUG]  [BUGGY]  if  (lvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	20	None	replace
67	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_0_ERROR  [FE]              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_BY_0_ERROR)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0_ERROR	20	None	replace
68	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  MAX_BITWISE_OPERAND_OUT_OF_RANGE  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BITWISE_OPERAND_OUT_OF_RANGE	20	None	replace
69	[BUG]  [BUGGY]  Math.min(lvalInt,  right.length()  -  lvalInt));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  right.length()  -  lvalInt));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  right.length()  -  lvalInt));	  Math.min(lvalInt,    left.length()    -    lvalInt));    	non-compiled	[CE]  ';'  expected	73	None	replace
70	[BUG]  [BUGGY]  Math.min(lvalInt,  left.length()  -  MAX_FOLD_NUMBER));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  left.length()  -  MAX_FOLD_NUMBER));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  left.length()  -  MAX_FOLD_NUMBER));	  Math.min(lvalInt,    left.length()    -    lvalInt));    	non-compiled	[CE]  ';'  expected	73	None	replace
71	[BUG]  [BUGGY]  Math.min(lvalInt,  left.length()  *  lvalInt));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  left.length()  *  lvalInt));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  left.length()  *  lvalInt));	  Math.min(lvalInt,    left.length()    -    lvalInt));    	non-compiled	[CE]  ';'  expected	73	None	replace
72	[BUG]  [BUGGY]  Math.min(lvalInt,  left.length()  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  left.length()  -  1);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  left.length()  -  1);	  Math.min(lvalInt,    left.length()    -    lvalInt));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
73	[BUG]  [BUGGY]  Math.min(lvalInt,  left.length()  -  lvalInt  +  1));  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  left.length()  -  lvalInt  +  1));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  left.length()  -  lvalInt  +  1));	  Math.min(lvalInt,    left.length()    -    lvalInt));    	non-compiled	[CE]  ';'  expected	73	None	replace
74	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  left);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(lvalInt,  left);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(lvalInt,  left);	  n    =    Math.min(lvalInt,    lvalInt);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
75	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  rvalInt);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(lvalInt,  rvalInt);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(lvalInt,  rvalInt);	  n    =    Math.min(lvalInt,    lvalInt);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
76	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  newNumber);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(lvalInt,  newNumber);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(lvalInt,  newNumber);	  n    =    Math.min(lvalInt,    lvalInt);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
77	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
78	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
79	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
80	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
81	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  If  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  If  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    If  (lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
82	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  [BUGGY]  MAX_FOLD_NUMBER)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  [BUGGY]  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  [BUGGY]  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
83	[BUG]  [BUGGY]  double  rvalInt  =  (double)lvalInt  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  double  rvalInt  =  (double)lvalInt  +  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	double  rvalInt  =  (double)lvalInt  +  1;	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
84	[BUG]  [BUGGY]  rvalInt  =  (double)lvalInt;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  rvalInt  =  (double)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	rvalInt  =  (double)lvalInt;	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
85	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
86	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
87	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
88	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
89	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
90	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
91	[BUG]  [BUGGY]  int  left  =  right.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  int  left  =  right.getFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  left  =  right.getFirstChild();	  int    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
92	[BUG]  [BUGGY]  int  left  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  int  left  =  n.getLastChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  left  =  n.getLastChild();	  int    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
93	[BUG]  [BUGGY]  int  left  =  right.getLastChild();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  int  left  =  right.getLastChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  left  =  right.getLastChild();	  int    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
94	[BUG]  [BUGGY]  int  left  =  lvalInt.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  int  left  =  lvalInt.getFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  left  =  lvalInt.getFirstChild();	  int    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
95	[BUG]  [BUGGY]  LvalInt  lvalInt  =(LvalInt)lvalInt;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  LvalInt  lvalInt  =(LvalInt)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	LvalInt  lvalInt  =(LvalInt)lvalInt;	  lvalInt    =(int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
96	[BUG]  [BUGGY]  lvalInt  =(int)lvalInt  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  lvalInt  =(int)lvalInt  +  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	lvalInt  =(int)lvalInt  +  1;	  lvalInt    =(int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
97	[BUG]  [BUGGY]  lvalInt  =(int)lvalInt.doubleValue();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  lvalInt  =(int)lvalInt.doubleValue();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	lvalInt  =(int)lvalInt.doubleValue();	  lvalInt    =(int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
98	[BUG]  [BUGGY]  lvalInt  =(int)lvalInt.clone();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  lvalInt  =(int)lvalInt.clone();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	lvalInt  =(int)lvalInt.clone();	  lvalInt    =(int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
99	[BUG]  [BUGGY]  Math.min(lvalInt,  rvalInt));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  rvalInt));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  rvalInt));	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  ';'  expected	32	None	replace
100	[BUG]  [BUGGY]  Math.min(lvalInt,  0));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  0));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  0));	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  ';'  expected	32	None	replace
101	[BUG]  [BUGGY]  Math.min(lvalInt,  lvalInt)+  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  lvalInt)+  1);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  lvalInt)+  1);	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  not  a  statement	32	None	replace
102	[BUG]  [BUGGY]  Math.min(lvalInt,  lvalInt  +  1));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  lvalInt  +  1));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  lvalInt  +  1));	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  ';'  expected	32	None	replace
103	[BUG]  [BUGGY]  Math.min(lvalInt,  3));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  3));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  3));	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  ';'  expected	32	None	replace
104	[BUG]  [BUGGY]  if  ((  left!=  null)&&(left!=  lvalInt))  {  [CE]  incomparable  types:  Node  and  int  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  ((  left!=  null)&&(left!=  lvalInt))  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  ((  left!=  null)&&(left!=  lvalInt))  {	  if    (left!=    lvalInt)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	74	None	replace
105	[BUG]  [BUGGY]  if  ((  left!=  null)&&(right!=  lvalInt))  {  [CE]  incomparable  types:  Node  and  int  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  ((  left!=  null)&&(right!=  lvalInt))  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  ((  left!=  null)&&(right!=  lvalInt))  {	  if    (left!=    lvalInt)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	74	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  <=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  <=  0)  {	  if    (lvalInt    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	65	2	replace
107	[BUG]  [BUGGY]  if  (lvalInt  <=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  <=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  <=  0)  {	  if    (lvalInt    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	65	2	replace
108	[BUG]  [BUGGY]  If  (lvalInt!=  rval)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt!=  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt!=  rval)  {	  if    (lvalInt!=    rval)    {    If    (lvalInt!=    rval)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
109	[BUG]  [BUGGY]  If  (lvalInt  ==  rval)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt  ==  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt  ==  rval)  {	  if    (lvalInt!=    rval)    {    If    (lvalInt!=    rval)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
110	[BUG]  [BUGGY]  If  (lvalInt!=  n)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt!=  n)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt!=  n)  {	  if    (lvalInt!=    rval)    {    If    (lvalInt!=    rval)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
111	[BUG]  [BUGGY]  If  (lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER)    {    If    (lvalInt!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
112	[BUG]  [BUGGY]  if  (lvalInt  ==  0)  {  if  (lvalInt  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  0)  {  if  (lvalInt  ==  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    0)    {    if  (lvalInt  ==  0)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
113	[BUG]  [BUGGY]  if  (lvalInt  ==  0)  {  if  (lvalInt!=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  0)  {  if  (lvalInt!=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    0)    {    if  (lvalInt!=  0)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
114	[BUG]  [BUGGY]  if  (lvalInt  ==  0)  {  if  (lvalInt  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  0)  {  if  (lvalInt  >=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    0)    {    if  (lvalInt  >=  0)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
115	[BUG]  [BUGGY]  if  (lvalInt  ==  0)  {  If  (lvalInt  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  0)  {  If  (lvalInt  ==  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    0)    {    If  (lvalInt  ==  0)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
116	[BUG]  [BUGGY]  if  (lvalInt  ==  0)  {  if  (lvalInt  >>  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  0)  {  if  (lvalInt  >>  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    0)    {    if  (lvalInt  >>  0)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
117	[BUG]  [BUGGY]  if  (lvalInt!=  DIVIDE_BY_0_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  DIVIDE_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  DIVIDE_BY_0_ERROR)  {	  if    (lvalInt!=    MAX_BY_0_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	44	None	replace
118	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_0_ERROR  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_BY_0_ERROR)  {	  if    (lvalInt!=    MAX_BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0_ERROR	44	None	replace
119	[BUG]  [BUGGY]  If  (lvalInt  ==  left)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt  ==  left)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt  ==  left)  {	  if    (lvalInt    ==    lvalInt)    {    If    (lvalInt    ==    lvalInt)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
120	[BUG]  [BUGGY]  If  (lvalInt  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt  ==  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt  ==  0)  {	  if    (lvalInt    ==    lvalInt)    {    If    (lvalInt    ==    lvalInt)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
121	[BUG]  [BUGGY]  If  (lvalInt  ==  n)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt  ==  n)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt  ==  n)  {	  if    (lvalInt    ==    lvalInt)    {    If    (lvalInt    ==    lvalInt)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
122	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  MAX_BITWISE_OPERAND_OUT_OF_RANGE  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {	  if    (lvalInt!=    MAX_BITWISE_OPERAND_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BITWISE_OPERAND_OUT_OF_RANGE	45	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
124	[BUG]  [BUGGY]  if  (lvalInt  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  <=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
126	[BUG]  [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  <=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
127	[BUG]  [BUGGY]  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    If    (lvalInt    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
128	[BUG]  [BUGGY]  if  (lvalInt  ==  right)  {  [CE]  incomparable  types:  int  and  Node  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  right)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  right)  {	  if    (lvalInt!=    right)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	75	None	replace
129	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
130	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
131	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
132	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >>  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
133	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
134	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
135	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_BY_0_ERROR  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_FOLD_BY_0_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_BY_0_ERROR	81	None	replace
136	[BUG]  [BUGGY]  if  (lvalInt!=  32)  {  if  (lvalInt!=  32)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  32)  {  if  (lvalInt!=  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    32)    {    if  (lvalInt!=  32)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
137	[BUG]  [BUGGY]  if  (lvalInt!=  32)  {  if  (lvalInt  >=  32)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  32)  {  if  (lvalInt  >=  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    32)    {    if  (lvalInt  >=  32)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
138	[BUG]  [BUGGY]  if  (lvalInt!=  32)  {  if  (lvalInt  >>  32)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  32)  {  if  (lvalInt  >>  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    32)    {    if  (lvalInt  >>  32)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
139	[BUG]  [BUGGY]  if  (lvalInt!=  32)  {  if  (lvalInt  ==  32)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  32)  {  if  (lvalInt  ==  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    32)    {    if  (lvalInt  ==  32)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
140	[BUG]  [BUGGY]  if  (lvalInt!=  32)  {  if  (lvalInt  [BUGGY]  32)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  32)  {  if  (lvalInt  [BUGGY]  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    32)    {    if  (lvalInt  [BUGGY]  32)  {	  	non-compiled	[CE]  ')'  expected	66	None	add
141	[BUG]  [BUGGY]  if  (lvalInt!=  32)  {  If  (lvalInt!=  32)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  32)  {  If  (lvalInt!=  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    32)    {    If  (lvalInt!=  32)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
142	[BUG]  [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {	  if    (lvalInt!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	42	None	replace
143	[BUG]  [BUGGY]  if  (lvalInt  ==  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {	  if    (lvalInt!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	42	None	replace
144	[BUG]  [BUGGY]  if  (lvalInt!=  INDEX_BITWISE_OPERAND)  {  [CE]  cannot  find  symbol  INDEX_BITWISE_OPERAND  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  INDEX_BITWISE_OPERAND)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INDEX_BITWISE_OPERAND)  {	  if    (lvalInt!=    INDEX_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  INDEX_BITWISE_OPERAND	69	None	replace
145	[BUG]  [BUGGY]  if  (lvalInt!=  left.intValue()  ||  lvalInt!=  left.intValue())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left.intValue()  ||  lvalInt!=  left.intValue())  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.intValue()  ||  lvalInt!=  left.intValue())  {	  if    (lvalInt!=    left.intValue())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
146	[BUG]  [BUGGY]  if  (lvalInt!=  right.intValue())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  right.intValue())  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  right.intValue())  {	  if    (lvalInt!=    left.intValue())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
147	[BUG]  [BUGGY]  if  (left!=  lvalInt.intValue())  {  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (left!=  lvalInt.intValue())  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (left!=  lvalInt.intValue())  {	  if    (lvalInt!=    left.intValue())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
148	[BUG]  [BUGGY]  if  (lvalInt  >=  0)  {  if  (lvalInt  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  0)  {  if  (lvalInt  >=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    0)    {    if  (lvalInt  >=  0)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
149	[BUG]  [BUGGY]  if  (lvalInt  >=  0)  {  if  (lvalInt!=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  0)  {  if  (lvalInt!=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    0)    {    if  (lvalInt!=  0)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
150	[BUG]  [BUGGY]  if  (lvalInt  >=  0)  {  if  (lvalInt  >>  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  0)  {  if  (lvalInt  >>  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    0)    {    if  (lvalInt  >>  0)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
151	[BUG]  [BUGGY]  if  (lvalInt  >=  0)  {  if  (lvalInt  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  0)  {  if  (lvalInt  ==  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    0)    {    if  (lvalInt  ==  0)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
152	[BUG]  [BUGGY]  if  (lvalInt  >=  0)  {  If  (lvalInt  >=  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  0)  {  If  (lvalInt  >=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    0)    {    If  (lvalInt  >=  0)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
153	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
154	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
155	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
156	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
157	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
158	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
159	[BUG]  [BUGGY]  Node  left  =  lvalInt.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Node  left  =  lvalInt.getFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  lvalInt.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
160	[BUG]  [BUGGY]  if  (lvalInt  >=  0)  {  if  (lvalInt  <  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  0)  {  if  (lvalInt  <  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    0)    {    if  (lvalInt  <  0)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
161	[BUG]  [BUGGY]  double  rvalInt  =  (double)lvalInt.doubleValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  double  rvalInt  =  (double)lvalInt.doubleValue();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	double  rvalInt  =  (double)lvalInt.doubleValue();	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
162	[BUG]  [BUGGY]  double  rvalInt  =  (double)lvalInt  *  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  double  rvalInt  =  (double)lvalInt  *  MAX_FOLD_NUMBER;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	double  rvalInt  =  (double)lvalInt  *  MAX_FOLD_NUMBER;	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
163	[BUG]  [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {	  if    (lvalInt!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	42	None	replace
164	[BUG]  [BUGGY]  if  (lvalInt!=  left)  {  If  (lvalInt!=  lvalInt)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left)  {  If  (lvalInt!=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left)  {  If  (lvalInt!=  lvalInt)  {	  if    (lvalInt!=    lvalInt)    {    If    (lvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
165	[BUG]  [BUGGY]  if(lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  lvalInt)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if(lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if(lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  lvalInt)  {	  if    (lvalInt!=    lvalInt)    {    If    (lvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
166	[BUG]  [BUGGY]  int  rvalInt  =  (int)lvalInt  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  int  rvalInt  =  (int)lvalInt  +  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  rvalInt  =  (int)lvalInt  +  1;	  int    rvalInt    =    (int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
167	[BUG]  [BUGGY]  int  lvalInt  =  (int)lvalInt;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  int  lvalInt  =  (int)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  lvalInt  =  (int)lvalInt;	  int    rvalInt    =    (int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
168	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_RANGE)  {  [CE]  cannot  find  symbol  MAX_FOLD_RANGE  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_RANGE)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_RANGE)  {	  if    (lvalInt!=    MAX_BITWISE_OPERAND)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_RANGE	68	None	replace
169	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_OPERAND)  {  [CE]  cannot  find  symbol  MAX_FOLD_OPERAND  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_OPERAND)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_OPERAND)  {	  if    (lvalInt!=    MAX_BITWISE_OPERAND)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_OPERAND	68	None	replace
170	[BUG]  [BUGGY]  int  left  =  left.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  int  left  =  left.getFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	int  left  =  left.getFirstChild();	  int    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
172	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
173	[BUG]  [BUGGY]  if  (lvalInt  ==  INDEX_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE  [FE]        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  INDEX_OUT_OF_RANGE)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  INDEX_OUT_OF_RANGE)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE	20	None	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
175	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  <  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  <  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	59	2	replace
177	[BUG]  [BUGGY]  if  (lvalInt  <  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  <  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  <  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	59	2	replace
178	[BUG]  [BUGGY]  if  (lvalInt!=  left.node)  {  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left.node)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.node)  {	  if    (lvalInt!=    left.intValue)    {    	non-compiled	[CE]  cannot  find  symbol  node	83	None	replace
179	[BUG]  [BUGGY]  if  (lvalInt!=  left.min)  {  [CE]  cannot  find  symbol  min  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left.min)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.min)  {	  if    (lvalInt!=    left.intValue)    {    	non-compiled	[CE]  cannot  find  symbol  min	83	None	replace
180	[BUG]  [BUGGY]  if  (lvalInt!=  rval)  {  If  (lvalInt  ==  rval)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  rval)  {  If  (lvalInt  ==  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  rval)  {  If  (lvalInt  ==  rval)  {	  if    (lvalInt!=    rval)    {    If    (lvalInt!=    rval)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
181	[BUG]  [BUGGY]  if  (lvalInt  ==  rval)  {  If  (lvalInt!=  rval)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  rval)  {  If  (lvalInt!=  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  rval)  {  If  (lvalInt!=  rval)  {	  if    (lvalInt!=    rval)    {    If    (lvalInt!=    rval)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
182	[BUG]  [BUGGY]  if(lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if(lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if(lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    lvalInt)    {    If    (lvalInt    ==    lvalInt)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
183	[BUG]  [BUGGY]  if  (lvalInt!=  left)  {  If  (lvalInt  ==  lvalInt)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left)  {  If  (lvalInt  ==  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left)  {  If  (lvalInt  ==  lvalInt)  {	  if    (lvalInt    ==    lvalInt)    {    If    (lvalInt    ==    lvalInt)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
184	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  lvalInt  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(lvalInt,  lvalInt  +  1);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(lvalInt,  lvalInt  +  1);	  n    =    Math.min(lvalInt,    lvalInt);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
185	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  <  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  <  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  <  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
186	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BY_0)  {  [CE]  cannot  find  symbol  MAX_BY_0  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_BY_0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BY_0)  {	  if    (lvalInt!=    MAX_BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0	44	None	replace
187	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BY_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_NUMBER_ERROR  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_BY_NUMBER_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BY_NUMBER_ERROR)  {	  if    (lvalInt!=    MAX_BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_NUMBER_ERROR	44	None	replace
188	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BITWISE_OPERAND  ||  lvalInt!=  MAX_BITWISE_OPERAND)  {  [CE]  cannot  find  symbol  MAX_BITWISE_OPERAND  [FE]          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_BITWISE_OPERAND  ||  lvalInt!=  MAX_BITWISE_OPERAND)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BITWISE_OPERAND  ||  lvalInt!=  MAX_BITWISE_OPERAND)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BITWISE_OPERAND	19	None	replace
189	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BOUNDS_ERROR  ||  lvalInt!=  MAX_BOUNDS_ERROR)  {  [CE]  cannot  find  symbol  MAX_BOUNDS_ERROR  [FE]            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_BOUNDS_ERROR  ||  lvalInt!=  MAX_BOUNDS_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BOUNDS_ERROR  ||  lvalInt!=  MAX_BOUNDS_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BOUNDS_ERROR	19	None	replace
190	[BUG]  [BUGGY]  if  (lvalInt!=  INDEX_OUT_OF_RANGE  ||  lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE  [FE]              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  INDEX_OUT_OF_RANGE  ||  lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INDEX_OUT_OF_RANGE  ||  lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE	19	None	replace
191	[BUG]  [BUGGY]  if  (lvalInt!=  INDEX_OUT_OF_RANGE  ||  lvalInt!=  INDEX_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  INDEX_OUT_OF_RANGE  ||  lvalInt!=  INDEX_OUT_OF_RANGE)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INDEX_OUT_OF_RANGE  ||  lvalInt!=  INDEX_OUT_OF_RANGE)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE	19	None	replace
192	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  left.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
194	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
195	[BUG]  [BUGGY]  if(lvalInt  ==  left)  {  if(lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if(lvalInt  ==  left)  {  if(lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if(lvalInt  ==  left)  {  if(lvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    lvalInt)    {    if    (lvalInt    >=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
196	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    If  (lvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
197	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_RANGE)  {  [CE]  cannot  find  symbol  MAX_FOLD_RANGE  [FE]        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_RANGE)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_FOLD_RANGE)  {	  if    (lvalInt    ==    MAX_BITWISE_OPERAND)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_RANGE	77	None	replace
198	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_OPERAND)  {  [CE]  cannot  find  symbol  MAX_FOLD_OPERAND  [FE]          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_OPERAND)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_FOLD_OPERAND)  {	  if    (lvalInt    ==    MAX_BITWISE_OPERAND)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_OPERAND	77	None	replace
199	[BUG]  [BUGGY]  if  (lvalInt!=  INDEX_BY_0_ERROR)  {  [CE]  cannot  find  symbol  INDEX_BY_0_ERROR  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  INDEX_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INDEX_BY_0_ERROR)  {	  if    (lvalInt!=    INDEX_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  INDEX_BY_0_ERROR	69	None	replace
200	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_ERROR  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_ERROR)  {	  if    (lvalInt!=    INDEX_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_ERROR	69	None	replace
201	[BUG]  [BUGGY]  if  (LvalInt!=  left.intValue())  {  [CE]  cannot  find  symbol  LvalInt  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (LvalInt!=  left.intValue())  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (LvalInt!=  left.intValue())  {	  if    (lvalInt!=    left.intValue())    {    	non-compiled	[CE]  cannot  find  symbol  LvalInt	28	None	replace
202	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    >=    MAX_FOLD_NUMBER)    {    If  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
203	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  MAX_FOLD_NUMBER  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(lvalInt,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(lvalInt,  MAX_FOLD_NUMBER  +  1);	  n    =    Math.min(lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
204	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BITWISE_OPERAND.length)  {  [CE]  cannot  find  symbol  MAX_BITWISE_OPERAND  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_BITWISE_OPERAND.length)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BITWISE_OPERAND.length)  {	  if    (lvalInt!=    MAX_FOLD_BOUNDS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BITWISE_OPERAND	80	None	replace
205	[BUG]  [BUGGY]  if  (LvalInt!=  left.length)  {  [CE]  cannot  find  symbol  LvalInt  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (LvalInt!=  left.length)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (LvalInt!=  left.length)  {	  if    (lvalInt!=    left.length)    {    	non-compiled	[CE]  cannot  find  symbol  LvalInt	27	None	replace
206	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_GETELEM_INDEX_ERROR)  {  [CE]  cannot  find  symbol  MAX_GETELEM_INDEX_ERROR  [FE]              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_GETELEM_INDEX_ERROR)  {	  if    (lvalInt!=    BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_GETELEM_INDEX_ERROR	82	None	replace
207	[BUG]  [BUGGY]  if  (lvalInt!=  INDEX_BITWISE_OPERAND_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  INDEX_BITWISE_OPERAND_OUT_OF_RANGE  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  INDEX_BITWISE_OPERAND_OUT_OF_RANGE)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INDEX_BITWISE_OPERAND_OUT_OF_RANGE)  {	  if    (lvalInt!=    MAX_BITWISE_OPERAND_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  INDEX_BITWISE_OPERAND_OUT_OF_RANGE	45	None	replace
208	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    If  (lvalInt!=  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
209	[BUG]  [BUGGY]  lvalInt  =(char)lvalInt;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  lvalInt  =(char)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	lvalInt  =(char)lvalInt;	  lvalInt    =(int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
210	[BUG]  [BUGGY]  Math.min(lvalInt,  MAX_FOLD_NUMBER));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  MAX_FOLD_NUMBER));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  MAX_FOLD_NUMBER));	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  ';'  expected	32	None	replace
211	[BUG]  [BUGGY]  Math.min(lvalInt,  left));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  left));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  left));	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  ';'  expected	32	None	replace
212	[BUG]  [BUGGY]  Math.min(lvalInt,  lvalInt)-  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  lvalInt)-  1);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  lvalInt)-  1);	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  not  a  statement	32	None	replace
213	[BUG]  [BUGGY]  Math.min(lvalInt,  left.length()  -  lvalInt)+  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  left.length()  -  lvalInt)+  1);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  left.length()  -  lvalInt)+  1);	  Math.min(lvalInt,    left.length()    -    lvalInt));    	non-compiled	[CE]  not  a  statement	73	None	replace
214	[BUG]  [BUGGY]  Math.min(lvalInt,  left.length()  -  lvalInt)-1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  left.length()  -  lvalInt)-1);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  left.length()  -  lvalInt)-1);	  Math.min(lvalInt,    left.length()    -    lvalInt));    	non-compiled	[CE]  not  a  statement	73	None	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  >=  rval)  {	  if    (lvalInt!=    rval)    {    if    (lvalInt    >=    rval)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
216	[BUG]  [BUGGY]  if  (lvalInt  >=  rval)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  rval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  rval)  {	  if    (lvalInt!=    rval)    {    if    (lvalInt    >=    rval)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
217	[BUG]  [BUGGY]  double  left  =(double)lvalInt;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  double  left  =(double)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	double  left  =(double)lvalInt;	  int    left    =(int)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
218	[BUG]  [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  &&  left  <=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  &&  left  <=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR  &&  left  <=  MAX_FOLD_NUMBER_ERROR)  {	  if    (lvalInt!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	42	None	replace
219	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_BY_0)  {  [CE]  cannot  find  symbol  MAX_FOLD_BY_0  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_BY_0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_BY_0)  {	  if    (lvalInt!=    MAX_FOLD_BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_BY_0	81	None	replace
220	[BUG]  [BUGGY]  if  (lvalInt!=  BY_0)  {  [CE]  cannot  find  symbol  BY_0  [FE]              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  BY_0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  BY_0)  {	  if    (lvalInt!=    BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  BY_0	82	None	replace
221	[BUG]  [BUGGY]  Math.min(lvalInt,  left.length()  -  lvalInt),  MAX_FOLD_NUMBER);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  left.length()  -  lvalInt),  MAX_FOLD_NUMBER);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  left.length()  -  lvalInt),  MAX_FOLD_NUMBER);	  Math.min(lvalInt,    left.length()    -    lvalInt));    	non-compiled	[CE]  ';'  expected	73	None	replace
222	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    If  (lvalInt  >=  MAX_FOLD_NUMBER  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
223	[BUG]  [BUGGY]  if  ((  lvalInt  >>  rval)&&(lvalInt!=  rval))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  ((  lvalInt  >>  rval)&&(lvalInt!=  rval))  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  ((  lvalInt  >>  rval)&&(lvalInt!=  rval))  {	  if    (lvalInt!=    rval)    {    if    (lvalInt    >>    rval)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	39	None	replace
224	[BUG]  [BUGGY]  if  ((  lvalInt  >>  rval)||(lvalInt!=  rval))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  ((  lvalInt  >>  rval)||(lvalInt!=  rval))  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  ((  lvalInt  >>  rval)||(lvalInt!=  rval))  {	  if    (lvalInt!=    rval)    {    if    (lvalInt    >>    rval)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	39	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt  >=  32)  {	  if    (lvalInt    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
226	[BUG]  [BUGGY]  if  (lvalInt  >=  32)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  >=  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  >=  32)  {	  if    (lvalInt    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
227	[BUG]  [BUGGY]  Math.min(MAX_FOLD_NUMBER,  lvalInt));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(MAX_FOLD_NUMBER,  lvalInt));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(MAX_FOLD_NUMBER,  lvalInt));	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  ';'  expected	32	None	replace
228	[BUG]  [BUGGY]  Math.min(lvalInt,  lvalInt)-  1;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  lvalInt)-  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  lvalInt)-  1;	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  not  a  statement	32	None	replace
229	[BUG]  [BUGGY]  Math.min(lvalInt,  lvalInt)/  2);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Math.min(lvalInt,  lvalInt)/  2);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Math.min(lvalInt,  lvalInt)/  2);	  Math.min(lvalInt,    lvalInt));    	non-compiled	[CE]  not  a  statement	32	None	replace
230	[BUG]  [BUGGY]  If  (lvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt!=  rvalInt)  {	  if    (lvalInt!=    lvalInt)    {    If    (lvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
231	[BUG]  [BUGGY]  If  (lvalInt!=  lvalInt)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt!=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt!=  lvalInt)  {	  if    (lvalInt!=    lvalInt)    {    If    (lvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
232	[BUG]  [BUGGY]  if  (LvalInt!=  left)  {  [CE]  cannot  find  symbol  LvalInt  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (LvalInt!=  left)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (LvalInt!=  left)  {	  if    (left!=    lvalInt)    {    	non-compiled	[CE]  cannot  find  symbol  LvalInt	74	None	replace
233	[BUG]  [BUGGY]  if  (lvalInt!=  left.length())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left.length())  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.length())  {	  if    (lvalInt!=    left.length)    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
234	[BUG]  [BUGGY]  if  (lvalInt!=  right.intValue)  {  [CE]  cannot  find  symbol  intValue  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  right.intValue)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  right.intValue)  {	  if    (lvalInt!=    right)    {    	non-compiled	[CE]  cannot  find  symbol  intValue	75	None	replace
235	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  lvalInt)-  1;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  n  =  Math.min(lvalInt,  lvalInt)-  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	n  =  Math.min(lvalInt,  lvalInt)-  1;	  n    =    Math.min(lvalInt,    lvalInt);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
236	[BUG]  [BUGGY]  if  (lvalInt!=  NEGATING_A_NON_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  NEGATING_A_NON_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  NEGATING_A_NON_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER_ERROR)  {	  if    (lvalInt!=    NEGATING_A_NON_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	43	None	replace
237	[BUG]  [BUGGY]  if  (lvalInt!=  NEGATING_A_NON_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  NEGATING_A_NON_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  NEGATING_A_NON_NUMBER_ERROR  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    NEGATING_A_NON_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	43	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  &&  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt!=  MAX_FOLD_NUMBER  &&  lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	18	2	replace
239	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  &&  lvalInt!=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  &&  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_NUMBER  &&  lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt!=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	18	2	replace
240	[BUG]  [BUGGY]  Node  left  =  n.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Node  left  =  n.removeFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  n.removeFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
241	[BUG]  [BUGGY]  if  (lvalInt!=  bvalInt)  {  [CE]  cannot  find  symbol  bvalInt  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  bvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  bvalInt)  {	  if    (lvalInt!=    MAX_BITWISE_OPERAND_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  bvalInt	45	None	replace
242	[BUG]  [BUGGY]  if  (lvalInt  ==  left.intValue())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  left.intValue())  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  left.intValue())  {	  if    (lvalInt    ==    left)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
243	[BUG]  [BUGGY]  if  (lvalInt  ==  left.intValue)  {  [CE]  cannot  find  symbol  intValue  [FE]            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  left.intValue)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  left.intValue)  {	  if    (lvalInt    ==    left)    {    	non-compiled	[CE]  cannot  find  symbol  intValue	21	None	replace
244	[BUG]  [BUGGY]  double  rvalInt  =  (double)(lvalInt  <  <  1)?  MAX_FOLD_NUMBER  :  lvalInt;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  double  rvalInt  =  (double)(lvalInt  <  <  1)?  MAX_FOLD_NUMBER  :  lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	double  rvalInt  =  (double)(lvalInt  <  <  1)?  MAX_FOLD_NUMBER  :  lvalInt;	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
245	[BUG]  [BUGGY]  double  rvalInt  =  (double)(lvalInt  <  <  32)?  MAX_FOLD_NUMBER  :  lvalInt;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  double  rvalInt  =  (double)(lvalInt  <  <  32)?  MAX_FOLD_NUMBER  :  lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	double  rvalInt  =  (double)(lvalInt  <  <  32)?  MAX_FOLD_NUMBER  :  lvalInt;	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
246	[BUG]  [BUGGY]  if  (lvalInt  ==  rvalInt)  {  [CE]  cannot  find  symbol  rvalInt  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  rvalInt)  {	  if    (lvalInt    ==    rval)    {    	non-compiled	[CE]  cannot  find  symbol  rvalInt	47	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  &&  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt!=  MAX_FOLD_NUMBER  &&  lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
248	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  &&  lvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  &&  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_NUMBER  &&  lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER    ||    lvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
249	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BOUNDS_ERROR)  {  [CE]  cannot  find  symbol  MAX_BOUNDS_ERROR  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_BOUNDS_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BOUNDS_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_BOUNDS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BOUNDS_ERROR	80	None	replace
250	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_BOUNDS_ERROR  ||  lvalInt!=  MAX_FOLD_BOUNDS_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_BOUNDS_ERROR  [FE]          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_BOUNDS_ERROR  ||  lvalInt!=  MAX_FOLD_BOUNDS_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_BOUNDS_ERROR  ||  lvalInt!=  MAX_FOLD_BOUNDS_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_BOUNDS_ERROR	19	None	replace
251	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_BY_0_ERROR  ||  lvalInt!=  MAX_FOLD_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_BY_0_ERROR  [FE]            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_BY_0_ERROR  ||  lvalInt!=  MAX_FOLD_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_FOLD_BY_0_ERROR  ||  lvalInt!=  MAX_FOLD_BY_0_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR    ||    lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_BY_0_ERROR	19	None	replace
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  31)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	if  (lvalInt!=  31)  {	  if    (lvalInt!=    32)    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
253	[BUG]  [BUGGY]  if  (lvalInt!=  31)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  31)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  31)  {	  if    (lvalInt!=    32)    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
254	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	Node  left  =  n.getFirstChild().getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
255	[BUG]  [BUGGY]  if  (lvalInt!=  left.intValue()  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  left.intValue()  ||  lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  left.intValue()  ||  lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (lvalInt!=    left.intValue())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
256	[BUG]  [BUGGY]  If  (lvalInt  ==  lvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt  ==  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt  ==  lvalInt)  {	  if    (lvalInt    ==    lvalInt)    {    If    (lvalInt    ==    lvalInt)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
257	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_BOUNDS_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_BOUNDS_ERROR  [FE]        AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_BOUNDS_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_FOLD_BOUNDS_ERROR)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_BOUNDS_ERROR	20	None	replace
258	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_BY_0_ERROR  [FE]          AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt  ==  MAX_FOLD_BY_0_ERROR)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_BY_0_ERROR	20	None	replace
259	[BUG]  [BUGGY]  If  (lvalInt!=  32)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  If  (lvalInt!=  32)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	If  (lvalInt!=  32)  {	  if    (lvalInt!=    0)    {    If    (lvalInt!=    0)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
260	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BY_0_ERROR  ||  lvalInt  >=  MAX_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_0_ERROR  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;      [BUGGY]  if  (lvalInt!=  MAX_BY_0_ERROR  ||  lvalInt  >=  MAX_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	if  (lvalInt!=  MAX_BY_0_ERROR  ||  lvalInt  >=  MAX_BY_0_ERROR)  {	  if    (lvalInt!=    MAX_BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0_ERROR	44	None	replace
