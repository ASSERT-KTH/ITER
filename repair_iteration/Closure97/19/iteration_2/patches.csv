bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
2	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
4	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
6	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
8	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
10	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
12	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
13	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
14	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
15	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  newNumber);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  ';'  expected	120	None	replace
16	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  left.replaceChild(newNumber,  newNumber);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  left.replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  left.replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  ';'  expected	120	None	replace
17	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [CE]  void  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  right);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	120	None	replace
18	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  right).replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(n,  right).replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  right).replaceChild(left,  newNumber);	  NodeUtil.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
19	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);	  NodeUtil.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
20	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  left).replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(n,  left).replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  left).replaceChild(left,  newNumber);	  NodeUtil.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
21	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber),  right,  newNumber);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber),  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  newNumber),  right,  newNumber);	  NodeUtil.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	122	None	replace
22	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(n,  newNumber);	  NodeUtil.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
23	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	47	None	replace
24	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
25	[BUG]  [BUGGY]  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
26	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
27	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
29	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
30	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
31	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
32	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
33	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
34	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
35	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
36	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
37	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
38	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
39	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
40	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n  =  left.getFirstChild();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	145	None	replace
41	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	145	None	replace
42	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	145	None	replace
43	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right);  Node  n  =  left.getFirstChild();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	145	None	replace
44	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  right);  Node  n  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  right);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  right);  Node  n  =  left.getFirstChild();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	145	None	replace
45	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
46	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
47	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
48	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
49	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
50	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
52	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
54	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
55	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
56	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
57	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
58	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  newNumber  +  1);	  n.getParent().replaceChild(n,    left,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	67	None	replace
59	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  right  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber,  right  +  1);	  n.getParent().replaceChild(n,    left,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	67	None	replace
60	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  result  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  result  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber,  result  +  1);	  n.getParent().replaceChild(n,    left,    newNumber    +    1);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	67	None	replace
61	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber,  right);	  n.getParent().replaceChild(n,    left,    newNumber    +    1);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	67	None	replace
62	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber,  newNumber  +  1);	  n.getParent().replaceChild(n,    left,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	67	None	replace
63	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	101	2	replace
64	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	101	2	replace
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	101	2	replace
66	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	101	2	replace
67	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	101	None	replace
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	101	2	replace
69	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	101	2	replace
70	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right).replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right).replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	175	None	replace
71	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left).replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left).replaceChild(newNumber,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	175	None	replace
72	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  newNumber).replaceChild(right,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	175	None	replace
73	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	175	None	replace
74	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left).replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left).replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	175	None	replace
75	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  left,  newNumber,  newNumber);	  n.getNext().replaceChild(left,    newNumber,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	136	None	replace
76	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,  left,  newNumber);	  n.getNext().replaceChild(left,    newNumber,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	136	None	replace
77	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  right,  newNumber);	  n.getNext().replaceChild(left,    newNumber,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	136	None	replace
78	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  left);	  n.getNext().replaceChild(left,    newNumber,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	136	None	replace
79	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  lvalInt  >>  >  rvalInt;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
80	[BUG]  [BUGGY]  result  =  newNumber  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  >>  >  MAX_FOLD_NUMBER;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  >>  >  MAX_FOLD_NUMBER;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  result  =  newNumber!=  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber!=  >  MAX_FOLD_NUMBER;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber!=  >  MAX_FOLD_NUMBER;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
82	[BUG]  [BUGGY]  result  =  lvalInt!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  lvalInt!=  >  rvalInt;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  lvalInt!=  >  rvalInt;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
83	[BUG]  [BUGGY]  result  =  newNumber  >>  >  lvalInt;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  >>  >  lvalInt;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  >>  >  lvalInt;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
84	[BUG]  [BUGGY]  result  =  newNumber!=  >  lvalInt;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber!=  >  lvalInt;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber!=  >  lvalInt;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	49	2	replace
86	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	49	2	replace
87	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	49	None	replace
88	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	49	2	replace
89	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	49	2	replace
90	[BUG]  [BUGGY]  newNumber.setLength(newNumber.length());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setLength(newNumber.length());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setLength(newNumber.length());	          newNumber.setLength(0);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
91	[BUG]  [BUGGY]  newNumber.setLength(result.length());  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setLength(result.length());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setLength(result.length());	          newNumber.setLength(0);    	non-compiled	[CE]  double  cannot  be  dereferenced	163	None	replace
92	[BUG]  [BUGGY]  newNumber.setLength(newNumber.length()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setLength(newNumber.length()  -  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setLength(newNumber.length()  -  1);	          newNumber.setLength(0);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
93	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  right,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    right,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
94	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  right,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    right,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
95	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right,  newNumber,  left);	  n.getParent().replaceChild(n,    newNumber,    right,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
96	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  left,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  left,  right,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    right,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
97	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  left,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(newNumber,  left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  left,  right);	  n.getParent().replaceChild(n,    newNumber,    right,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
98	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  lvalInt  >>  >  rvalInt;  break;	          result    =    newNumber    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
99	[BUG]  [BUGGY]  result  =  newNumber  >>  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  >>  >  MAX_FOLD_NUMBER;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  >>  >  MAX_FOLD_NUMBER;  break;	          result    =    newNumber    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
100	[BUG]  [BUGGY]  result  =  newNumber  >>  >  lvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  >>  >  lvalInt;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  >>  >  lvalInt;  break;	          result    =    newNumber    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
101	[BUG]  [BUGGY]  result  =  newNumber!=  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber!=  >  MAX_FOLD_NUMBER;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber!=  >  MAX_FOLD_NUMBER;  break;	          result    =    newNumber    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
102	[BUG]  [BUGGY]  result  =  lvalInt!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  lvalInt!=  >  rvalInt;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  lvalInt!=  >  rvalInt;  break;	          result    =    newNumber    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
103	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  left.replaceChild(right,  newNumber);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  left.replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  left.replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  ';'  expected	146	None	replace
104	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	146	None	replace
105	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	146	None	replace
106	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  left,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
107	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
108	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
109	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
110	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
111	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
113	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
115	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
116	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	143	2	add
117	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	143	2	add
118	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
119	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
120	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
121	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
122	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(newNumber.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(newNumber.getString());    newNumber.setString(newNumber.getString());	  	compilable	  [FE]  RuntimeException  	115	2	add
123	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(newNumber.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(newNumber.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    newNumber.setString(newNumber.getString());	  	compilable	  [FE]  RuntimeException  	115	2	add
124	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  Node  newNumber  =  Node.newNumber(newNumber.getString());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  Node  newNumber  =  Node.newNumber(newNumber.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    Node  newNumber  =  Node.newNumber(newNumber.getString());	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	115	None	add
125	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(n.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(newNumber.getString());    newNumber.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	115	2	add
126	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(n.getString());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(n.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    newNumber.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	115	2	add
127	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  Node  newNumber.setString(newNumber.getString());  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  Node  newNumber.setString(newNumber.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    Node  newNumber.setString(newNumber.getString());	  	non-compiled	[CE]  ';'  expected	115	None	add
128	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  n.setString(newNumber.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(newNumber.getString());    n.setString(newNumber.getString());	  	compilable	  [FE]  RuntimeException  	115	2	add
129	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  n.setString(newNumber.getString());  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  n.setString(newNumber.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    n.setString(newNumber.getString());	  	compilable	  [FE]  RuntimeException  	115	2	add
130	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  node.setString(newNumber.getString());  [CE]  cannot  find  symbol  node  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  node.setString(newNumber.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    node.setString(newNumber.getString());	  	non-compiled	[CE]  cannot  find  symbol  node	115	None	add
131	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  Node  newNumber  =  Node.newNumber(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    Node  newNumber  =  Node.newNumber(result);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	115	None	add
132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
133	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
135	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
137	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	35	2	add
139	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	35	2	add
140	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	35	2	add
141	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	35	2	add
142	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
143	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
144	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	35	2	add
145	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	35	2	add
146	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  n,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  n,  newNumber);	  n.getParent().replaceChild(n,    right,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	12	None	replace
147	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  right,  newNumber);	  n.getParent().replaceChild(n,    right,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	12	None	replace
148	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,    newNumber);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	165	None	replace
149	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,    newNumber);    break;    	non-compiled	[CE]  cannot  find  symbol  node	165	None	replace
150	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
151	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
152	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
153	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
154	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
155	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
156	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
157	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
158	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
159	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
160	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
161	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
163	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
164	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getFirst().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
165	[BUG]  [BUGGY]  NodeUtil.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getFirst().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
166	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getFirst().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	128	None	replace
167	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getFirst().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
168	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(n);	  	compilable	  [FE]  RuntimeException  	61	2	add
169	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(n);	  	compilable	  [FE]  RuntimeException  	61	2	add
170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
171	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
172	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
173	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
174	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToBack(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
175	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToBack(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToBack(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
176	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getNext().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    Node  newNumber  =  Node.newNumber(lvalInt);  n.getNext().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	61	None	add
177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().removeChild(newNumber);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(n);	  	compilable	  [FE]  RuntimeException  	61	2	add
178	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().removeChild(newNumber);  n.getNext().removeChild(n);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().removeChild(newNumber);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(n);	  	compilable	  [FE]  RuntimeException  	61	2	add
179	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getPrevious().removeChild(n);  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(n,  newNumber);  n.getPrevious().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(n,  newNumber);  n.getPrevious().removeChild(n);	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
180	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  left,  newNumber,  right);	  n.getNext().replaceChild(n,    left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	137	None	replace
181	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  left,  newNumber,  result);	  n.getNext().replaceChild(n,    left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	137	None	replace
182	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  right,  newNumber);	  n.getNext().replaceChild(n,    left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	137	None	replace
183	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getLastChild().replaceChild(n,    newNumber);    newNumber.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	81	2	add
184	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,    newNumber);    newNumber.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	81	2	add
185	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  Node  newNumber.getLastChild().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  Node  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,    newNumber);    Node  newNumber.getLastChild().replaceChild(n,  newNumber);	  	non-compiled	[CE]  ';'  expected	81	None	add
186	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  node.getLastChild().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  node.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,    newNumber);    node.getLastChild().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	81	None	add
187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	81	2	add
188	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	81	2	add
189	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getLastChild().replaceChild(n,    newNumber);    newNumber.getFirstChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	81	2	add
190	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getFirstChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,    newNumber);    newNumber.getFirstChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	81	2	add
191	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getLastChild().replaceChild(n,    newNumber);    newNumber.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	81	2	add
192	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,    newNumber);    newNumber.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	81	2	add
193	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	81	None	add
194	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(right);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	98	2	replace
195	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(right);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	98	2	replace
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	98	2	replace
197	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	98	2	replace
198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	98	2	replace
199	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	98	2	replace
200	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    left);    	non-compiled	[CE]  void  cannot  be  dereferenced	119	None	replace
201	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  right).replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  right).replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    left);    	non-compiled	[CE]  void  cannot  be  dereferenced	119	None	replace
202	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  result);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  result);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    node);    	non-compiled	[CE]  void  cannot  be  dereferenced	174	None	replace
203	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	4	2	add
204	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	4	2	add
205	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  Node  newNumber.addChildToBack(newNumber);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  Node  newNumber.addChildToBack(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    Node  newNumber.addChildToBack(newNumber);	  	non-compiled	[CE]  ';'  expected	4	None	add
206	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(n);	  	compilable	  [FE]  RuntimeException  	4	2	add
207	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(n);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(n);	  	compilable	  [FE]  RuntimeException  	4	2	add
208	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  n.addChildToBack(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	                newNumber.addChildToBack(newNumber);    n.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	4	2	add
209	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  n.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  n.addChildToBack(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    n.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	4	2	add
210	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  node.addChildToBack(newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  node.addChildToBack(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    node.addChildToBack(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	4	None	add
211	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(result);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(result);	  	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	4	None	add
212	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  Node  newNumber  =  Node.newNumber(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    Node  newNumber  =  Node.newNumber(result);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	4	None	add
213	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
214	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
215	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
216	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
217	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
218	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
219	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  Node  newNumber  =  Node.newNumber(lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  Node  newNumber  =  Node.newNumber(lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    Node  newNumber  =  Node.newNumber(lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	46	None	add
220	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
221	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	46	2	add
223	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(n);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	46	2	add
224	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  n);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(n,  n);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
225	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  n);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  n);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(n,  n);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
226	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    right,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	153	None	replace
227	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right,  newNumber,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    right,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	153	None	replace
228	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  n,  newNumber,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  n,  newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  n,  newNumber,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    right,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	153	None	replace
229	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n  =  left.getNext();	  n.getNext().replaceChild(left,    newNumber);    Node    n    =    left.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	26	None	replace
230	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  Node  n  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);  Node  n  =  left.getNext();	  n.getNext().replaceChild(left,    newNumber);    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	26	None	replace
231	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  Node  n  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  Node  n  =  left.getNext();	  n.getNext().replaceChild(left,    newNumber);    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	26	None	replace
232	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	33	2	add
233	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	33	2	add
234	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	33	2	add
235	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	33	2	add
236	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	33	2	add
237	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	33	2	add
238	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	33	2	add
239	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	33	2	add
240	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	33	2	add
241	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	33	2	add
242	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	33	2	add
243	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	33	2	add
244	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	33	2	add
245	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	33	2	add
246	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(n,  left);	  newNumber.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	78	2	replace
247	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,  left);	  newNumber.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	78	2	replace
248	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(left,  newNumber);	  newNumber.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	78	2	replace
249	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(left,  newNumber);	  newNumber.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	78	2	replace
250	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(n,  right);	  newNumber.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	78	2	replace
251	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,  right);	  newNumber.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	78	2	replace
252	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left,  newNumber);	  newNumber.getParent().replaceChild(n,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	76	None	replace
253	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
254	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
255	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	97	2	add
256	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	97	2	add
257	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	97	2	add
258	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	97	2	add
259	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
260	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
261	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	97	2	add
262	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	97	2	add
263	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
264	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().removeChild(left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
265	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
266	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
267	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber,  result);	  n.getParent().replaceChild(left,    newNumber,    result);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
268	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  right,  result);	  n.getParent().replaceChild(left,    newNumber,    result);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
269	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  left,  result);	  n.getParent().replaceChild(left,    newNumber,    result);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
270	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  result,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  result,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  result,  right);	  n.getParent().replaceChild(left,    newNumber,    result);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
271	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getLastChild().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	124	2	replace
272	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	124	2	replace
273	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber,  right);	  newNumber.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	124	None	replace
274	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	144	2	replace
275	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	144	2	replace
276	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	28	2	replace
277	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	28	2	replace
278	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	28	2	replace
279	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	28	2	replace
280	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  node	28	None	replace
281	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	28	2	replace
282	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	28	2	replace
283	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
284	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
285	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
286	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
287	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
288	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
289	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToBack(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
290	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToBack(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToBack(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
291	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getPrevious().removeChild(newNumber);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getPrevious().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getPrevious().removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol	59	None	add
292	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToFront(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
293	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToFront(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToFront(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
294	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
295	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
296	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  break;	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	169	None	replace
297	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  left,  newNumber);	  n.getParent().replaceChild(left,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	93	None	replace
298	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  left,  right);	  n.getParent().replaceChild(left,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	93	None	replace
299	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  ';'  expected	44	None	replace
300	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  ';'  expected	44	None	replace
301	[BUG]  [BUGGY]  Node  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  newNumber.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  ';'  expected	44	None	replace
302	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	44	2	replace
303	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	44	2	replace
304	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber,  this);	  n.getParent().replaceChild(left,    newNumber,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
305	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  right,  this);	  n.getParent().replaceChild(left,    newNumber,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
306	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right,  newNumber,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  right,  newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  right,  newNumber,  this);	  n.getParent().replaceChild(left,    newNumber,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
307	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right,  newNumber,  this);	  n.getParent().replaceChild(left,    newNumber,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
308	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  left,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(newNumber,  left,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  left,  this);	  n.getParent().replaceChild(left,    newNumber,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  left);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber,  left);	  NodeTraversal.traverse(compiler,    newNumber,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	114	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  n,  left,  newNumber);	  NodeTraversal.traverse(compiler,    newNumber,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	114	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  newNumber);	  NodeTraversal.traverse(compiler,    newNumber,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	114	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNumber,  left);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  node,  newNumber,  left);	  NodeTraversal.traverse(compiler,    newNumber,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	114	None	replace
313	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(n.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(n.getString());	  newNumber.setString(node.getString());    	compilable	  [FE]  RuntimeException  	156	2	replace
314	[BUG]  [BUGGY]  newNumber.setString(n.getString());  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(n.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(n.getString());	  newNumber.setString(node.getString());    	compilable	  [FE]  RuntimeException  	156	2	replace
315	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(right.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(right.getString());	  newNumber.setString(node.getString());    	compilable	  [FE]  RuntimeException  	156	2	replace
316	[BUG]  [BUGGY]  newNumber.setString(right.getString());  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(right.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(right.getString());	  newNumber.setString(node.getString());    	compilable	  [FE]  RuntimeException  	156	2	replace
317	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(left.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(left.getString());	  newNumber.setString(node.getString());    	compilable	  [FE]  RuntimeException  	156	2	replace
318	[BUG]  [BUGGY]  newNumber.setString(left.getString());  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(left.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(left.getString());	  newNumber.setString(node.getString());    	compilable	  [FE]  RuntimeException  	156	2	replace
319	[BUG]  [BUGGY]  newNumber.setString(result.getString());  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(result.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(result.getString());	  newNumber.setString(node.getString());    	non-compiled	[CE]  double  cannot  be  dereferenced	156	None	replace
320	[BUG]  [BUGGY]  newNumber.setString(lval.getString());  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(lval.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(lval.getString());	  newNumber.setString(node.getString());    	non-compiled	[CE]  double  cannot  be  dereferenced	156	None	replace
321	[BUG]  [BUGGY]  n.getParent().replaceChild(right,  newNumber,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(right,  newNumber,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(right,  newNumber,  left,  newNumber);	  n.getParent().replaceChild(right,    newNumber,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
322	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
323	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	50	2	add
325	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	50	2	add
326	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
327	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
328	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  Node  newNumber  =  Node.newNumber(lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  Node  newNumber  =  Node.newNumber(lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    Node  newNumber  =  Node.newNumber(lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	50	None	add
329	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	50	2	add
330	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().removeChild(n);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	50	2	add
331	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
332	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
333	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	50	2	add
334	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(n);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	50	2	add
335	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    left);    newNumber.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	75	2	add
336	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    newNumber.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	75	2	add
337	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    left);    newNumber.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	75	2	add
338	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    newNumber.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	75	2	add
339	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  node.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  node.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    node.getParent().removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	75	None	add
340	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    left);    newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	75	2	add
341	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	75	2	add
342	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  left  =  newNumber.getParent();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  left  =  newNumber.getParent();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    Node  left  =  newNumber.getParent();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	75	None	add
343	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  left  =  node.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  left  =  node.getLastChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    Node  left  =  node.getLastChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	75	None	add
344	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left);  n.getParent().removeChild(left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left);  n.getParent().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  left);  n.getParent().removeChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
345	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right);  n.getParent().removeChild(left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right);  n.getParent().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  right);  n.getParent().removeChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
346	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	103	None	replace
347	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber);  n.getParent().removeChild(left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber);  n.getParent().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber);  n.getParent().removeChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
348	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	166	2	add
349	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	166	2	add
350	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	166	2	add
351	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	166	2	add
352	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	166	2	add
353	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	166	2	add
354	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	166	2	add
355	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	166	2	add
356	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().removeChild(newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	166	2	add
357	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().removeChild(newNumber);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().removeChild(newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().removeChild(newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	166	2	add
358	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber);    	non-compiled	[CE]  ';'  expected	118	None	replace
359	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	118	None	replace
360	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	118	None	replace
361	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(newNumber,    left);    n.getNext().replaceChild(newNumber,  left);	  	compilable	  [FE]  RuntimeException  	73	2	add
362	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(newNumber,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    n.getNext().replaceChild(newNumber,  left);	  	compilable	  [FE]  RuntimeException  	73	2	add
363	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(newNumber,    left);    n.getNext().replaceChild(newNumber,  right);	  	compilable	  [FE]  RuntimeException  	73	2	add
364	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(newNumber,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    n.getNext().replaceChild(newNumber,  right);	  	compilable	  [FE]  RuntimeException  	73	2	add
365	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(newNumber,    left);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	73	2	add
366	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	73	2	add
367	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(newNumber,    left);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	73	2	add
368	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	73	2	add
369	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(newNumber,    left);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	73	2	add
370	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	73	2	add
371	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	73	None	add
372	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getFirst().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getFirst().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    n.getFirst().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	73	None	add
373	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
374	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
375	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,  left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
376	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,  right,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
377	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  cannot  find  symbol  node	83	None	replace
378	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(n);	  newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	158	2	replace
379	[BUG]  [BUGGY]  newNumber.removeChild(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(n);	  newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	158	2	replace
380	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber.getLastChild());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(newNumber.getLastChild());	  newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	158	2	replace
381	[BUG]  [BUGGY]  newNumber.removeChild(newNumber.getLastChild());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber.getLastChild());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber.getLastChild());	  newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	158	2	replace
382	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.replaceChild(n,  newNumber);	  newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	158	2	replace
383	[BUG]  [BUGGY]  newNumber.replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.replaceChild(n,  newNumber);	  newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	158	2	replace
384	[BUG]  [BUGGY]  Node  n.getNext().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    Node    n.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  ';'  expected	164	None	replace
385	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    Node    n.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  ';'  expected	164	None	replace
386	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    Node    n.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	164	None	replace
387	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(newNumber);    newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	157	2	add
388	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	157	2	add
389	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  Node  newNumber.removeChild(newNumber);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  Node  newNumber.removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    Node  newNumber.removeChild(newNumber);	  	non-compiled	[CE]  ';'  expected	157	None	add
390	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  node.removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  node.removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    node.removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	157	None	add
391	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	157	2	add
392	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	157	2	add
393	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  Node  newNumber  =  Node.newNumber(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    Node  newNumber  =  Node.newNumber(result);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	157	None	add
394	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  Node  newNumber  =  Node.newNumber(n.getType());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  Node  newNumber  =  Node.newNumber(n.getType());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    Node  newNumber  =  Node.newNumber(n.getType());	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	157	None	add
395	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(newNumber);    newNumber.removeChild(n);	  	compilable	  [FE]  RuntimeException  	157	2	add
396	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(n);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    newNumber.removeChild(n);	  	compilable	  [FE]  RuntimeException  	157	2	add
397	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	141	None	replace
398	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  newNumber);  node.getParent().removeChild(newNumber);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node.getParent().replaceChild(n,  newNumber);  node.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node.getParent().replaceChild(n,  newNumber);  node.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().removeChild(newNumber);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	141	None	replace
399	[BUG]  [BUGGY]  node.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	141	None	replace
400	[BUG]  [BUGGY]  Node  n.getParent().removeChild(left);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n.getParent().removeChild(left);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	177	None	replace
401	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(left);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(left);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	177	None	replace
402	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(left);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(left);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	177	None	replace
403	[BUG]  [BUGGY]  Node  n.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n.getParent().removeChild(newNumber);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	177	None	replace
404	[BUG]  [BUGGY]  Node  n  =  left.getParent().removeChild(newNumber);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n  =  left.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n  =  left.getParent().removeChild(newNumber);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	177	None	replace
405	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
406	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
407	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
408	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
409	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	160	2	add
410	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	160	2	add
411	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
412	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
413	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(old);  [CE]  cannot  find  symbol  old  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(old);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(old);	  	non-compiled	[CE]  cannot  find  symbol  old	160	None	add
414	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
415	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
416	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().replaceChild(n,    left);    	non-compiled	[CE]  ';'  expected	176	None	replace
417	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(n,  right);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().replaceChild(n,    left);    	non-compiled	[CE]  ';'  expected	176	None	replace
418	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  left);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  left);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().replaceChild(n,    left);    	non-compiled	[CE]  ';'  expected	176	None	replace
419	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  Node  n.getParent().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  Node  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right);  Node  n.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().replaceChild(n,    left);    	non-compiled	[CE]  ';'  expected	176	None	replace
420	[BUG]  [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n  =  n.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().replaceChild(n,    left);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	176	None	replace
421	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  right);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().replaceChild(n,    left);    	non-compiled	[CE]  ';'  expected	176	None	replace
422	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
423	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
424	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getPrevious().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	132	None	add
425	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
426	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
427	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
428	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
429	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
430	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
431	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
432	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
433	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	152	2	replace
434	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	152	2	replace
435	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,  left);  n.getParent().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	152	2	replace
436	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  left);  n.getParent().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	152	2	replace
437	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
438	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
439	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
440	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
441	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
442	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
443	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
444	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
445	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
446	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
447	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
448	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
449	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(left);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
450	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(left);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
451	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(right);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
452	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().removeChild(right);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
453	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(right);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
454	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(right);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
455	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(right);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
456	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(right);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber,  this);	          NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	127	None	replace
458	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  right);	          NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	127	None	replace
459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  negNum);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  negNum);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  this,  negNum);	          NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	127	None	replace
460	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  result);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  result);	          NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	127	None	replace
461	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  n);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  this,  n);	          NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	127	None	replace
462	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  node.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  node.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	140	None	replace
463	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  newNumber);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	140	None	replace
464	[BUG]  [BUGGY]  Node  node.getParent().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  node.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  ';'  expected	140	None	replace
465	[BUG]  [BUGGY]  Node  node  =  node.getParent().replaceChild(n,  newNumber);  [CE]  incompatible  types  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  node  =  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  node  =  node.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  incompatible  types	140	None	replace
466	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getFirstChild().replaceChild(n,  newNumber);	  n.getFirstChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	89	2	replace
467	[BUG]  [BUGGY]  newNumber.getFirstChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getFirstChild().replaceChild(n,  newNumber);	  n.getFirstChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	89	2	replace
468	[BUG]  [BUGGY]  node.getFirstChild().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getFirstChild().replaceChild(n,  newNumber);	  n.getFirstChild().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	89	None	replace
469	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,    newNumber);    	compilable	  [FE]  RuntimeException  	133	2	replace
470	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,    newNumber);    	compilable	  [FE]  RuntimeException  	133	2	replace
471	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,    newNumber);    	compilable	  [FE]  RuntimeException  	133	2	replace
472	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,    newNumber);    	compilable	  [FE]  RuntimeException  	133	2	replace
473	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	133	None	replace
474	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  node.getNext().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  node.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);  node.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	133	None	replace
475	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right).replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right).replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(n,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	19	None	replace
476	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left).replaceChild(right,  newNumber);	  n.getParent().replaceChild(n,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	19	None	replace
477	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
478	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
479	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
480	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
481	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
482	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
483	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
484	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
485	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().removeChild(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
486	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().removeChild(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
487	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
488	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
489	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getFirstChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getFirstChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
490	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getFirstChild().removeChild(newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getFirstChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getFirstChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
491	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(n,  right);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(n,  right);	  n.getParent().replaceChild(left,    newNumber).replaceChild(n,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	18	None	replace
492	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(n,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber).replaceChild(n,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(n,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	18	None	replace
493	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  right).replaceChild(n,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(n,    newNumber);    	non-compiled	[CE]  ';'  expected	18	None	replace
494	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getNext();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
495	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  Node  n  =  left.getNext();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	39	None	replace
496	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right);  Node  n  =  left.getNext();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	39	None	replace
497	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  right);  Node  n  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]                        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  right);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  right);  Node  n  =  left.getNext();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
498	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(newNumber,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(newNumber,  right);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
499	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	                newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	8	2	add
500	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	8	2	add
501	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  Node  newNumber.addChildToFront(newNumber);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  Node  newNumber.addChildToFront(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    Node  newNumber.addChildToFront(newNumber);	  	non-compiled	[CE]  ';'  expected	8	None	add
502	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  node.addChildToFront(newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  node.addChildToFront(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    node.addChildToFront(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	8	None	add
503	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	                newNumber.addChildToFront(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	8	2	add
504	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	8	2	add
505	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(resultDouble);  [CE]  cannot  find  symbol  resultDouble  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(resultDouble);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(resultDouble);	  	non-compiled	[CE]  cannot  find  symbol  resultDouble	8	None	add
506	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  Node  newNumber  =  Node.newNumber(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    Node  newNumber  =  Node.newNumber(result);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
507	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	                newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(n);	  	compilable	  [FE]  RuntimeException  	8	2	add
508	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(n);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(n);	  	compilable	  [FE]  RuntimeException  	8	2	add
509	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(newNumber,  right);	  n.getNext().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	74	2	replace
510	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,  right);	  n.getNext().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	74	2	replace
511	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	74	2	replace
512	[BUG]  [BUGGY]  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	74	2	replace
513	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(newNumber,  newNumber);	  n.getNext().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	74	2	replace
514	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,  newNumber);	  n.getNext().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	74	2	replace
515	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(n);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(n);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().removeChild(n);    	non-compiled	[CE]  ';'  expected	52	None	replace
516	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().removeChild(n);  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().removeChild(n);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().removeChild(n);    	non-compiled	[CE]  ';'  expected	52	None	replace
517	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().removeChild(n);    	non-compiled	[CE]  ';'  expected	52	None	replace
518	[BUG]  [BUGGY]  Node  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().removeChild(n);    	non-compiled	[CE]  ';'  expected	52	None	replace
519	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
520	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
521	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
522	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
523	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
524	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
525	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
526	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
527	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
528	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
529	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
530	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
531	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
532	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
533	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
534	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
535	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
536	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
537	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
538	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
539	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
540	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
541	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
542	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
543	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
544	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
545	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	42	None	add
546	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  lvalInt);  newNumber.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	42	None	add
547	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
548	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
549	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
550	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
551	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(result);  newNumber.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	42	None	add
552	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	37	2	add
553	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	37	2	add
554	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	37	2	add
555	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	37	2	add
556	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	37	2	add
557	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	37	2	add
558	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	37	2	add
559	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	37	2	add
560	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	37	2	add
561	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	37	2	add
562	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	37	2	add
563	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	37	2	add
564	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	37	2	add
565	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	37	2	add
566	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(right,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	106	2	add
567	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(right,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	106	2	add
568	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(right,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	106	2	add
569	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(right,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	106	2	add
570	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(right,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	106	2	add
571	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(right,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	106	2	add
572	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(right,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	106	2	add
573	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(right,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	106	2	add
574	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    right);    	compilable	  [FE]  RuntimeException  	34	2	replace
575	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    right);    	compilable	  [FE]  RuntimeException  	34	2	replace
576	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    right);    	non-compiled	[CE]  cannot  find  symbol  node	34	None	replace
577	[BUG]  [BUGGY]  newNumber.getName().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getName().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getName().replaceChild(left,  newNumber);	  n.getName().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
578	[BUG]  [BUGGY]  n.getName().replaceChild(left,  newNumber,  right);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getName().replaceChild(left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getName().replaceChild(left,  newNumber,  right);	  n.getName().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
579	[BUG]  [BUGGY]  n.getName().replaceChild(left,  newNumber,  result);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getName().replaceChild(left,  newNumber,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getName().replaceChild(left,  newNumber,  result);	  n.getName().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
580	[BUG]  [BUGGY]  n.getName().replaceChild(left,  newNumber,  left);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getName().replaceChild(left,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getName().replaceChild(left,  newNumber,  left);	  n.getName().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
581	[BUG]  [BUGGY]  node.getName().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getName().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getName().replaceChild(left,  newNumber);	  n.getName().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	112	None	replace
582	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	54	2	replace
583	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	54	2	replace
584	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	54	None	replace
585	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	77	2	add
586	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	77	2	add
587	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber.getNext().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    Node  newNumber.getNext().replaceChild(n,  newNumber);	  	non-compiled	[CE]  ';'  expected	77	None	add
588	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	77	2	add
589	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	77	2	add
590	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  node.getNext().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  node.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    node.getNext().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	77	None	add
591	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(result);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	77	None	add
592	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	77	None	add
593	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(n);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(n);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	77	None	add
594	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  left,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(newNumber,  left,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  left,  right,  newNumber);	  n.getParent().replaceChild(newNumber,    left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	13	None	replace
595	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  left,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(newNumber,  left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  left,  newNumber,  right);	  n.getParent().replaceChild(newNumber,    left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	13	None	replace
596	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	149	2	replace
597	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	149	2	replace
598	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	22	None	replace
599	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	113	None	replace
600	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  this,  left);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  this,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  newNumber,  this,  left);	  NodeTraversal.traverse(compiler,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	113	None	replace
601	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  this);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  right,  this);	  NodeTraversal.traverse(compiler,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	113	None	replace
602	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  this);	  NodeTraversal.traverse(compiler,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	113	None	replace
603	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left).replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left).replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    right).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	16	None	replace
604	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber).replaceChild(left,  right);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber).replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber).replaceChild(left,  right);	  n.getParent().replaceChild(n,    right).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	16	None	replace
605	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  n).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  n).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  n).replaceChild(right,  newNumber);	  n.getParent().replaceChild(n,    right).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	16	None	replace
606	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  right).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  right).replaceChild(right,  newNumber);	  n.getParent().replaceChild(n,    right).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	16	None	replace
607	[BUG]  [BUGGY]  n.getParent().replaceChild(right,  newNumber,  left,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(right,  newNumber,  left,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(right,  newNumber,  left,  result);	  n.getParent().replaceChild(right,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	138	None	replace
608	[BUG]  [BUGGY]  n.getParent().replaceChild(right,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(right,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(right,  left,  newNumber);	  n.getParent().replaceChild(right,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	138	None	replace
609	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber,  left);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToFront(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.addChildToFront(newNumber,  left);	          newNumber.addChildToFront(newNumber);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
610	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToFront(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.addChildToFront(n);	          newNumber.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
611	[BUG]  [BUGGY]  newNumber.addChildToFront(n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToFront(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.addChildToFront(n);	          newNumber.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
612	[BUG]  [BUGGY]  newNumber.addChildToFront(result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToFront(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.addChildToFront(result);	          newNumber.addChildToFront(newNumber);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
613	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getLastChild().replaceChild(left,  newNumber);	  n.getLastChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	85	2	replace
614	[BUG]  [BUGGY]  n.getLastChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(left,  newNumber);	  n.getLastChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	85	2	replace
615	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,  newNumber,  left);	  n.getLastChild().replaceChild(n,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	85	None	replace
616	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    right);    newNumber.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	79	2	add
617	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    newNumber.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	79	2	add
618	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  newNumber.getParent().replaceChild(n,  right);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  newNumber.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    Node  newNumber.getParent().replaceChild(n,  right);	  	non-compiled	[CE]  ';'  expected	79	None	add
619	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  right  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    Node  right  =  left.getNext();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	79	None	add
620	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    right);    newNumber.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	79	2	add
621	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    newNumber.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	79	2	add
622	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  node.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  node.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    node.getParent().removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	79	None	add
623	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  right  =  newNumber.getParent();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  right  =  newNumber.getParent();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    Node  right  =  newNumber.getParent();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	79	None	add
624	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  right  =  node.getLastChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  right  =  node.getLastChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    Node  right  =  node.getLastChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	79	None	add
625	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getFirst().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
626	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getFirst().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
627	[BUG]  [BUGGY]  Node.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getFirst().replaceChild(n,    newNumber);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	147	None	replace
628	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  node.getFirst().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  node.getFirst().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  node.getFirst().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getFirst().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	147	None	replace
629	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	109	2	add
630	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	109	2	add
631	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(left,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	109	2	add
632	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	109	2	add
633	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  Node  n.getFirstChild().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  Node  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,    newNumber);    Node  n.getFirstChild().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	109	None	add
634	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,    newNumber);    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
635	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	109	2	add
636	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	109	2	add
637	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,    newNumber);    n.getLastChild().removeChild(left,  newNumber);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	109	None	add
638	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(n);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);    	compilable	  [FE]  RuntimeException  	51	2	replace
639	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().removeChild(n);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);    	compilable	  [FE]  RuntimeException  	51	2	replace
640	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  node	51	None	replace
641	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
642	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
643	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  node.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  node.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  node.getPrevious().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	57	None	replace
644	[BUG]  [BUGGY]  NodeUtil.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
645	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  newNumber  +  1);	  n.getNext().replaceChild(left,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	72	None	replace
646	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  right  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  right  +  1);	  n.getNext().replaceChild(left,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	72	None	replace
647	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  left  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  left  +  1);	  n.getNext().replaceChild(left,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	72	None	replace
648	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  result  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  result  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  result  +  1);	  n.getNext().replaceChild(left,    newNumber    +    1);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	72	None	replace
649	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  right,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  right,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  right,  newNumber  +  1);	  n.getNext().replaceChild(left,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	72	None	replace
650	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	117	None	replace
651	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  lval);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  lval);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  lval);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	117	None	replace
652	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  n);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  n);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	117	None	replace
653	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  rvalInt);  [CE]  cannot  find  symbol  compiler  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  rvalInt);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  rvalInt);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	117	None	replace
654	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  negNum);  [CE]  cannot  find  symbol  compiler  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  negNum);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  negNum);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	117	None	replace
655	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
656	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
657	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(n,    newNumber);    n.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
658	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    n.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
659	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  Node  n.getFirstChild().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  Node  n.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    Node  n.getFirstChild().replaceChild(n,  newNumber);	  	non-compiled	[CE]  ';'  expected	88	None	add
660	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	88	None	add
661	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(n,    newNumber);    n.getLastChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
662	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    n.getLastChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
663	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(n,    newNumber);    n.getFirstChild().removeChild(n);	  	compilable	  [FE]  RuntimeException  	88	2	add
664	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(n);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    n.getFirstChild().removeChild(n);	  	compilable	  [FE]  RuntimeException  	88	2	add
665	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(n,    newNumber);    n.getFirstChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
666	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    n.getFirstChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
667	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  left);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  left);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	159	None	replace
668	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  left);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  newNumber,  left);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	159	None	replace
669	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  newNumber,  right);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	159	None	replace
670	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  node,  newNumber);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	159	None	replace
671	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	30	2	replace
672	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	30	2	replace
673	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	30	2	replace
674	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	30	2	replace
675	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  right  +  1);	  n.getParent().replaceChild(left,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	134	None	replace
676	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  left  +  1);	  n.getParent().replaceChild(left,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	134	None	replace
677	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  result  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  result  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  result  +  1);	  n.getParent().replaceChild(left,    newNumber    +    1);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	134	None	replace
678	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    right);    n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	170	2	add
679	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	170	2	add
680	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    right);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	170	2	add
681	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	170	2	add
682	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    right);    n.getNext().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	170	2	add
683	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    n.getNext().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	170	2	add
684	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  newNumber.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    right);    newNumber.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	170	2	add
685	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  newNumber.getNext().replaceChild(n,  right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  newNumber.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    newNumber.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	170	2	add
686	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  Node  n.getNext().replaceChild(n,  right);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  Node  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    Node  n.getNext().replaceChild(n,  right);	  	non-compiled	[CE]  ';'  expected	170	None	add
687	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    right);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	170	2	add
688	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	170	2	add
689	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	170	None	add
690	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getLastChild().replaceChild(n,  left);	  newNumber.getLastChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	82	2	replace
691	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,  left);	  newNumber.getLastChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	82	2	replace
692	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getLastChild().replaceChild(newNumber,  left);	  newNumber.getLastChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	82	2	replace
693	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(newNumber,  left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(newNumber,  left);	  newNumber.getLastChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	82	2	replace
694	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,  newNumber,  left);	  newNumber.getLastChild().replaceChild(n,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	82	None	replace
695	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
696	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
697	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
698	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
699	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
700	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
701	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
702	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
703	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	31	2	add
704	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	31	2	add
705	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
706	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
707	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	99	None	replace
708	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	99	None	replace
709	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	99	None	replace
710	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	99	None	replace
711	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(right,  newNumber);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	99	None	replace
712	[BUG]  [BUGGY]  newNumber.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getPrevious().replaceChild(n,  newNumber);	  n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
713	[BUG]  [BUGGY]  node.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getPrevious().replaceChild(n,  newNumber);	  n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	90	None	replace
714	[BUG]  [BUGGY]  n.getPrevious().replaceChild(newNumber,  left);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getPrevious().replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getPrevious().replaceChild(newNumber,  left);	  n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
715	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.replaceChild(n,  newNumber);	  n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
716	[BUG]  [BUGGY]  n.getPrevious().replaceChild(n,  newNumber,  left);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getPrevious().replaceChild(n,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getPrevious().replaceChild(n,  newNumber,  left);	  n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
717	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,    newNumber);    	compilable	  [FE]  RuntimeException  	107	2	replace
718	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,    newNumber);    	compilable	  [FE]  RuntimeException  	107	2	replace
719	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	107	None	replace
720	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	107	None	replace
721	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	107	None	replace
722	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
723	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  node.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  node.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);  node.getPrevious().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	24	None	replace
724	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
725	[BUG]  [BUGGY]  NodeUtil.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
726	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  right);	  n.getParent().replaceChild(newNumber,    right,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
727	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
728	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
729	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
730	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
731	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
732	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
733	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
734	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
735	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
736	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
737	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
738	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
739	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber),  newNumber.replaceChild(right,  newNumber);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber),  newNumber.replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber),  newNumber.replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  ';'  expected	108	None	replace
740	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(left,  newNumber).replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	108	None	replace
741	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber),  left.replaceChild(right,  newNumber);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber),  left.replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber),  left.replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  ';'  expected	108	None	replace
742	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,  left).replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	108	None	replace
743	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  left).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(newNumber,  left).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  left).replaceChild(right,  newNumber);	  n.getParent().replaceChild(newNumber,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	17	None	replace
744	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  right).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(newNumber,  right).replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  right).replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(newNumber,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	17	None	replace
745	[BUG]  [BUGGY]  Node  oldNumber  =  n.getParent().replaceChild(newNumber,  left).replaceChild(newNumber,  right);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  oldNumber  =  n.getParent().replaceChild(newNumber,  left).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  oldNumber  =  n.getParent().replaceChild(newNumber,  left).replaceChild(newNumber,  right);	  n.getParent().replaceChild(newNumber,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	17	None	replace
746	[BUG]  [BUGGY]  Node  oldNumber  =  n.getParent().replaceChild(newNumber,  left).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  oldNumber  =  n.getParent().replaceChild(newNumber,  left).replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  oldNumber  =  n.getParent().replaceChild(newNumber,  left).replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(newNumber,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	17	None	replace
747	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  right,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  right,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  right,  result);	  n.getNext().replaceChild(left,    newNumber,    right);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	70	None	replace
748	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  left,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  left,  right);	  n.getNext().replaceChild(left,    newNumber,    right);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	70	None	replace
749	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  node.getNext().removeChild(left);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  node.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  node.getNext().removeChild(left);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  node	167	None	replace
750	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  result,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  result,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  result,  right);	  n.getNext().replaceChild(left,    newNumber,    result);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	71	None	replace
751	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  left,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  left,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  left,  result);	  n.getNext().replaceChild(left,    newNumber,    result);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	71	None	replace
752	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  result,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  result,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  result,  left);	  n.getNext().replaceChild(left,    newNumber,    result);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	71	None	replace
753	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right  +  1);	  n.getParent().replaceChild(n,    left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	135	None	replace
754	[BUG]  [BUGGY]  Node  left  =  n.getParent().replaceChild(n,  newNumber  +  1);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  left  =  n.getParent().replaceChild(n,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  left  =  n.getParent().replaceChild(n,  newNumber  +  1);	  n.getParent().replaceChild(n,    left    +    1);    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	135	None	replace
755	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
756	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
757	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getLastChild().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
758	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
759	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getLastChild().replaceChild(n,    newNumber);    newNumber.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
760	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    newNumber.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
761	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getLastChild().replaceChild(n,    newNumber);    n.getFirstChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
762	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    n.getFirstChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
763	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
764	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
765	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	84	None	add
766	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().removeChild(n);	  	compilable	  [FE]  RuntimeException  	84	2	add
767	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(n);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().removeChild(n);	  	compilable	  [FE]  RuntimeException  	84	2	add
768	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  node.getNext().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  newNumber);  node.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  newNumber);  node.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	56	None	replace
769	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  left,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber,    left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	68	None	replace
770	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(newNumber,  left  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  left  +  1);	  n.getParent().replaceChild(n,    newNumber,    left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	68	None	replace
771	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  Node  n  =  left.getNext();	  n.getParent().replaceChild(left,    newNumber);    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	102	None	replace
772	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  break;  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  break;	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    break;    	non-compiled	[CE]  cannot  find  symbol  node	162	None	replace
773	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  newNumber);  break;	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	162	None	replace
774	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    break;    	non-compiled	[CE]  cannot  find  symbol  node	162	None	replace
775	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber,  result  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber,  result  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right,  newNumber,  result  +  1);	  n.getParent().replaceChild(n,    newNumber,    result    +    1);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	66	None	replace
776	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  result,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber,  result,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  result,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber,    result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	66	None	replace
777	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left,  result  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left,  result  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  left,  result  +  1);	  n.getParent().replaceChild(n,    newNumber,    result    +    1);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	66	None	replace
778	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  right,  result  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber,  right,  result  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  right,  result  +  1);	  n.getParent().replaceChild(n,    newNumber,    result    +    1);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	66	None	replace
779	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  result,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  result,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  result,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber,    result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	66	None	replace
780	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
781	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
782	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
783	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
784	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
785	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
786	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
787	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
788	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
789	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
790	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
791	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	60	2	replace
792	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	60	2	replace
793	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	60	None	replace
794	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	60	2	replace
795	[BUG]  [BUGGY]  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	60	2	replace
796	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToBack(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.addChildToBack(n);	          newNumber.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	5	2	replace
797	[BUG]  [BUGGY]  newNumber.addChildToBack(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToBack(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.addChildToBack(n);	          newNumber.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	5	2	replace
798	[BUG]  [BUGGY]  newNumber.addChildToBack(newNumber,  left);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToBack(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.addChildToBack(newNumber,  left);	          newNumber.addChildToBack(newNumber);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
799	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToBack(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.addChildToBack(right);	          newNumber.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	5	2	replace
800	[BUG]  [BUGGY]  newNumber.addChildToBack(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToBack(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.addChildToBack(right);	          newNumber.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	5	2	replace
801	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString()  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(newNumber.getString()  +  1);	  newNumber.setString(newNumber.getString());    	compilable	  [FE]  RuntimeException  	116	2	replace
802	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString()  +  1);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString()  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString()  +  1);	  newNumber.setString(newNumber.getString());    	compilable	  [FE]  RuntimeException  	116	2	replace
803	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString(),  result);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString(),  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString(),  result);	  newNumber.setString(newNumber.getString());    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	116	None	replace
804	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	29	2	add
805	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	29	2	add
806	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	29	2	add
807	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	29	2	add
808	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	29	2	add
809	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	29	2	add
810	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	29	2	add
811	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	29	2	add
812	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	29	2	add
813	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	29	2	add
814	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	29	2	add
815	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	29	2	add
816	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	29	2	add
817	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	29	2	add
818	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getFirstChild().replaceChild(left,  newNumber);	  n.getFirstChild().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	110	2	replace
819	[BUG]  [BUGGY]  newNumber.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getFirstChild().replaceChild(left,  newNumber);	  n.getFirstChild().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	110	2	replace
820	[BUG]  [BUGGY]  node.getFirstChild().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getFirstChild().replaceChild(left,  newNumber);	  n.getFirstChild().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	110	None	replace
821	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,  newNumber,  right);	  n.getFirstChild().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	110	None	replace
822	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,  newNumber,  result);	  n.getFirstChild().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	110	None	replace
823	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	139	None	replace
824	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  newNumber.getParent().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right);  Node  newNumber.getParent().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	139	None	replace
825	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  newNumber  =  Node.newNumber(right);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	139	None	replace
826	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(right,  newNumber);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(right,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	139	None	replace
827	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().removeChild(newNumber);    	non-compiled	[CE]  ';'  expected	45	None	replace
828	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  newNumber.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  Node  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right);  Node  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().removeChild(newNumber);    	non-compiled	[CE]  ';'  expected	45	None	replace
829	[BUG]  [BUGGY]  Node  newNumber.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().removeChild(newNumber);    	non-compiled	[CE]  ';'  expected	45	None	replace
830	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(right);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(right);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	104	None	replace
831	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(right);  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(right);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	104	None	replace
832	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(right);  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(right);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	104	None	replace
833	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  n.getParent().removeChild(newNumber);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	104	None	replace
834	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(left,  right);	  newNumber.getParent().replaceChild(n,    right);    	compilable	  [FE]  RuntimeException  	80	2	replace
835	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  right);	  newNumber.getParent().replaceChild(n,    right);    	compilable	  [FE]  RuntimeException  	80	2	replace
836	[BUG]  [BUGGY]  newNumber.getType().replaceChild(n,  left);  [CE]  int  cannot  be  dereferenced  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getType().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getType().replaceChild(n,  left);	  newNumber.getParent().replaceChild(n,    right);    	non-compiled	[CE]  int  cannot  be  dereferenced	80	None	replace
837	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
838	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
839	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  Node  newNumber.getParent().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  Node  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    Node  newNumber.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	123	None	add
840	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
841	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
842	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  Node  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  Node  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    Node  newNumber.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  ';'  expected	123	None	add
843	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  Node  newNumber.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  Node  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    Node  newNumber.getParent().removeChild(newNumber);	  	non-compiled	[CE]  ';'  expected	123	None	add
844	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	123	2	add
845	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(left);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	123	2	add
846	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  node.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  node.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    node.getParent().removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	123	None	add
847	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(newNumber,    left);    newNumber.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	125	2	add
848	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,    left);    newNumber.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	125	2	add
849	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(newNumber,    left);    newNumber.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	125	2	add
850	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,    left);    newNumber.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	125	2	add
851	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(newNumber,    left);    newNumber.getParent().replaceChild(newNumber,  left);	  	compilable	  [FE]  RuntimeException  	125	2	add
852	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(newNumber,  left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,    left);    newNumber.getParent().replaceChild(newNumber,  left);	  	compilable	  [FE]  RuntimeException  	125	2	add
853	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(newNumber,    left);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	125	2	add
854	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,    left);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	125	2	add
855	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  node.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  node.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,    left);    node.getParent().removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	125	None	add
856	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(newNumber,    left);    newNumber.getParent().replaceChild(newNumber,  right);	  	compilable	  [FE]  RuntimeException  	125	2	add
857	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(newNumber,  right);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  newNumber.getParent().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,    left);    newNumber.getParent().replaceChild(newNumber,  right);	  	compilable	  [FE]  RuntimeException  	125	2	add
858	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  node.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,    left);    node.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	125	None	add
859	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
860	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
861	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	27	2	add
862	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	27	2	add
863	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	27	2	add
864	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	27	2	add
865	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	27	2	add
866	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	27	2	add
867	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(right,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(right,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
868	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(right,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(right,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(right,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
869	[BUG]  [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  lvalInt  ==  >  rvalInt;  break;	          result    =    newNumber    ==    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
870	[BUG]  [BUGGY]  result  =  newNumber  ==  >  lvalInt;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  ==  >  lvalInt;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  ==  >  lvalInt;  break;	          result    =    newNumber    ==    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
871	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber));  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber));  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber));	  n.getNext().replaceChild(left,    newNumber));    	non-compiled	[CE]  ';'  expected	111	None	replace
872	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(right,  newNumber));  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(right,  newNumber));  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber).replaceChild(right,  newNumber));	  n.getNext().replaceChild(left,    newNumber));    	non-compiled	[CE]  ';'  expected	111	None	replace
873	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber  +  1));  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber  +  1));  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber  +  1));	  n.getNext().replaceChild(left,    newNumber));    	non-compiled	[CE]  ';'  expected	111	None	replace
874	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(n,  newNumber));  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(n,  newNumber));  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber).replaceChild(n,  newNumber));	  n.getNext().replaceChild(left,    newNumber));    	non-compiled	[CE]  ';'  expected	111	None	replace
875	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(right,  this);  [CE]  void  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(right,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(right,  this);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    this);    	non-compiled	[CE]  void  cannot  be  dereferenced	172	None	replace
876	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  this);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  this);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    this);    	non-compiled	[CE]  ';'  expected	172	None	replace
877	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  this);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  this);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    this);    	non-compiled	[CE]  void  cannot  be  dereferenced	172	None	replace
878	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  break;	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,    newNumber);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	168	None	replace
879	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  break;	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,    newNumber);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	168	None	replace
880	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(left,  newNumber);  break;  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(left,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(left,  newNumber);  break;	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,    newNumber);    break;    	non-compiled	[CE]  cannot  find  symbol  node	168	None	replace
881	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();	  n.getNext().replaceChild(n,    newNumber);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	150	None	replace
882	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  right);  Node  n  =  left.getFirstChild();	  n.getNext().replaceChild(n,    newNumber);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	150	None	replace
883	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  newNumber,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  newNumber,  newNumber  +  1);	  n.getNext().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	69	None	replace
884	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber,  result  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  newNumber,  result  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  newNumber,  result  +  1);	  n.getNext().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	69	None	replace
885	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,  newNumber  +  1);	  n.getNext().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	69	None	replace
886	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();	  n.getParent().replaceChild(left,    newNumber);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	105	None	replace
887	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);	  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	38	2	replace
888	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);	  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	38	2	replace
889	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	43	2	replace
890	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	43	2	replace
891	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	43	2	replace
892	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	43	2	replace
893	[BUG]  [BUGGY]  Node  n.getNext().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n.getNext().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    Node    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	23	None	replace
894	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(right,  newNumber);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    Node    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	23	None	replace
895	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(right,  newNumber);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    Node    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	23	None	replace
896	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    Node    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	23	None	replace
897	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	64	None	replace
898	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	64	2	replace
899	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	64	2	replace
900	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	64	2	replace
901	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	64	2	replace
902	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	40	2	add
903	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	40	2	add
904	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
905	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
906	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
907	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
908	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	40	2	add
909	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	40	2	add
910	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
911	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
912	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	40	2	add
913	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	40	2	add
914	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	40	2	add
915	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  right);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	40	2	add
916	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	86	2	add
917	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	86	2	add
918	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	86	2	add
919	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	86	2	add
920	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    right);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	86	2	add
921	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    right);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	86	2	add
922	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    right);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	86	2	add
923	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    right);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	86	2	add
924	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,  left);  n.getNext().removeChild(n);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);    	compilable	  [FE]  RuntimeException  	62	2	replace
925	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  left);  n.getNext().removeChild(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  left);  n.getNext().removeChild(n);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);    	compilable	  [FE]  RuntimeException  	62	2	replace
926	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  node.getNext().removeChild(n);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  node.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  node.getNext().removeChild(n);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  node	62	None	replace
927	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	41	2	replace
928	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	41	2	replace
929	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	41	2	replace
930	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	41	2	replace
931	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	41	2	replace
932	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	41	2	replace
933	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	41	2	replace
934	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(n,  left);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	41	2	replace
935	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	130	2	replace
936	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	130	2	replace
937	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(newNumber,  right);	  newNumber.getParent().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	126	2	replace
938	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,  right);	  newNumber.getParent().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	126	2	replace
939	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(newNumber,  right);	  newNumber.getParent().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	126	2	replace
940	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(newNumber,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(newNumber,  right);	  newNumber.getParent().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	126	2	replace
941	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getLastChild().replaceChild(newNumber,  right);	  newNumber.getParent().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	126	2	replace
942	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(newNumber,  right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(newNumber,  right);	  newNumber.getParent().replaceChild(newNumber,    left);    	compilable	  [FE]  RuntimeException  	126	2	replace
943	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  newNumber  =  Node.newNumber(result);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	142	None	replace
944	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  cannot  find  symbol  node	142	None	replace
945	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber  =  Node.newNumber(result);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber    =    Node.newNumber(result);    	compilable	  [FE]  AssertionFailedError  	142	2	replace
946	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber  =  Node.newNumber(result);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber    =    Node.newNumber(result);    	compilable	  [FE]  AssertionFailedError  	142	2	replace
947	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  newNumber  =  Node.newNumber(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  newNumber  =  Node.newNumber(n);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	142	None	replace
948	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  newNumber  =  Node.newNumber(lvalInt);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	142	None	replace
949	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(newNumber,  left);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(newNumber,  left);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    n);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
950	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();	  n.getNext().replaceChild(left,    newNumber);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	131	None	replace
951	[BUG]  [BUGGY]  n.getNext().removeChild(left,  newNumber,  right);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().removeChild(left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().removeChild(left,  newNumber,  right);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left,    newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	25	None	replace
952	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	25	None	replace
953	[BUG]  [BUGGY]  n.getNext().removeChild(left,  newNumber,  left);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().removeChild(left,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().removeChild(left,  newNumber,  left);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left,    newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	25	None	replace
954	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  left);  n.getNext().removeChild(left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  left);  n.getNext().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  left);  n.getNext().removeChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	25	None	replace
955	[BUG]  [BUGGY]  n.getNext().removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().removeChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left,    newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	25	None	replace
956	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
957	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	96	None	replace
958	[BUG]  [BUGGY]  n.getPrevious().replaceChild(left,  newNumber,  right);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getPrevious().replaceChild(left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getPrevious().replaceChild(left,  newNumber,  right);	  n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
959	[BUG]  [BUGGY]  n.getPrevious().replaceChild(left,  newNumber,  result);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getPrevious().replaceChild(left,  newNumber,  result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getPrevious().replaceChild(left,  newNumber,  result);	  n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
960	[BUG]  [BUGGY]  newNumber.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getPrevious().replaceChild(left,  newNumber);	  n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
961	[BUG]  [BUGGY]  n.getPrevious().replaceChild(left,  newNumber,  left);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getPrevious().replaceChild(left,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getPrevious().replaceChild(left,  newNumber,  left);	  n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
962	[BUG]  [BUGGY]  node.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getPrevious().replaceChild(left,  newNumber);	  n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	155	None	replace
963	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(left,  newNumber);	  n.getParent().replaceChild(newNumber,    left).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	173	None	replace
964	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber).replaceChild(left,  newNumber);	  n.getParent().replaceChild(newNumber,    left).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	173	None	replace
965	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToBack(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.addChildToBack(left);	          newNumber.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	5	2	replace
966	[BUG]  [BUGGY]  newNumber.addChildToBack(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToBack(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.addChildToBack(left);	          newNumber.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	5	2	replace
967	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  Node  n.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left);  Node  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left);  Node  n.getParent().removeChild(newNumber);	  n.getParent().replaceChild(n,    left);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	177	None	replace
968	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	98	2	replace
969	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	98	2	replace
970	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(right);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  node	98	None	replace
971	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	144	None	replace
972	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,  left  +  1);	  n.getNext().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	69	None	replace
973	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber,  MAX_FOLD_NUMBER_ERROR  +  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  newNumber,  MAX_FOLD_NUMBER_ERROR  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  newNumber,  MAX_FOLD_NUMBER_ERROR  +  1);	  n.getNext().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	69	None	replace
974	[BUG]  [BUGGY]  newNumber.getName().replaceChild(left,  n);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getName().replaceChild(left,  n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getName().replaceChild(left,  n);	  n.getName().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
975	[BUG]  [BUGGY]  Node.getName().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node.getName().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node.getName().replaceChild(left,  newNumber);	  n.getName().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
976	[BUG]  [BUGGY]  NodeUtil.getNameNode(left).replaceChild(newNumber);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getNameNode(left).replaceChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getNameNode(left).replaceChild(newNumber);	  n.getName().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
977	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  result,  MAX_FOLD_NUMBER);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  result,  MAX_FOLD_NUMBER);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  result,  MAX_FOLD_NUMBER);	  n.getNext().replaceChild(left,    newNumber,    result);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	71	None	replace
978	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  Node  left  =  n.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  Node  left  =  n.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,    newNumber);    Node  left  =  n.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
979	[BUG]  [BUGGY]  Node  newNumber  =  NodeUtil.newNumber(newNumber);  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  newNumber  =  NodeUtil.newNumber(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  newNumber  =  NodeUtil.newNumber(newNumber);  n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,    newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	107	None	replace
980	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  left,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(newNumber,  left,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  left,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
981	[BUG]  [BUGGY]  Node  oldNumber  =  n.getParent().replaceChild(left,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  oldNumber  =  n.getParent().replaceChild(left,  newNumber).replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  oldNumber  =  n.getParent().replaceChild(left,  newNumber).replaceChild(left,  newNumber);	  n.getParent().replaceChild(newNumber,    left).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	173	None	replace
982	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	166	2	add
983	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	166	2	add
984	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	166	2	add
985	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	166	2	add
986	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	166	2	add
987	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	166	2	add
988	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	166	2	add
989	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	166	2	add
990	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  left,  newNumber,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  left,  newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  left,  newNumber,  newNumber);	  n.getNext().replaceChild(left,    newNumber,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	136	None	replace
991	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right).replaceChild(newNumber);  [CE]  void  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  right).replaceChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  right).replaceChild(newNumber);	  n.getParent().replaceChild(n,    right).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	16	None	replace
992	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  right);  n.getNext().removeChild(left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  right);  n.getNext().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  right);  n.getNext().removeChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	25	None	replace
993	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
994	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
995	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
996	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	148	2	add
997	[BUG]  [BUGGY]  result  =  newNumber  ==  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  ==  >  MAX_FOLD_NUMBER;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  ==  >  MAX_FOLD_NUMBER;  break;	          result    =    newNumber!=    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
998	[BUG]  [BUGGY]  result  =  newNumber  >=  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  >=  >  MAX_FOLD_NUMBER;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  >=  >  MAX_FOLD_NUMBER;  break;	          result    =    newNumber!=    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
999	[BUG]  [BUGGY]  result  =  rvalInt  >>  >  newNumber;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  rvalInt  >>  >  newNumber;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  rvalInt  >>  >  newNumber;  break;	          result    =    newNumber!=    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
1000	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber));  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber));  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber));	  newNumber.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	124	None	replace
1001	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    right);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	170	2	add
1002	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	170	2	add
1003	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    right);    n.getNext().replaceChild(left,  right);	  	compilable	  [FE]  RuntimeException  	170	2	add
1004	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(left,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getNext().replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    n.getNext().replaceChild(left,  right);	  	compilable	  [FE]  RuntimeException  	170	2	add
1005	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  n.getFirst().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getFirst().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    n.getFirst().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	170	None	add
1006	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	101	None	replace
1007	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
1008	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	100	2	add
1009	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
1010	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
1011	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
1012	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
1013	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
1014	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
1015	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  left);  Node  n  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  left);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  left);  Node  n  =  left.getNext();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
1016	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	139	None	replace
1017	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  n);	  NodeUtil.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
1018	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber),  left,  newNumber);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber),  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  newNumber),  left,  newNumber);	  NodeUtil.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	122	None	replace
1019	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  parent.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  parent  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  parent.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  parent.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  parent	140	None	replace
1020	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	140	None	replace
1021	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    right);    newNumber.getParent().replaceChild(left,  right);	  	compilable	  [FE]  RuntimeException  	79	2	add
1022	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  newNumber.getParent().replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    newNumber.getParent().replaceChild(left,  right);	  	compilable	  [FE]  RuntimeException  	79	2	add
1023	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  node.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  node.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    node.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	79	None	add
1024	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  node.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    node.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	79	None	add
1025	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getFirst().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	132	None	add
1026	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
1027	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
1028	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	61	2	add
1029	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	61	2	add
1030	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
1031	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
1032	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
1033	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
1034	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  Node  n  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	61	None	add
1035	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	149	2	replace
1036	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	149	2	replace
1037	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	41	2	replace
1038	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	41	2	replace
1039	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber));  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber));  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,  newNumber));	  n.getNext().replaceChild(left,    newNumber));    	non-compiled	[CE]  ';'  expected	111	None	replace
1040	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber),  left);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber),  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber),  left);	  n.getNext().replaceChild(left,    newNumber));    	non-compiled	[CE]  ';'  expected	111	None	replace
1041	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber),  this);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber),  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber),  this);	  n.getNext().replaceChild(left,    newNumber));    	non-compiled	[CE]  ';'  expected	111	None	replace
1042	[BUG]  [BUGGY]  newNumber.getName().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getName().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getName().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1043	[BUG]  [BUGGY]  newNumber.getType().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  int  cannot  be  dereferenced  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getType().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getType().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
1044	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  left.replaceChild(newNumber,  right);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  left.replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  left.replaceChild(newNumber,  right);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  ';'  expected	120	None	replace
1045	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,  left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
1046	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().removeChild(left);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	167	2	replace
1047	[BUG]  [BUGGY]  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().removeChild(left);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	167	2	replace
1048	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  Node  left  =  n.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  Node  left  =  n.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    Node  left  =  n.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	73	None	add
1049	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  Node  rvalInt  =  left.getNext();  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  Node  rvalInt  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    Node  rvalInt  =  left.getNext();	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	73	None	add
1050	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
1051	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
1052	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
1053	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
1054	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
1055	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
1056	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	42	2	add
1057	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	42	2	add
1058	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n  =  right.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n  =  right.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber);  Node  n  =  right.getNext();	  n.getParent().replaceChild(left,    newNumber);    Node    n    =    left.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	102	None	replace
1059	[BUG]  [BUGGY]  NodeUtil.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getPrevious().replaceChild(left,  newNumber);	  n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
1060	[BUG]  [BUGGY]  Node.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node.getPrevious().replaceChild(left,  newNumber);	  n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
1061	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber,  result  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber,  result  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  left,  newNumber,  result  +  1);	  n.getParent().replaceChild(n,    newNumber,    result    +    1);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	66	None	replace
1062	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  n,  right,  newNumber);  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(parent,  n,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(parent,  n,  right,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    right,    left);    	non-compiled	[CE]  cannot  find  symbol  parent	154	None	replace
1063	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  left,  right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  left,  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  left,  right,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    right,    left);    	non-compiled	[CE]  cannot  find  symbol  node	154	None	replace
1064	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  newNumber  =  Node.newNumber(result);  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  Node  newNumber  =  Node.newNumber(result);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  cannot  find  symbol  node	142	None	replace
1065	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  left);  Node  newNumber  =  Node.newNumber(result);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  left);  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  left);  Node  newNumber  =  Node.newNumber(result);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  cannot  find  symbol  node	142	None	replace
1066	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	24	None	replace
1067	[BUG]  [BUGGY]  Node.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	24	None	replace
1068	[BUG]  [BUGGY]  NodeUtil.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
1069	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  MAX_FOLD_NUMBER);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  this,  MAX_FOLD_NUMBER);	          NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	127	None	replace
1070	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);    	compilable	  [FE]  RuntimeException  	62	2	replace
1071	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);    	compilable	  [FE]  RuntimeException  	62	2	replace
1072	[BUG]  [BUGGY]  newNumber.setString(negNumber.getString());  [CE]  cannot  find  symbol  negNumber  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(negNumber.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(negNumber.getString());	  newNumber.setString(node.getString());    	non-compiled	[CE]  cannot  find  symbol  negNumber	156	None	replace
1073	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  MAX_FOLD_NUMBER);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber,  MAX_FOLD_NUMBER);	  n.getParent().replaceChild(n,    left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	10	None	replace
1074	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1075	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1076	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1077	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1078	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  Node  rvalInt  =  Node.newNumber(lvalInt);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  Node  rvalInt  =  Node.newNumber(lvalInt);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    Node  rvalInt  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
1079	[BUG]  [BUGGY]  Node  left  =  n.getParent().replaceChild(left,  newNumber,  right);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  left  =  n.getParent().replaceChild(left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  left  =  n.getParent().replaceChild(left,  newNumber,  right);	  n.getParent().replaceChild(left,    newNumber,    left);    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	93	None	replace
1080	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n  =  right.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n  =  right.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  Node  n  =  right.getFirstChild();	  n.getParent().replaceChild(left,    newNumber);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	105	None	replace
1081	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
1082	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	95	2	add
1083	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  Node  newNumber  =  Node.newNumber(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  Node  newNumber  =  Node.newNumber(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    Node  newNumber  =  Node.newNumber(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	157	None	add
1084	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	157	None	add
1085	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    NodeTraversal.traverse(compiler,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	157	None	add
1086	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  newNumber;  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  lvalInt  >>  >  newNumber;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  lvalInt  >>  >  newNumber;  break;	          result    =    newNumber!=    >    lvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
1087	[BUG]  [BUGGY]  result  =  lvalInt!=  >  newNumber;  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  lvalInt!=  >  newNumber;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  lvalInt!=  >  newNumber;  break;	          result    =    newNumber!=    >    lvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
1088	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToFront(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.addChildToFront(left);	          newNumber.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
1089	[BUG]  [BUGGY]  newNumber.addChildToFront(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToFront(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.addChildToFront(left);	          newNumber.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
1090	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToFront(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.addChildToFront(right);	          newNumber.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
1091	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.addChildToFront(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.addChildToFront(right);	          newNumber.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
1092	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(right);	  	compilable	  [FE]  RuntimeException  	4	2	add
1093	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(right);	  	compilable	  [FE]  RuntimeException  	4	2	add
1094	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(node);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(node);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(node);	  	non-compiled	[CE]  cannot  find  symbol  node	4	None	add
1095	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(left);	  	compilable	  [FE]  RuntimeException  	4	2	add
1096	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(left);	  	compilable	  [FE]  RuntimeException  	4	2	add
1097	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
1098	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
1099	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
1100	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
1101	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getNext().replaceChild(n,  left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
1102	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getNext().replaceChild(n,  left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	35	2	add
1103	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	35	2	add
1104	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	35	2	add
1105	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  newNumber);  break;	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	162	None	replace
1106	[BUG]  [BUGGY]  NodeUtil.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getPrevious().replaceChild(n,  newNumber);	  n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1107	[BUG]  [BUGGY]  Node.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node.getPrevious().replaceChild(n,  newNumber);	  n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1108	[BUG]  [BUGGY]  Preconditions.checkState(newNumber.getPrevious()!=  n);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Preconditions.checkState(newNumber.getPrevious()!=  n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Preconditions.checkState(newNumber.getPrevious()!=  n);	  n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1109	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getFirst().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	147	None	replace
1110	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getFirst().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1111	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	54	2	replace
1112	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	54	2	replace
1113	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.toString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(newNumber.toString());	  newNumber.setString(newNumber.getString());    	compilable	  [FE]  RuntimeException  	116	2	replace
1114	[BUG]  [BUGGY]  newNumber.setString(newNumber.toString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.toString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.toString());	  newNumber.setString(newNumber.getString());    	compilable	  [FE]  RuntimeException  	116	2	replace
1115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
1116	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
1117	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  Node  rvalInt  =  left.getNext();  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  Node  rvalInt  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    Node  rvalInt  =  left.getNext();	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	151	None	add
1118	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left  +  1,  newNumber);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left  +  1,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left  +  1,  newNumber);	  n.getParent().replaceChild(n,    left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	135	None	replace
1119	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left  *  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left  *  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left  *  1);	  n.getParent().replaceChild(n,    left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	135	None	replace
1120	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
1121	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
1122	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(left);	  newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	158	2	replace
1123	[BUG]  [BUGGY]  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(left);	  newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	158	2	replace
1124	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
1125	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
1126	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
1127	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
1128	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getFirst().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
1129	[BUG]  [BUGGY]  Node  n.getNext().replaceChild(right,  newNumber);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    Node    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	23	None	replace
1130	[BUG]  [BUGGY]  Node  n  =  Node.newNumber(right);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n  =  Node.newNumber(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n  =  Node.newNumber(right);	  n.getNext().replaceChild(left,    newNumber);    Node    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	23	None	replace
1131	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(n,  left);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(n,  left);	  n.getParent().replaceChild(left,    newNumber).replaceChild(n,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	18	None	replace
1132	[BUG]  [BUGGY]  node.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  node	28	None	replace
1133	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	56	2	replace
1134	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	56	2	replace
1135	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  newNumber  =  Node.newNumber(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  newNumber  =  Node.newNumber(newNumber);	  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	56	None	replace
1136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	56	2	replace
1137	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	56	2	replace
1138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
1139	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
1140	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
1141	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
1142	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
1143	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
1144	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
1145	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
1146	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,  newNumber).replaceChild(right,  newNumber);	  n.getFirstChild().replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	110	None	replace
1147	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,  newNumber  +  1);	  n.getFirstChild().replaceChild(left,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	110	None	replace
1148	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber).replaceChild(n,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber).replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,  newNumber).replaceChild(n,  newNumber);	  n.getFirstChild().replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	110	None	replace
1149	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	33	2	add
1150	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	33	2	add
1151	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	33	2	add
1152	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	33	2	add
1153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	33	2	add
1154	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    right);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	33	2	add
1155	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
1156	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
1157	[BUG]  [BUGGY]  Node  oldNumber  =  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  oldNumber  =  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  oldNumber  =  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(newNumber,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	17	None	replace
1158	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(newNumber,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	17	None	replace
1159	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  left).replaceChild(newNumber,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(n,  left).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  left).replaceChild(newNumber,  right);	  n.getParent().replaceChild(newNumber,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
1160	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1161	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1163	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  left);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1164	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1165	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1166	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1167	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1168	[BUG]  [BUGGY]  newNumber.getName().replaceChild(n,  left);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getName().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getName().replaceChild(n,  left);	  newNumber.getParent().replaceChild(n,    right);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1169	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(right,  newNumber);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	99	None	replace
1170	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  node.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  node.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,    left);    node.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	125	None	add
1171	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  Node  left  =  node.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  Node  left  =  node.getLastChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,    left);    Node  left  =  node.getLastChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	125	None	add
1172	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  n);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  n);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    n);    	non-compiled	[CE]  ';'  expected	20	None	replace
1173	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(left);  newNumber.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(left);  newNumber.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,    newNumber);    	compilable	  [FE]  RuntimeException  	133	2	replace
1174	[BUG]  [BUGGY]  newNumber.removeChild(left);  newNumber.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(left);  newNumber.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(left);  newNumber.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,    newNumber);    	compilable	  [FE]  RuntimeException  	133	2	replace
1175	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  Node  newNumber.getLastChild().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  Node  newNumber.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,    newNumber);    Node  newNumber.getLastChild().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	81	None	add
1176	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getLastChild().replaceChild(n,    newNumber);    newNumber.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	81	2	add
1177	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  newNumber.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,    newNumber);    newNumber.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	81	2	add
1178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  newNumber);	  NodeTraversal.traverse(compiler,    newNumber,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	114	None	replace
1179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
1180	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
1181	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
1182	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
1183	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
1184	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	48	2	add
1185	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(newNumber,  left);	  n.getLastChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	85	2	replace
1186	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(newNumber,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(newNumber,  left);	  n.getLastChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	85	2	replace
1187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.removeFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.removeFirstChild().replaceChild(left,  newNumber);	  n.getLastChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	85	2	replace
1188	[BUG]  [BUGGY]  n.removeFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.removeFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.removeFirstChild().replaceChild(left,  newNumber);	  n.getLastChild().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	85	2	replace
1189	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	40	2	add
1190	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	40	2	add
1191	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(right);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(right);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	77	None	add
1192	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	77	None	add
1193	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  Node  right  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    right);    Node  right  =  left.getNext();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	86	None	add
1194	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  node.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  node.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    node.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	75	None	add
1195	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  node.getParent().replaceChild(n,  left);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  node.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    node.getParent().replaceChild(n,  left);	  	non-compiled	[CE]  cannot  find  symbol  node	75	None	add
1196	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  left  =  n.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  left  =  n.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    Node  left  =  n.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	75	None	add
1197	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  node.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    node.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	123	None	add
1198	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  node.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  node.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    node.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	123	None	add
1199	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  Node  left  =  left.getNext();  newNumber.getParent().replaceChild(left,  newNumber);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  Node  left  =  left.getNext();  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    Node  left  =  left.getNext();  newNumber.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	123	None	add
1200	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
1201	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
1202	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
1203	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  Node  left  =  left.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  Node  left  =  left.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    Node  left  =  left.getNext();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	123	None	add
1204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  node,  newNumber,  this);	  NodeTraversal.traverse(compiler,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	113	None	replace
1205	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	31	2	add
1206	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	31	2	add
1207	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	31	2	add
1208	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	31	2	add
1209	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
1210	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
1211	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
1212	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
1213	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getFirst().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getFirst().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getFirst().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
1214	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getFirst().replaceChild(left,  newNumber);  n.getLast().removeChild(right);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getFirst().replaceChild(left,  newNumber);  n.getLast().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getFirst().replaceChild(left,  newNumber);  n.getLast().removeChild(right);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
1215	[BUG]  [BUGGY]  n.getParent().removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().removeChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left,    newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
1216	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1217	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1218	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
1219	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirst().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
1220	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1221	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1222	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  MAX_FOLD_NUMBER_ERROR  +  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber,  MAX_FOLD_NUMBER_ERROR  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  MAX_FOLD_NUMBER_ERROR  +  1);	  n.getNext().replaceChild(left,    newNumber    +    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	72	None	replace
1223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
1224	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
1225	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(n,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
1226	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
1227	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  Node  n.getFirstChild().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  Node  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    Node  n.getFirstChild().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	88	None	add
1228	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(right);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(right);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	104	None	replace
1229	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(right);  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(right);	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().removeChild(left);    	non-compiled	[CE]  ';'  expected	104	None	replace
1230	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(right,  newNumber);	  n.getParent().replaceChild(newNumber,    right,    newNumber);    	compilable	  [FE]  RuntimeException  	15	2	replace
1231	[BUG]  [BUGGY]  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(right,  newNumber);	  n.getParent().replaceChild(newNumber,    right,    newNumber);    	compilable	  [FE]  RuntimeException  	15	2	replace
1232	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  left);  Node  n  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  left);  Node  n  =  left.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  left);  Node  n  =  left.getFirstChild();	  n.getParent().replaceChild(n,    left);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	145	None	replace
1233	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber));  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber));  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber));	  n.getParent().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  ';'  expected	146	None	replace
1234	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	64	2	replace
1235	[BUG]  [BUGGY]  newNumber.replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	64	2	replace
1236	[BUG]  [BUGGY]  newNumber.getType().replaceChild(n,  newNumber);  [CE]  int  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getType().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getType().replaceChild(n,  newNumber);	  newNumber.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  int  cannot  be  dereferenced	78	None	replace
1237	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
1238	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
1239	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getLastChild().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
1240	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	84	2	add
1241	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	37	2	add
1242	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	37	2	add
1243	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  Node  newNumber  =  Node.newNumber(left);  newNumber.setString(newNumber.getString());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  Node  newNumber  =  Node.newNumber(left);  newNumber.setString(newNumber.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    Node  newNumber  =  Node.newNumber(left);  newNumber.setString(newNumber.getString());	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	115	None	add
1244	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setLength(newNumber.getLength());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setLength(newNumber.getLength());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    newNumber.setLength(newNumber.getLength());	  	non-compiled	[CE]  cannot  find  symbol	115	None	add
1245	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(node.getString());  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(node.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    newNumber.setString(node.getString());	  	non-compiled	[CE]  cannot  find  symbol  node	115	None	add
1246	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,    newNumber);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	165	None	replace
1247	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(result);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(result);	  	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	8	None	add
1248	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  Node  newNumber  =  Node.newNumber(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  Node  newNumber  =  Node.newNumber(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    Node  newNumber  =  Node.newNumber(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
1249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  MAX_FOLD_NUMBER);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	117	None	replace
1250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  lvalInt);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  lvalInt);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  lvalInt);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	117	None	replace
1251	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
1252	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
1253	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
1254	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
1255	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left).replaceChild(newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left).replaceChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left).replaceChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	175	None	replace
1256	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  this,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  this,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  this,  left);	  n.getParent().replaceChild(left,    newNumber,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
1257	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  this,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  this,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  this,  right);	  n.getParent().replaceChild(left,    newNumber,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
1258	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  left);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  right).replaceChild(newNumber,  left);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    left);    	non-compiled	[CE]  ';'  expected	119	None	replace
1259	[BUG]  [BUGGY]  Node  oldNumber  =  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  oldNumber  =  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  oldNumber  =  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    left);    	non-compiled	[CE]  void  cannot  be  dereferenced	119	None	replace
1260	[BUG]  [BUGGY]  Node  left  =  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  left  =  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  left  =  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    left);    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	119	None	replace
1261	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
1262	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
1263	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	97	2	add
1264	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().removeChild(left);    n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	97	2	add
1265	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1266	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1267	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1268	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1269	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1270	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1271	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1272	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().replaceChild(left,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1273	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left).replaceChild(newNumber,  right);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left).replaceChild(newNumber,  right);	  n.getParent().replaceChild(n,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	19	None	replace
1274	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	57	None	replace
1275	[BUG]  [BUGGY]  Node.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	57	None	replace
1276	[BUG]  [BUGGY]  newNumber.getName().replaceChild(n,  right);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getName().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getName().replaceChild(n,  right);	  newNumber.getParent().replaceChild(n,    left);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
1277	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1278	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1279	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  left);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  left);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1280	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  left);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  left);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  left);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1281	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1282	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1283	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  node.getNext().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  node.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  node.getNext().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	55	None	add
1284	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1285	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1286	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  break;  [CE]  cannot  find  symbol  node  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  break;	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,    newNumber);    break;    	non-compiled	[CE]  cannot  find  symbol  node	168	None	replace
1287	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	29	2	add
1288	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	29	2	add
1289	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	152	2	replace
1290	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	152	2	replace
1291	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  left.replaceChild(newNumber);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  left.replaceChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  left.replaceChild(newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber);    	non-compiled	[CE]  ';'  expected	118	None	replace
1292	[BUG]  [BUGGY]  result  =  newNumber  ==  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  ==  >  MAX_FOLD_NUMBER;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  ==  >  MAX_FOLD_NUMBER;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
1293	[BUG]  [BUGGY]  result  =  newNumber  >=  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  >=  >  MAX_FOLD_NUMBER;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  >=  >  MAX_FOLD_NUMBER;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
1294	[BUG]  [BUGGY]  Node.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getFirst().replaceChild(left,    newNumber);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	128	None	replace
1295	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	28	2	replace
1296	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	28	2	replace
1297	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	32	2	replace
1298	[BUG]  [BUGGY]  newNumber.removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	32	2	replace
1299	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	NodeUtil.removeChild(n,  right);  n.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	32	2	replace
1300	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.removeChild(n,  right);  n.getParent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	32	2	replace
1301	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  left,  right);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  newNumber,  left,  right);	  NodeTraversal.traverse(compiler,    newNumber,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	114	None	replace
1302	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  newNumber,  left);	  n.getNext().replaceChild(left,    newNumber,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	136	None	replace
1303	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  left);  [CE]  void  cannot  be  dereferenced  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber).replaceChild(newNumber,  left);	  n.getNext().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	108	None	replace
1304	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  newNumber);  break;	  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,    newNumber);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	165	None	replace
1305	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(newNumber);    newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	157	2	add
1306	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	157	2	add
1307	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  NodeUtil.removeChild(newNumber);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  NodeUtil.removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    NodeUtil.removeChild(newNumber);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	157	None	add
1308	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(newNumber);    newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	157	2	add
1309	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(newNumber);  newNumber.removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);    newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	157	2	add
1310	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,  newNumber  +  1);	  n.getNext().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	69	None	replace
1311	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	31	2	add
1312	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	31	2	add
1313	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  Node  n.getNext().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  Node  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    Node  n.getNext().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	73	None	add
1314	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  Node  n.getNext().replaceChild(newNumber,  left);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  Node  n.getNext().replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    Node  n.getNext().replaceChild(newNumber,  left);	  	non-compiled	[CE]  ';'  expected	73	None	add
1315	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(newNumber,    left);    n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	73	2	add
1316	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(newNumber,  left);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,    left);    n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	73	2	add
1317	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  newNumber,  right);	  n.getNext().replaceChild(left,    newNumber,    right);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	70	None	replace
1318	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
1319	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
1320	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
1321	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	21	2	add
1322	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  Node  n.getLastChild().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  Node  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    Node  n.getLastChild().replaceChild(n,  newNumber);	  	non-compiled	[CE]  ';'  expected	84	None	add
1323	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().removeChild(left,  newNumber);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	84	None	add
1324	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(n,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,    newNumber);    n.getLastChild().removeChild(n,  newNumber);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	84	None	add
1325	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getPrevious().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	148	None	add
1326	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  left);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  left);	  NodeUtil.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
1327	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);	  NodeUtil.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
1328	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(left,  right);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(left,  right);	  NodeUtil.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
1329	[BUG]  [BUGGY]  newNumber.getPrevious().replaceChild(left,  n);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getPrevious().replaceChild(left,  n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getPrevious().replaceChild(left,  n);	  n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
1330	[BUG]  [BUGGY]  n.getPrevious().replaceChild(left,  newNumber,  this);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getPrevious().replaceChild(left,  newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getPrevious().replaceChild(left,  newNumber,  this);	  n.getPrevious().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
1331	[BUG]  [BUGGY]  newNumber.getString().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getString().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getString().replaceChild(n,  newNumber);	  newNumber.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
1332	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,    left);    	non-compiled	[CE]  cannot  find  symbol  node	41	None	replace
1333	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	77	2	add
1334	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	77	2	add
1335	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber.getNext().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  Node  newNumber.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    Node  newNumber.getNext().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	77	None	add
1336	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	77	2	add
1337	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	77	2	add
1338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  right);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  this,  right);	          NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	127	None	replace
1339	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1340	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1341	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1342	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1343	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1344	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	53	2	add
1345	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  newNumber  =  left.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  newNumber  =  left.getNext().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	139	None	replace
1346	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n  =  right.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n  =  right.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber);  Node  n  =  right.getFirstChild();	  n.getNext().replaceChild(left,    newNumber);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	131	None	replace
1347	[BUG]  [BUGGY]  result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;  break;  [CE]  cannot  find  symbol  Delete  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;  break;	          result    =    newNumber    >>    >    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  Delete	3	None	replace
1348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  MAX_FOLD_NUMBER);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	159	None	replace
1349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  BITWISE_OPERAND);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  BITWISE_OPERAND);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  BITWISE_OPERAND);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	159	None	replace
1350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  n);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  n);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	159	None	replace
1351	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(right);	  newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	158	2	replace
1352	[BUG]  [BUGGY]  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(right);	  newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	158	2	replace
1353	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
1354	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
1355	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
1356	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getLastChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
1357	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
1358	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
1359	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
1360	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().replaceChild(right,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	132	2	add
1361	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	166	2	add
1362	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	166	2	add
1363	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	166	2	add
1364	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	166	2	add
1365	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getPrevious().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getPrevious().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getPrevious().replaceChild(n,  newNumber);  n.getNext().removeChild(left);	  	non-compiled	[CE]  cannot  find  symbol	166	None	add
1366	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	166	2	add
1367	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(left);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	166	2	add
1368	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
1369	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
1370	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().removeChild(left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().removeChild(left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
1371	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().removeChild(left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getNext().removeChild(left);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getParent().removeChild(newNumber);    n.getNext().removeChild(left);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	151	2	add
1372	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  left,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.replaceChild(n,  left,  newNumber  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.replaceChild(n,  left,  newNumber  +  1);	  n.getParent().replaceChild(n,    left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	135	None	replace
1373	[BUG]  [BUGGY]  NodeUtil.removeChild(newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.removeChild(newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	56	None	replace
1374	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  Node  newNumber.getFirstChild().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  Node  newNumber.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,    newNumber);    Node  newNumber.getFirstChild().replaceChild(n,  newNumber);	  	non-compiled	[CE]  ';'  expected	81	None	add
1375	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1376	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1377	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1378	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1379	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1380	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getLastChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1381	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1382	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1383	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1384	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	59	2	add
1385	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  node.getParent().replaceChild(n,  right);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  right);  node.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    right);    node.getParent().replaceChild(n,  right);	  	non-compiled	[CE]  cannot  find  symbol  node	79	None	add
1386	[BUG]  [BUGGY]  NodeUtil.removeChild(newNumber);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    Node    newNumber.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	44	None	replace
1387	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  left,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    right,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	153	None	replace
1388	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	NodeUtil.removeChild(n,  right);  n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	144	2	replace
1389	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.removeChild(n,  right);  n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	144	2	replace
1390	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);    	compilable	  [FE]  RuntimeException  	62	2	replace
1391	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);    	compilable	  [FE]  RuntimeException  	62	2	replace
1392	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  this);	  n.getParent().replaceChild(left,    newNumber,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	replace
1393	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	NodeUtil.removeChild(n,  newNumber);  n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	30	2	replace
1394	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.removeChild(n,  newNumber);  n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	30	2	replace
1395	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  left,  right);	  n.getParent().replaceChild(n,    newNumber,    right,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
1396	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    node);    	non-compiled	[CE]  cannot  find  symbol  node	174	None	replace
1397	[BUG]  [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	96	None	replace
1398	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(n);	  	compilable	  [FE]  RuntimeException  	61	2	add
1399	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(n);	  	compilable	  [FE]  RuntimeException  	61	2	add
1400	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getPrevious().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getPrevious().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getPrevious().replaceChild(n,  newNumber);  n.getNext().removeChild(n);	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
1401	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(n);	  	compilable	  [FE]  RuntimeException  	61	2	add
1402	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(n);	  	compilable	  [FE]  RuntimeException  	61	2	add
1403	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
1404	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getFirstChild().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
1405	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
1406	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().removeChild(n);    n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	61	2	add
1407	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
1408	[BUG]  [BUGGY]  n.getName().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getName().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getName().replaceChild(left,  newNumber).replaceChild(right,  newNumber);	  n.getName().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1409	[BUG]  [BUGGY]  n.getName().replaceChild(left,  newNumber,  this);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getName().replaceChild(left,  newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getName().replaceChild(left,  newNumber,  this);	  n.getName().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1410	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1411	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1412	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1413	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1414	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1415	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1416	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1417	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	63	2	add
1418	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  n.getFirst().replaceChild(n,  right);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,  right);  n.getFirst().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    right);    n.getFirst().replaceChild(n,  right);	  	non-compiled	[CE]  cannot  find  symbol	170	None	add
1419	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().removeChild(left);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	40	2	add
1420	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().removeChild(left);  n.getNext().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);  n.getParent().removeChild(left);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getNext().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	40	2	add
1421	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  newNumber);  break;	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,    newNumber);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	162	None	replace
1422	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getFirstChild().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,    newNumber);    n.getFirstChild().removeChild(left,  newNumber);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	109	None	add
1423	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  node.getFirstChild().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  node.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,    newNumber);    node.getFirstChild().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	109	None	add
1424	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	101	None	replace
1425	[BUG]  [BUGGY]  Node  n  =  newNumber.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n  =  newNumber.getParent();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n  =  newNumber.getParent();	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	99	None	replace
1426	[BUG]  [BUGGY]  Node  n  =  left.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n  =  left.getParent();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n  =  left.getParent();	  n.getParent().replaceChild(left,    newNumber);    Node    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	99	None	replace
1427	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	NodeUtil.removeChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	149	2	replace
1428	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.removeChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	149	2	replace
1429	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(n);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(n);  n.getParent().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	149	2	replace
1430	[BUG]  [BUGGY]  newNumber.removeChild(n);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.removeChild(n);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(n);  n.getParent().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	149	2	replace
1431	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().replaceChild(n,  left);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  Node  newNumber.getParent().replaceChild(n,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    Node  newNumber.getParent().replaceChild(n,  left);	  	non-compiled	[CE]  ';'  expected	75	None	add
1432	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    left);    newNumber.getParent().replaceChild(left,  right);	  	compilable	  [FE]  RuntimeException  	75	2	add
1433	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  newNumber.getParent().replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    newNumber.getParent().replaceChild(left,  right);	  	compilable	  [FE]  RuntimeException  	75	2	add
1434	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  node.getParent().removeChild(left);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  node.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    left);    node.getParent().removeChild(left);	  	non-compiled	[CE]  cannot  find  symbol  node	75	None	add
1435	[BUG]  [BUGGY]  result  =  newNumber  ==  rvalInt;  break;  [CE]  incomparable  types:  Node  and  int  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  ==  rvalInt;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  ==  rvalInt;  break;	          result    =    newNumber    ==    >    rvalInt;    break;    	non-compiled	[CE]  incomparable  types:  Node  and  int	2	None	replace
1436	[BUG]  [BUGGY]  result  =  newNumber  >>  rvalInt;  break;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  >>  rvalInt;  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  >>  rvalInt;  break;	          result    =    newNumber    ==    >    rvalInt;    break;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	2	None	replace
1437	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  break;	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    break;    	non-compiled	[CE]  break  outside  switch  or  loop	169	None	replace
1438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  BITWISE_OPERAND);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  BITWISE_OPERAND);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  BITWISE_OPERAND);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	117	None	replace
1439	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(right);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	167	2	replace
1440	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(right);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	167	2	replace
1441	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(left);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	167	2	replace
1442	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getNext().removeChild(left);	  n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	167	2	replace
1443	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(resultDouble);  [CE]  cannot  find  symbol  resultDouble  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(resultDouble);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(resultDouble);	  	non-compiled	[CE]  cannot  find  symbol  resultDouble	4	None	add
1444	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(right,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	106	2	add
1445	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getParent().replaceChild(right,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	106	2	add
1446	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	NodeUtil.removeChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	130	2	replace
1447	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.removeChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	130	2	replace
1448	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(n,    newNumber);    newNumber.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
1449	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    newNumber.getLastChild().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	88	2	add
1450	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    n.getFirstChild().removeChild(left,  newNumber);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	add
1451	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  node.getFirstChild().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  node.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,    newNumber);    node.getFirstChild().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	88	None	add
1452	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getGrandparent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getGrandparent().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    right);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
1453	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getFirstChild().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1454	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getFirstChild().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1455	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1456	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1457	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1458	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  n.getFirstChild().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,        newNumber);        newNumber.getNext().replaceChild(n,    newNumber);    n.getFirstChild().replaceChild(left,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	55	2	add
1459	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
1460	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	50	2	add
1461	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	50	2	add
1462	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(n);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	50	2	add
1463	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	                newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	8	2	add
1464	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	8	2	add
1465	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	                newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(left);	  	compilable	  [FE]  RuntimeException  	8	2	add
1466	[BUG]  [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]          newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	                newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(left);	  	compilable	  [FE]  RuntimeException  	8	2	add
1467	[BUG]  [BUGGY]  result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;  [CE]  cannot  find  symbol  Delete  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  Delete	6	None	replace
1468	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	37	2	add
1469	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  right);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	37	2	add
1470	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	37	2	add
1471	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	37	2	add
1472	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().removeChild(left);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	37	2	add
1473	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().removeChild(left);  n.getParent().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().removeChild(left);    n.getParent().removeChild(left);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	37	2	add
1474	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1475	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1476	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1477	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(newNumber);    newNumber.getParent().removeChild(left);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
1478	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left).replaceChild(newNumber,  right);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left).replaceChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left).replaceChild(newNumber,  right);	  n.getParent().replaceChild(n,    left).replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	19	None	replace
1479	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(newNumber,  this);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(newNumber,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(newNumber,  this);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
1480	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,    newNumber);    	compilable	  [FE]  RuntimeException  	133	2	replace
1481	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,    newNumber);    	compilable	  [FE]  RuntimeException  	133	2	replace
1482	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber,  right  +  1);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  right  +  1);	  n.getParent().replaceChild(n,    newNumber,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
1483	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  Node  newNumber.getParent().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  Node  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,    left);    Node  newNumber.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	125	None	add
1484	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
1485	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
1486	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getParent().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
1487	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getParent().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
1488	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getPrevious().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getPrevious().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getPrevious().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
1489	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getLastChild().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getLastChild().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
1490	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getLastChild().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getLastChild().replaceChild(left,  newNumber);  n.getNext().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getLastChild().replaceChild(left,  newNumber);  n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
1491	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
1492	[BUG]  [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().removeChild(right);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);  n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().removeChild(right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,        newNumber);        n.getNext().removeChild(left);    n.getFirstChild().replaceChild(left,  newNumber);  n.getLastChild().removeChild(right);	  	compilable	  [FE]  RuntimeException  	27	2	add
1493	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
1494	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
1495	[BUG]  [BUGGY]  n.getParent().removeChild(left,  newNumber,  right);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().removeChild(left,  newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().removeChild(left,  newNumber,  right);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left,    newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
1496	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left);  n.getParent().removeChild(newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left);  n.getParent().removeChild(newNumber,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  left);  n.getParent().removeChild(newNumber,  right);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
1497	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  left);  n.getParent().removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.removeChild(n,  left);  n.getParent().removeChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.removeChild(n,  left);  n.getParent().removeChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left,    newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
1498	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(right,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1499	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right,  newNumber);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber),  right,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber),  right,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(right,    newNumber);    	non-compiled	[CE]  ';'  expected	146	None	replace
1500	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    right);    	compilable	  [FE]  RuntimeException  	34	2	replace
1501	[BUG]  [BUGGY]  newNumber.replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.replaceChild(n,  left);  newNumber.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,    right);    	compilable	  [FE]  RuntimeException  	34	2	replace
1502	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeUtil.replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.replaceChild(n,  newNumber).replaceChild(left,  newNumber);	  n.getParent().replaceChild(left,    newNumber).replaceChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
1503	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  parent.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  parent  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  parent.getParent().removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  parent.getParent().removeChild(newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  parent	141	None	replace
1504	[BUG]  [BUGGY]  newNumber.setString(negNum.getString());  [CE]  cannot  find  symbol  negNum  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(negNum.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(negNum.getString());	  newNumber.setString(node.getString());    	non-compiled	[CE]  cannot  find  symbol  negNum	156	None	replace
1505	[BUG]  [BUGGY]  node.removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  node.removeChild(newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	node.removeChild(newNumber);	  n.getNext().replaceChild(left,    newNumber);    Node    n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	23	None	replace
1506	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber,  left);	  newNumber.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
1507	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,  left,  right);	  newNumber.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
1508	[BUG]  [BUGGY]  newNumber.getPrevious().replaceChild(n,  n);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getPrevious().replaceChild(n,  n);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getPrevious().replaceChild(n,  n);	  n.getPrevious().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1509	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,  newNumber,  left);	  n.getFirstChild().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	110	None	replace
1510	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    n.getFirst().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1511	[BUG]  [BUGGY]  Node  n  =  newNumber.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  Node  n  =  newNumber.getNext();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	Node  n  =  newNumber.getNext();	  n.getNext().replaceChild(n,    newNumber);    Node    n.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	164	None	replace
1512	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	140	2	replace
1513	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	140	2	replace
1514	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
1515	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
1516	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  Node  n.getParent().replaceChild(n,  right);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  Node  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    right);    Node  n.getParent().replaceChild(n,  right);	  	non-compiled	[CE]  ';'  expected	86	None	add
1517	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(left,  right);	  	compilable	  [FE]  RuntimeException  	86	2	add
1518	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    right);    n.getParent().replaceChild(left,  right);	  	compilable	  [FE]  RuntimeException  	86	2	add
1519	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	22	2	replace
1520	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	22	2	replace
1521	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setLineno(newNumber.getLineno());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(newNumber.getString());    newNumber.setLineno(newNumber.getLineno());	  	compilable	  [FE]  RuntimeException  	115	2	add
1522	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setLineno(newNumber.getLineno());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setLineno(newNumber.getLineno());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    newNumber.setLineno(newNumber.getLineno());	  	compilable	  [FE]  RuntimeException  	115	2	add
1523	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(negNum.getString());  [CE]  cannot  find  symbol  negNum  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(negNum.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    newNumber.setString(negNum.getString());	  	non-compiled	[CE]  cannot  find  symbol  negNum	115	None	add
1524	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(right.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(newNumber.getString());    newNumber.setString(right.getString());	  	compilable	  [FE]  RuntimeException  	115	2	add
1525	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(right.getString());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(right.getString());  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    newNumber.setString(right.getString());	  	compilable	  [FE]  RuntimeException  	115	2	add
1526	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(newNumber.getString());  break;  [CE]  break  outside  switch  or  loop  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.setString(newNumber.getString());  newNumber.setString(newNumber.getString());  break;  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());    newNumber.setString(newNumber.getString());  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	115	None	add
1527	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getFirst().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1528	[BUG]  [BUGGY]  n.getFirst().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getFirst().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirst().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    n.getFirst().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1529	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
1530	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().removeChild(left);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
1531	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	29	2	add
1532	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	29	2	add
1533	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  left);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  left);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  left);	  newNumber.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	175	None	replace
1534	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left).replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,  left).replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	175	None	replace
1535	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,  left,  right);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  right);	  n.getParent().replaceChild(n,    left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	10	None	replace
1536	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
1537	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,        newNumber);        newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	42	2	add
1538	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  this);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  this);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  this);	  NodeTraversal.traverse(compiler,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	113	None	replace
1539	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n  =  right.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n  =  right.getFirstChild();  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber);  Node  n  =  right.getFirstChild();	  n.getParent().replaceChild(left,    newNumber);    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	105	None	replace
1540	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  right);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
1541	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  right);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  right);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
1542	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
1543	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,        left);        n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	143	2	add
1544	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
1545	[BUG]  [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);      [BUGGY]  n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,        newNumber);        n.getNext().replaceChild(left,    newNumber);    Node  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	100	None	add
