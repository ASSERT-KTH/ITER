bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      result  =  newNumber!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      result  =  newNumber!=  >  rvalInt;  break;  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	        result  =  newNumber!=  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
2	[BUG]  [BUGGY]      result  =  newNumber  ==  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      result  =  newNumber  ==  >  rvalInt;  break;  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	        result  =  newNumber  ==  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
3	[BUG]  [BUGGY]      result  =  newNumber  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      result  =  newNumber  >>  >  rvalInt;  break;  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	        result  =  newNumber  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
4	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      newNumber.addChildToBack(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	        newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	10	2	add
5	[BUG]  [BUGGY]      newNumber.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      newNumber.addChildToBack(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	        newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	10	2	add
6	[BUG]  [BUGGY]      result  =  newNumber!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      result  =  newNumber!=  >  rvalInt;  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	        result  =  newNumber!=  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
7	[BUG]  [BUGGY]      result  =  newNumber!=  >  lvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      result  =  newNumber!=  >  lvalInt;  break;  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	        result  =  newNumber!=  >  lvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      newNumber.addChildToFront(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	        newNumber.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	10	2	add
9	[BUG]  [BUGGY]      newNumber.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      newNumber.addChildToFront(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	        newNumber.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	10	2	add
10	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
11	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
12	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  right,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
13	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(newNumber,  left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  left,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
14	[BUG]  [BUGGY]  n.getParent().replaceChild(right,  newNumber,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(right,  newNumber,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(right,  newNumber,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
15	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(newNumber,  right,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  right,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
16	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  right).replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right).replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
17	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  left).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(newNumber,  left).replaceChild(newNumber,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  left).replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
18	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(n,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
19	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left).replaceChild(newNumber,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left).replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
20	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  n);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  n);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  n);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
21	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
22	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
23	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n.getNext().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    Node  n.getNext().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	13	None	add
24	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getPrevious().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    n.getPrevious().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
25	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left,  newNumber);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	13	None	add
26	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n  =  left.getNext();  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	13	None	add
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	13	2	add
28	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	13	2	add
29	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	6	2	add
30	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	6	2	add
31	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
32	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
33	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	6	2	add
34	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	6	2	add
35	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
36	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
37	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	6	2	add
38	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	6	2	add
39	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  Node  n  =  left.getNext();  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	add
40	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	6	2	add
41	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  left);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getNext().replaceChild(n,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    n.getNext().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	6	2	add
42	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	8	2	add
43	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	8	2	add
44	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    Node  newNumber.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  ';'  expected	8	None	add
45	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    Node  newNumber.getParent().removeChild(newNumber);	  	non-compiled	[CE]  ';'  expected	8	None	add
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	8	2	add
47	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	8	2	add
48	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	8	2	add
49	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	8	2	add
50	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	8	2	add
51	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(n);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	8	2	add
52	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(n);  [CE]  ';'  expected  [FE]                RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().removeChild(n);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    Node  newNumber.getParent().removeChild(n);	  	non-compiled	[CE]  ';'  expected	8	None	add
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
54	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
55	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
56	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    newNumber.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
57	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getPrevious().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    n.getPrevious().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
58	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  Node  n  =  left.getNext();  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	2	None	add
59	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
60	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
61	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);	  	compilable	  [FE]  RuntimeException  	2	2	add
62	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(n);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(n);	  	compilable	  [FE]  RuntimeException  	2	2	add
63	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
64	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
65	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  newNumber,  newNumber  +  1);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
66	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  result  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  newNumber,  result  +  1);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  result  +  1);	  n.getParent().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
67	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left,  newNumber  +  1);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
68	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left  +  1);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  left  +  1);	  n.getParent().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
69	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber  +  1);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
70	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  right);	  n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
71	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber,  result);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  result);	  n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
72	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber  +  1);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber  +  1);	  n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	14	None	replace
73	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(newNumber,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(newNumber,  left);	  n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
74	[BUG]  [BUGGY]  n.getNext().replaceChild(newNumber,  left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(newNumber,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(newNumber,  left);	  n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
75	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  left);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
76	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  left);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
77	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getNext().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
78	[BUG]  [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getNext().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getNext().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
79	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,  right);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
80	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  right);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
81	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getLastChild().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
82	[BUG]  [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getLastChild().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getLastChild().replaceChild(n,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
83	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  newNumber,  left);	  newNumber.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
84	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getLastChild().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	7	2	replace
85	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getLastChild().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getLastChild().replaceChild(n,  newNumber);	  n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	7	2	replace
86	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	7	2	replace
87	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	7	2	replace
88	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
89	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getFirstChild().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
90	[BUG]  [BUGGY]  n.getPrevious().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getPrevious().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getPrevious().replaceChild(n,  newNumber);	  n.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
91	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  right);	  n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
92	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber,  result);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  result);	  n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
93	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  left);	  n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
94	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber,  this);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber,  this);	  n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
95	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	4	2	add
96	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	4	2	add
97	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	4	2	add
98	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	4	2	add
99	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,    newNumber);    Node  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	4	None	add
100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	4	2	add
101	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	4	2	add
102	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n  =  left.getNext();  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,    newNumber);    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	4	None	add
103	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left,  newNumber);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	4	None	add
104	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(left);  [CE]  ';'  expected  [FE]                RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,    newNumber);    Node  n.getParent().removeChild(left);	  	non-compiled	[CE]  ';'  expected	4	None	add
105	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,    newNumber);    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	4	None	add
106	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	4	2	add
107	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	4	2	add
108	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber).replaceChild(right,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	14	None	replace
109	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getFirstChild().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
110	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getFirstChild().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getFirstChild().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
111	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber));  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber));  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber));	  n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  ';'  expected	14	None	replace
112	[BUG]  [BUGGY]  n.getName().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getName().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getName().replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    left);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  this);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  newNumber,  this);	      	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  newNumber,  left,  newNumber);	      	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.setString(newNumber.getString());  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.setString(newNumber.getString());	      	compilable	  [FE]  RuntimeException  	11	2	replace
116	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.setString(newNumber.getString());  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(newNumber.getString());	      	compilable	  [FE]  RuntimeException  	11	2	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber);	      	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
118	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber);  [CE]  void  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
119	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  left);  [CE]  void  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  left);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
120	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
121	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  right);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
122	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeUtil.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
123	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
124	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(left,  newNumber);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
125	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(newNumber,  left);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
126	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(newNumber,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(newNumber,  left);	  newNumber.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	9	2	replace
127	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	        NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	10	None	add
128	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getFirst().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    n.getFirst().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
130	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
131	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	13	None	add
132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
133	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(right,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
134	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber  +  1);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
135	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left  +  1);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  left  +  1);	  n.getParent().replaceChild(n,    newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
136	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,  newNumber,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
137	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  left,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
138	[BUG]  [BUGGY]  n.getParent().replaceChild(right,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(right,  newNumber,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(right,  newNumber,  left);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
139	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    Node  newNumber.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	8	None	add
140	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  node.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	8	None	add
141	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  node.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  node.getParent().removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    node.getParent().removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	8	None	add
142	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(result);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
143	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
144	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
145	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  Node  n  =  left.getFirstChild();  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	add
146	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);	  n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	5	None	replace
147	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getFirst().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    n.getFirst().replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
148	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
149	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
150	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  Node  n  =  left.getFirstChild();  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	2	None	add
151	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
152	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	2	2	add
153	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  newNumber,  right,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  right,  newNumber);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
154	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  right,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  newNumber,  right,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,  newNumber,  right,  left);	  n.getParent().replaceChild(n,    newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
155	[BUG]  [BUGGY]  n.getPrevious().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getPrevious().replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getPrevious().replaceChild(left,  newNumber);	  n.getNext().replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
156	[BUG]  [BUGGY]  newNumber.setString(node.getString());  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.setString(node.getString());  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.setString(node.getString());	      	non-compiled	[CE]  cannot  find  symbol  node	11	None	replace
157	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.removeChild(newNumber);	      	compilable	  [FE]  RuntimeException  	11	2	replace
158	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.removeChild(newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.removeChild(newNumber);	      	compilable	  [FE]  RuntimeException  	11	2	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber);	      	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
160	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	8	2	add
161	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	8	2	add
162	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  break;  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,    newNumber);    newNumber.getParent().replaceChild(n,  newNumber);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	8	None	add
163	[BUG]  [BUGGY]      newNumber.setLength(0);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]      newNumber.setLength(0);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	        newNumber.setLength(0);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
164	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  Node  n.getNext().replaceChild(n,  newNumber);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  Node  n.getNext().replaceChild(n,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    Node  n.getNext().replaceChild(n,  newNumber);	  	non-compiled	[CE]  ';'  expected	2	None	add
165	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  break;  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	2	None	add
166	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	2	2	add
167	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  newNumber);  n.getNext().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,    newNumber);    n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	2	2	add
168	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  break;  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	4	None	add
169	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  break;  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	13	None	add
170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	n.getNext().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	7	2	replace
171	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getNext().replaceChild(n,  right);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getNext().replaceChild(n,  right);	  n.getParent().replaceChild(n,    left);    	compilable	  [FE]  RuntimeException  	7	2	replace
172	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  this);  [CE]  void  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  this);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  this);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
173	[BUG]  [BUGGY]  n.getParent().replaceChild(newNumber,  left).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(newNumber,  left).replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(newNumber,  left).replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
174	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  node);  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  node);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(newNumber,  node);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	12	None	replace
175	[BUG]  [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  newNumber.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	newNumber.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	12	None	replace
176	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  Node  n.getParent().replaceChild(n,  left);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  Node  n.getParent().replaceChild(n,  left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    Node  n.getParent().replaceChild(n,  left);	  	non-compiled	[CE]  ';'  expected	6	None	add
177	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  Node  n.getParent().removeChild(left);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);    [BUGGY]  n.getParent().replaceChild(n,  left);  Node  n.getParent().removeChild(left);  [BUGGY]    reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	n.getParent().replaceChild(n,    left);    Node  n.getParent().removeChild(left);	  	non-compiled	[CE]  ';'  expected	6	None	add
