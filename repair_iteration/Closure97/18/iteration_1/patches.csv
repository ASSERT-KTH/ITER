bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  newNumber  =  Node.newNumber(result  +  1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
2	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
3	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
4	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  left.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  left.getParent().replaceChild(n,  newNumber);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  newNumber  =  Node.newNumber(result  +  1);  left.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
5	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  oldNumber  =  Node.newNumber(result  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  oldNumber  =  Node.newNumber(result  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  oldNumber  =  Node.newNumber(result  +  1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
6	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  node.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  newNumber  =  Node.newNumber(result  +  1);  node.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
7	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  newNumber  =  Node.newNumber(result  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  left.getNext();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  left.getNext();	      	compilable	  [FE]  RuntimeException  	9	2	replace
9	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  left.getNext();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.getNext();	      	compilable	  [FE]  RuntimeException  	9	2	replace
10	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  left.getFirstChild();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  left.getFirstChild();	      	compilable	  [FE]  RuntimeException  	9	2	replace
11	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  [FE]  RuntimeException  [FE]                    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  left.getFirstChild();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.getFirstChild();	      	compilable	  [FE]  RuntimeException  	9	2	replace
12	[BUG]  [BUGGY]  int  newNumber  =  left.getLastChild().getString();  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  int  newNumber  =  left.getLastChild().getString();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getLastChild().getString();	      	non-compiled	[CE]  incompatible  types	9	None	replace
13	[BUG]  [BUGGY]  int  newNumber  =  left.getFirstChild().getNumber();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  int  newNumber  =  left.getFirstChild().getNumber();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getFirstChild().getNumber();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
14	[BUG]  [BUGGY]  int  newNumber  =  left.getLastChild();  [CE]  incompatible  types  [FE]                          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  int  newNumber  =  left.getLastChild();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getLastChild();	      	non-compiled	[CE]  incompatible  types	9	None	replace
15	[BUG]  [BUGGY]  n.getParent().removeChild(left);  [CE]  cannot  find  symbol  newNumber  [FE]                            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  n.getParent().removeChild(left);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	n.getParent().removeChild(left);	      	non-compiled	[CE]  cannot  find  symbol  newNumber	9	None	replace
16	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result);	  Node    newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	10	None	replace
17	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,int)  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lvalInt);	  Node    newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int)	10	None	replace
18	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,int)  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  lvalInt);	  Node    newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int)	10	None	replace
19	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left);	  Node    newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	10	None	replace
20	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(right,  result);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  result);	  Node    newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	10	None	replace
21	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  result);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  result);	  Node    newNumber    =    Node.newNumber(left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	11	None	replace
22	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  right);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  right);	  Node    newNumber    =    Node.newNumber(left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)	11	None	replace
23	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  right);	  Node    newNumber    =    Node.newNumber(left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)	11	None	replace
24	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  left);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(right,  left);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  left);	  Node    newNumber    =    Node.newNumber(left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	11	None	replace
25	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]                  AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  lval);	  Node    newNumber    =    Node.newNumber(left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	11	None	replace
26	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  right);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  n,  right);	  Node    newNumber    =    Node.newNumber(left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)	11	None	replace
27	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(0);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(0);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  newNumber  =  Node.newNumber(0);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
28	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  newNumber  =  Node.newNumber(1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
29	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(0,  lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(0,  lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  newNumber  =  Node.newNumber(0,  lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
30	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  newNumber  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
31	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  newNumber  =  Node.newNumber(lvalInt  +  1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
32	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(2);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(2);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  newNumber  =  Node.newNumber(2);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
33	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  newNumber  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
34	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
35	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  oldNumber  =  Node.newNumber(lval);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  oldNumber  =  Node.newNumber(lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  oldNumber  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
36	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  n.getParent().removeChild(n);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  n.getParent().removeChild(n);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  newNumber  =  Node.newNumber(lval);  n.getParent().removeChild(n);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
37	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
38	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
39	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
40	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(n);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n);	  Node    newNumber    =    Node.newNumber(resultDouble);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	12	None	replace
41	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum);  [CE]  cannot  find  symbol  negNum  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(negNum);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum);	  Node    newNumber    =    Node.newNumber(resultDouble);    	non-compiled	[CE]  cannot  find  symbol  negNum	12	None	replace
42	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(node);  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(node);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(node);	  Node    newNumber    =    Node.newNumber(resultDouble);    	non-compiled	[CE]  cannot  find  symbol  node	12	None	replace
43	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  result);  [CE]  no  suitable  method  found  for  newString(int,double)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  result);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  result);	  Node    newNumber    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double)	2	None	replace
44	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(2);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(2);	  Node    newNumber    =    Node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
45	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(2);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(2);	  Node    newNumber    =    Node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
46	[BUG]  [BUGGY]  Node  newNumber  =  node.newNumber(0);  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  node.newNumber(0);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    	non-compiled	[CE]  cannot  find  symbol  node	2	None	replace
47	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    	compilable	  [FE]  ComparisonFailure  	4	2	replace
48	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    	compilable	  [FE]  ComparisonFailure  	4	2	replace
49	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    	compilable	  [FE]  ComparisonFailure  	4	2	replace
50	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    	compilable	  [FE]  ComparisonFailure  	4	2	replace
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result  +  2);	  Node    newNumber    =    Node.newNumber(result    +    1);    	compilable	  [FE]  ComparisonFailure  	4	2	replace
52	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result  +  2);	  Node    newNumber    =    Node.newNumber(result    +    1);    	compilable	  [FE]  ComparisonFailure  	4	2	replace
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(rvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    	compilable	  [FE]  ComparisonFailure  	4	2	replace
54	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(rvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    	compilable	  [FE]  ComparisonFailure  	4	2	replace
55	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(int,double)  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  result);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,double)	8	None	replace
56	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result);  [CE]  no  suitable  method  found  for  newNumber(double,double)  [FE]                  AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  result);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double)	8	None	replace
57	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,double,int)  [FE]                    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  result,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,int)	8	None	replace
58	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  left);  [CE]  no  suitable  method  found  for  newNumber(double,int,Node)  [FE]                      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  left);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt,  left);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,Node)	8	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	compilable	  [FE]  AssertionFailedError  	8	1	replace
60	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  [FE]  AssertionFailedError  [FE]                        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	compilable	  [FE]  AssertionFailedError  	8	1	replace
61	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(double,int,double)  [FE]                          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,double)	8	None	replace
62	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  left);  [CE]  no  suitable  method  found  for  newNumber(double,double,Node)  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  left);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  left);	  Node    newNumber    =    Node.newNumber(result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,Node)	7	None	replace
63	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double)  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  result,  lval);	  Node    newNumber    =    Node.newNumber(result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double)	7	None	replace
64	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                  AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	7	None	replace
65	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,Node,double)  [FE]                    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  left,  lval);	  Node    newNumber    =    Node.newNumber(result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,double)	7	None	replace
66	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rval,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rval,  lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  rval,  lval);	  Node    newNumber    =    Node.newNumber(result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	7	None	replace
67	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(rval);	  Node    newNumber    =    Node.newNumber(lval);    	compilable	  [FE]  ComparisonFailure  	6	2	replace
68	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(rval);	  Node    newNumber    =    Node.newNumber(lval);    	compilable	  [FE]  ComparisonFailure  	6	2	replace
69	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(rvalInt);	  Node    newNumber    =    Node.newNumber(lval);    	compilable	  [FE]  ComparisonFailure  	6	2	replace
70	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(rvalInt);	  Node    newNumber    =    Node.newNumber(lval);    	compilable	  [FE]  ComparisonFailure  	6	2	replace
71	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,int)  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  rvalInt);	  Node    newNumber    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int)	6	None	replace
72	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);	  Node    newNumber    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	6	None	replace
73	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	11	None	replace
74	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,int)  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  lvalInt);	  Node    newNumber    =    Node.newNumber(left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,int)	11	None	replace
75	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  n);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  n);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  n);	  Node    newNumber    =    Node.newNumber(left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)	11	None	replace
76	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(0);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  n  =  Node.newNumber(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
77	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  n  =  Node.newNumber(1);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
78	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(0);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(0);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  rvalInt  =  Node.newNumber(0);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
79	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  oldNumber  =  Node.newNumber(1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  oldNumber  =  Node.newNumber(1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  oldNumber  =  Node.newNumber(1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
80	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  oldNumber  =  Node.newNumber(0);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  oldNumber  =  Node.newNumber(0);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  oldNumber  =  Node.newNumber(0);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
81	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
82	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum  +  1);  [CE]  cannot  find  symbol  negNum  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(negNum  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  cannot  find  symbol  negNum	4	None	replace
83	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  left.getFirstChild();	      	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	9	None	replace
84	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  n  =  left.getNext();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  left.getNext();	      	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	9	None	replace
85	[BUG]  [BUGGY]  int  newNumber  =  left.getNext().getNumber();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  int  newNumber  =  left.getNext().getNumber();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getNext().getNumber();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
86	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  rval  =  Node.newNumber(lval);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  rval  =  Node.newNumber(lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  rval  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
87	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  lval  =  Node.newNumber(lval);  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  lval  =  Node.newNumber(lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  lval  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
88	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  n  =  Node.newNumber(lval);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  n  =  Node.newNumber(lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  n  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
89	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  rvalInt  =  Node.newNumber(lval);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  rvalInt  =  Node.newNumber(lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  rvalInt  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
90	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  left  =  Node.newNumber(lval);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  left  =  Node.newNumber(lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    Node  left  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
91	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  n  =  Node.newNumber(result  +  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  n  =  Node.newNumber(result  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  n  =  Node.newNumber(result  +  1);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
92	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  rvalInt  =  Node.newNumber(result  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  rvalInt  =  Node.newNumber(result  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  rvalInt  =  Node.newNumber(result  +  1);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
93	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  left  =  Node.newNumber(result  +  1);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  left  =  Node.newNumber(result  +  1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  left  =  Node.newNumber(result  +  1);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
94	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild());  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getLastChild());	  Node    newNumber    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	2	None	replace
95	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	10	None	replace
96	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER_ERROR);	  Node    newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	10	None	replace
97	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(right,  MAX_FOLD_NUMBER);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	10	None	replace
98	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  n);	  Node    newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	10	None	replace
99	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(null);  [CE]  no  suitable  method  found  for  newNumber(<null>)  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(null);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(null);	  Node    newNumber    =    Node.newNumber(resultDouble);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(<null>)	12	None	replace
100	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double)  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result,  lval);	  Node    newNumber    =    Node.newNumber(result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double)	7	None	replace
101	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  result,  lval);  [CE]  cannot  find  symbol  negNum  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  result,  lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum,  result,  lval);	  Node    newNumber    =    Node.newNumber(result,    lval);    	non-compiled	[CE]  cannot  find  symbol  negNum	7	None	replace
102	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,double,int)  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,int)	8	None	replace
103	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,Node,int)  [FE]                  AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  left,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,int)	8	None	replace
104	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  result,  lvalInt);  [CE]  cannot  find  symbol  negNum  [FE]                    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  result,  lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum,  result,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	non-compiled	[CE]  cannot  find  symbol  negNum	8	None	replace
105	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().removeChild(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().removeChild(left);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
106	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(left.getFirstChild());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  newNumber  =  Node.newNumber(left.getFirstChild());  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(0);    Node  newNumber  =  Node.newNumber(left.getFirstChild());	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	1	None	add
107	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(right,  right);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  right);	  Node    newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	10	None	replace
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
109	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(1);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
110	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString());  [CE]  no  suitable  method  found  for  newNumber(String)  [FE]      ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString());  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString());	  Node    newNumber    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String)	2	None	replace
111	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]        ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild());  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild());	  Node    newNumber    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	2	None	replace
112	[BUG]  [BUGGY]  int  newNumber  =  left.getType();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  int  newNumber  =  left.getType();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getType();	      	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
113	[BUG]  [BUGGY]  int  newNumber  =  left.getFirstChild();  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  int  newNumber  =  left.getFirstChild();  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getFirstChild();	      	non-compiled	[CE]  incompatible  types	9	None	replace
114	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt);	  Node    newNumber    =    Node.newNumber(resultDouble);    	compilable	  [FE]  ComparisonFailure  	12	2	replace
115	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt);	  Node    newNumber    =    Node.newNumber(resultDouble);    	compilable	  [FE]  ComparisonFailure  	12	2	replace
116	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  lval);  [CE]  no  suitable  method  found  for  newString(int,double)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  lval);	  Node    newNumber    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double)	6	None	replace
117	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().removeChild(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().removeChild(left);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	add
118	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble,  lval);  [CE]  cannot  find  symbol  resultDouble  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble,  lval);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(resultDouble,  lval);	  Node    newNumber    =    Node.newNumber(result,    lval);    	non-compiled	[CE]  cannot  find  symbol  resultDouble	7	None	replace
119	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalDouble);  [CE]  cannot  find  symbol  lvalDouble  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalDouble);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalDouble);	  Node    newNumber    =    Node.newNumber(result,    lvalInt);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	8	None	replace
120	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().removeChild(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }    [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().removeChild(left);  [BUGGY]    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    1);    Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
