bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);	Node  newNumber  =  Node.newNumber(result);  	compilable	  [FE]  ComparisonFailure  	35	2	replace
2	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  [FE]  ComparisonFailure  [FE]    AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);	Node  newNumber  =  Node.newNumber(result);  	compilable	  [FE]  ComparisonFailure  	35	2	replace
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result  +  1);	Node  newNumber  =  Node.newNumber(result);  	compilable	  [FE]  ComparisonFailure  	35	2	replace
4	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  [FE]  ComparisonFailure  [FE]      AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result  +  1);	Node  newNumber  =  Node.newNumber(result);  	compilable	  [FE]  ComparisonFailure  	35	2	replace
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);	Node  newNumber  =  Node.newNumber(result);  	compilable	  [FE]  ComparisonFailure  	35	2	replace
6	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  [FE]  ComparisonFailure  [FE]        AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);	Node  newNumber  =  Node.newNumber(result);  	compilable	  [FE]  ComparisonFailure  	35	2	replace
7	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,double)  [FE]          AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval);	Node  newNumber  =  Node.newNumber(result);  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double)	35	None	replace
8	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,int)  [FE]            AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt);	Node  newNumber  =  Node.newNumber(result);  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int)	35	None	replace
9	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  newNumber  [FE]              AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]    [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	  	Node  newNumber  =  Node.newNumber(result);  	non-compiled	[CE]  cannot  find  symbol  newNumber	35	None	replace
10	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);	Node  newNumber  =  Node.newNumber(result);  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	35	None	replace
11	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]      AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right);	Node  newNumber  =  Node.newNumber(result);  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	35	None	replace
12	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble);  [CE]  cannot  find  symbol  resultDouble  [FE]    AssertionFailedError  [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble);  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(resultDouble);	Node  newNumber  =  Node.newNumber(result);  	non-compiled	[CE]  cannot  find  symbol  resultDouble	35	None	replace
