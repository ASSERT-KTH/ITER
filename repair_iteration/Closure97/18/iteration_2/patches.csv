bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(double,int,double)  [FE]    AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  rvalInt,  result);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,double)	60	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result,  lvalInt,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	compilable	  [FE]  AssertionFailedError  	60	1	replace
3	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  rvalInt);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	compilable	  [FE]  AssertionFailedError  	60	1	replace
4	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalDouble,  rvalInt);  [CE]  cannot  find  symbol  lvalDouble  [FE]        AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalDouble,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalDouble,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	60	None	replace
5	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(int,int)  [FE]          AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,int)	60	None	replace
6	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  lvalInt,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,int,int)  [FE]            AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  lvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  lvalInt,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,int)	60	None	replace
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval,  rvalInt,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	compilable	  [FE]  ComparisonFailure  	60	2	replace
8	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt,  rvalInt);  [FE]  ComparisonFailure  [FE]              AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  rvalInt,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	compilable	  [FE]  ComparisonFailure  	60	2	replace
9	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  node.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  node.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	6	None	replace
10	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  node.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  node.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	6	None	replace
11	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  node.getParent().replaceChild(n,  left);  [CE]  cannot  find  symbol  node  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  node.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  node.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	6	None	replace
12	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  node.getParent().replaceChild(n,  right);  [CE]  cannot  find  symbol  node  [FE]                        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  node.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  node.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	6	None	replace
13	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	6	None	replace
14	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  node.getParent().replaceChild(n,  left);  [CE]  cannot  find  symbol  node  [FE]                            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  node.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result  +  1);  node.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	6	None	replace
15	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  right,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  right,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	97	None	replace
16	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER,  left);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER,  left);	  Node    newNumber    =    Node.newNumber(right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	97	None	replace
17	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER,  right);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER,  right);	  Node    newNumber    =    Node.newNumber(right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	97	None	replace
18	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(double,Node,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  right,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  right,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,double)	97	None	replace
19	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  right.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  right.getFirstChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	83	None	replace
20	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  left.getLastChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  left.getLastChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	83	None	replace
21	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getLastChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  left.getLastChild();	  Node    n    =    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	83	2	replace
22	[BUG]  [BUGGY]  Node  newNumber  =  left.getLastChild();  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getLastChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.getLastChild();	  Node    n    =    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	83	2	replace
23	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild(),  right.getLastChild());  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild(),  right.getLastChild());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getLastChild(),  right.getLastChild());	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	80	None	replace
24	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  right.getLastChild());  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  right.getLastChild());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild(),  right.getLastChild());	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	80	None	replace
25	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  oldNumber  =  Node.newNumber(0);  [CE]  cannot  find  symbol  oldNumber  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  oldNumber  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  oldNumber  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(0);    	non-compiled	[CE]  cannot  find  symbol  oldNumber	80	None	replace
26	[BUG]  [BUGGY]  Node  newNumber  =  node.newNumber(1);  [CE]  cannot  find  symbol  node  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(0);    	non-compiled	[CE]  cannot  find  symbol  node	80	None	replace
27	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  right,  result);	  Node    newNumber    =    Node.newNumber(left,    left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)	23	None	replace
28	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  left);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  left);	  Node    newNumber    =    Node.newNumber(left,    left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)	23	None	replace
29	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  right,  lval);	  Node    newNumber    =    Node.newNumber(left,    left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)	23	None	replace
30	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  right,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)	23	None	replace
31	[BUG]  [BUGGY]  int  newNumber  =  right.getLastChild();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  right.getLastChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  right.getLastChild();	  int    newNumber    =    left.getLastChild();    	non-compiled	[CE]  incompatible  types	14	None	replace
32	[BUG]  [BUGGY]  int  newNumber  =  left.getLastChild()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getLastChild()  -  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getLastChild()  -  1;	  int    newNumber    =    left.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	14	None	replace
33	[BUG]  [BUGGY]  int  newNumber  =  n.getLastChild();  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  n.getLastChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  n.getLastChild();	  int    newNumber    =    left.getLastChild();    	non-compiled	[CE]  incompatible  types	14	None	replace
34	[BUG]  [BUGGY]  int  newNumber  =  left.getLastChild().length;  [CE]  cannot  find  symbol  length  [FE]                                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getLastChild().length;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getLastChild().length;	  int    newNumber    =    left.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  length	14	None	replace
35	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  n);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  n);	  Node    newNumber    =    Node.newNumber(lval);    Node    oldNumber    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	35	None	replace
36	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(rval  +  1);	  Node    newNumber    =    Node.newNumber(lval    +    1);    	compilable	  [FE]  ComparisonFailure  	50	2	replace
37	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval  +  1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(rval  +  1);	  Node    newNumber    =    Node.newNumber(lval    +    1);    	compilable	  [FE]  ComparisonFailure  	50	2	replace
38	[BUG]  [BUGGY]  Node  n  =  right.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  right.getNext();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  right.getNext();	  Node    n    =    left.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	84	None	replace
39	[BUG]  [BUGGY]  Node  n  =  left.getNext()  +  1;  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  left.getNext()  +  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  left.getNext()  +  1;	  Node    n    =    left.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	84	None	replace
40	[BUG]  [BUGGY]  Node  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;	  Node    n    =    left.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	84	None	replace
41	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  newNumber  =  Node.newNumber(lval  +  1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
42	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
43	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  newNumber  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
44	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  1);  left.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  1);  left.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  newNumber  =  Node.newNumber(lval  +  1);  left.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
45	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  oldNumber  =  Node.newNumber(lval  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  oldNumber  =  Node.newNumber(lval  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  oldNumber  =  Node.newNumber(lval  +  1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
46	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  1);  node.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  1);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  newNumber  =  Node.newNumber(lval  +  1);  node.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
47	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n.getType());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(n.getType());	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(1);    	compilable	  [FE]  ComparisonFailure  	28	2	replace
49	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n.getType());  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n.getType());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n.getType());	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(1);    	compilable	  [FE]  ComparisonFailure  	28	2	replace
50	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(2);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(2);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	76	None	replace
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  n  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(0);    	compilable	  [FE]  RuntimeException  	76	2	replace
52	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n  =  Node.newNumber(0);  [FE]  RuntimeException  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  n  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(0);    	compilable	  [FE]  RuntimeException  	76	2	replace
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  n  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(0);    	compilable	  [FE]  RuntimeException  	76	2	replace
54	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n  =  Node.newNumber(1);  [FE]  RuntimeException  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  n  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(0);    	compilable	  [FE]  RuntimeException  	76	2	replace
55	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,Node,int)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left,  rvalInt);	  Node    newNumber    =    Node.newNumber(lval,    rvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,int)	71	None	replace
56	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,double,int)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  result,  rvalInt);	  Node    newNumber    =    Node.newNumber(lval,    rvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,int)	71	None	replace
57	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  n,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,Node,int)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  n,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  n,  rvalInt);	  Node    newNumber    =    Node.newNumber(lval,    rvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,int)	71	None	replace
58	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(double,int,double)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  rvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(lval,    rvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,double)	71	None	replace
59	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  right,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,Node,int)  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  right,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  right,  rvalInt);	  Node    newNumber    =    Node.newNumber(lval,    rvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,int)	71	None	replace
60	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left,  result);  [CE]  no  suitable  method  found  for  newNumber(double,Node,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left,  result);	  Node    newNumber    =    Node.newNumber(result,    left,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,double)	103	None	replace
61	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  right,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,Node,Node,int)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  right,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  left,  right,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    left,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,Node,int)	103	None	replace
62	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  left,  result);  [CE]  no  suitable  method  found  for  newNumber(int,Node,double)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  left,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  left,  result);	  Node    newNumber    =    Node.newNumber(result,    left,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,Node,double)	103	None	replace
63	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,int)  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    left,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,int)	103	None	replace
64	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  oldNumber  =  Node.newNumber(2);  [CE]  cannot  find  symbol  oldNumber  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  oldNumber  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  oldNumber  =  Node.newNumber(2);	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(1);    	non-compiled	[CE]  cannot  find  symbol  oldNumber	79	None	replace
65	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  oldNumber  =  Node.newNumber(1);  [CE]  cannot  find  symbol  oldNumber  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  oldNumber  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  oldNumber  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(1);    	non-compiled	[CE]  cannot  find  symbol  oldNumber	79	None	replace
66	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  right,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  right,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  right,  result);	  Node    newNumber    =    Node.newNumber(n,    left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)	22	None	replace
67	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  right,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  right,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  right,  lval);	  Node    newNumber    =    Node.newNumber(n,    left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)	22	None	replace
68	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  right,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(n,    left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)	22	None	replace
69	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  right);  [CE]  no  suitable  method  found  for  newNumber(double,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  left,  right);	  Node    newNumber    =    Node.newNumber(n,    left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,Node)	22	None	replace
70	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  right,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,int)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  right,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  right,  lvalInt);	  Node    newNumber    =    Node.newNumber(n,    left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,int)	22	None	replace
71	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  newNumber);	  Node    newNumber    =    Node.newNumber(n,    left,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)	22	None	replace
72	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  right);	  Node    newNumber    =    Node.newNumber(right,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	107	None	replace
73	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER_ERROR);	  Node    newNumber    =    Node.newNumber(right,    right);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	107	None	replace
74	[BUG]  [BUGGY]  int  newNumber  =  left.getFirstChild().getString();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getFirstChild().getString();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getFirstChild().getString();	  int    newNumber    =    left.getLastChild().getString();    	non-compiled	[CE]  incompatible  types	12	None	replace
75	[BUG]  [BUGGY]  int  newNumber  =  right.getLastChild().getString();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  right.getLastChild().getString();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  right.getLastChild().getString();	  int    newNumber    =    left.getLastChild().getString();    	non-compiled	[CE]  incompatible  types	12	None	replace
76	[BUG]  [BUGGY]  int  newNumber  =  left.getLastChild().getString()  +  1;  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getLastChild().getString()  +  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getLastChild().getString()  +  1;	  int    newNumber    =    left.getLastChild().getString();    	non-compiled	[CE]  incompatible  types	12	None	replace
77	[BUG]  [BUGGY]  int  newNumber  =  n.getLastChild().getString();  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  n.getLastChild().getString();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  n.getLastChild().getString();	  int    newNumber    =    left.getLastChild().getString();    	non-compiled	[CE]  incompatible  types	12	None	replace
78	[BUG]  [BUGGY]  int  newNumber  =  left.getLastChild().getString(),  lvalInt);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getLastChild().getString(),  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getLastChild().getString(),  lvalInt);	  int    newNumber    =    left.getLastChild().getString();    	non-compiled	[CE]  ';'  expected	12	None	replace
79	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(int,double,double)  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  result,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,double,double)	61	None	replace
80	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  MAX_FOLD_NUMBER,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,double,int)  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  MAX_FOLD_NUMBER,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  MAX_FOLD_NUMBER,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,int)	61	None	replace
81	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  result,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	61	None	replace
82	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,int,double,int)  [FE]                                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,double,int)	61	None	replace
83	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  lvalInt,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double,int,double)  [FE]                                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  result,  lvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,int,double)	61	None	replace
84	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER,  result);  [CE]  no  suitable  method  found  for  newNumber(double,int,double,double)  [FE]                                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER,  result);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,double,double)	61	None	replace
85	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  oldNumber  =  Node.newNumber(oldNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  oldNumber  =  Node.newNumber(oldNumber  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  oldNumber  =  Node.newNumber(oldNumber  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    oldNumber    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	5	None	replace
86	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  oldNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  oldNumber  =  Node.newNumber(lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    oldNumber    =    Node.newNumber(result    +    1);    	compilable	  [FE]  ComparisonFailure  	5	2	replace
87	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  oldNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  oldNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  oldNumber  =  Node.newNumber(lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    oldNumber    =    Node.newNumber(result    +    1);    	compilable	  [FE]  ComparisonFailure  	5	2	replace
88	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  oldNumber  =  Node.newNumber(oldNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  oldNumber  =  Node.newNumber(oldNumber  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval  +  1);  Node  oldNumber  =  Node.newNumber(oldNumber  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    oldNumber    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	5	None	replace
89	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
90	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  newNumber  =  Node.newNumber(result,  lvalInt,  lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  newNumber  =  Node.newNumber(result,  lvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  newNumber  =  Node.newNumber(result,  lvalInt,  lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
91	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  oldNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  oldNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  oldNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
92	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
93	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  rvalInt  =  Node.newNumber(result,  rvalInt,  lvalInt);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  rvalInt  =  Node.newNumber(result,  rvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  rvalInt  =  Node.newNumber(result,  rvalInt,  lvalInt);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
94	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  newNumber  =  Node.newNumber(n,  rvalInt,  lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  newNumber  =  Node.newNumber(n,  rvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  newNumber  =  Node.newNumber(n,  rvalInt,  lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
95	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  newNumber  =  Node.newNumber(rvalInt,  lvalInt,  lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  newNumber  =  Node.newNumber(rvalInt,  lvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  newNumber  =  Node.newNumber(rvalInt,  lvalInt,  lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
96	[BUG]  [BUGGY]  int  newNumber  =  right.getFirstChild().getNumber();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  right.getFirstChild().getNumber();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  right.getFirstChild().getNumber();	  int    newNumber    =    left.getFirstChild().getNumber();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
97	[BUG]  [BUGGY]  int  newNumber  =  n.getFirstChild().getNumber();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  n.getFirstChild().getNumber();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  n.getFirstChild().getNumber();	  int    newNumber    =    left.getFirstChild().getNumber();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
98	[BUG]  [BUGGY]  int  newNumber  =  left.getLastChild().getNumber();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getLastChild().getNumber();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getLastChild().getNumber();	  int    newNumber    =    left.getFirstChild().getNumber();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
99	[BUG]  [BUGGY]  int  newNumber  =  left.getFirstChild().getNumber()  -  1;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getFirstChild().getNumber()  -  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getFirstChild().getNumber()  -  1;	  int    newNumber    =    left.getFirstChild().getNumber();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
100	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
101	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  newNumber  =  left.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
102	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getLastChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  left  =  left.getLastChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
103	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  newNumber  =  left.getLastChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  newNumber  =  left.getLastChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  newNumber  =  left.getLastChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
104	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  oldNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  oldNumber  =  left.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  oldNumber  =  left.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
105	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  right.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  right.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  left  =  right.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
106	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  right  =  left.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  right  =  left.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
107	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  left,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  left,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  left,  result);	  Node    newNumber    =    Node.newNumber(right,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	24	None	replace
108	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  left,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  left,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  left,  MAX_FOLD_NUMBER_ERROR);	  Node    newNumber    =    Node.newNumber(right,    left);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	24	None	replace
109	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  left,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  left,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  left,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(right,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	24	None	replace
110	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  left,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,int)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  left,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  left,  lvalInt);	  Node    newNumber    =    Node.newNumber(right,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,int)	24	None	replace
111	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  n.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(n);    	compilable	  [FE]  RuntimeException  	36	2	replace
112	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().removeChild(n);  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  n.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(n);    	compilable	  [FE]  RuntimeException  	36	2	replace
113	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(n);    	compilable	  [FE]  RuntimeException  	36	2	replace
114	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(n);    	compilable	  [FE]  RuntimeException  	36	2	replace
115	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().removeChild(n);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(n);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	36	None	replace
116	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  n.getParent().removeChild(n);  [CE]  cannot  find  symbol  lvalDouble  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  n.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalDouble);  n.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	36	None	replace
117	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(n);    	compilable	  [FE]  RuntimeException  	36	2	replace
118	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().removeChild(n);  [FE]  RuntimeException  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval  +  1);  n.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(n);    	compilable	  [FE]  RuntimeException  	36	2	replace
119	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  MAX_FOLD_NUMBER,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  MAX_FOLD_NUMBER,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  MAX_FOLD_NUMBER,  lval);	  Node    newNumber    =    Node.newNumber(result,    lval,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	64	None	replace
120	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  rval);  [CE]  no  suitable  method  found  for  newNumber(double,double,double,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  rval);	  Node    newNumber    =    Node.newNumber(result,    lval,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double,double)	64	None	replace
121	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  result);  [CE]  no  suitable  method  found  for  newNumber(double,double,double,double)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  result);	  Node    newNumber    =    Node.newNumber(result,    lval,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double,double)	64	None	replace
122	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double)  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  result,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lval,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double)	64	None	replace
123	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,double,double,int)  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    lval,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double,int)	64	None	replace
124	[BUG]  [BUGGY]  n.getParent().removeChild(right);  [CE]  cannot  find  symbol  newNumber  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  n.getParent().removeChild(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	n.getParent().removeChild(right);	  n.getParent().removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  newNumber	15	None	replace
125	[BUG]  [BUGGY]  n.getNext().removeChild(left);  [CE]  cannot  find  symbol  newNumber  [FE]                                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  n.getNext().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	n.getNext().removeChild(left);	  n.getParent().removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  newNumber	15	None	replace
126	[BUG]  [BUGGY]  n.getParent().removeChild(left,  result);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  n.getParent().removeChild(left,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	n.getParent().removeChild(left,  result);	  n.getParent().removeChild(left);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
127	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  left.newNumber(1);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
128	[BUG]  [BUGGY]  Node  newNumber  =  left.newNumber(1);  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.newNumber(1);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
129	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  left.newNumber(0);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
130	[BUG]  [BUGGY]  Node  newNumber  =  left.newNumber(0);  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.newNumber(0);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
131	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  n.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  n.newNumber(1);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
132	[BUG]  [BUGGY]  Node  newNumber  =  n.newNumber(1);  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  n.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  n.newNumber(1);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
133	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  n.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  n.newNumber(0);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
134	[BUG]  [BUGGY]  Node  newNumber  =  n.newNumber(0);  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  n.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  n.newNumber(0);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
135	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  right.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  right.newNumber(1);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
136	[BUG]  [BUGGY]  Node  newNumber  =  right.newNumber(1);  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  right.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  right.newNumber(1);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
137	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  right.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  right.newNumber(0);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
138	[BUG]  [BUGGY]  Node  newNumber  =  right.newNumber(0);  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  right.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  right.newNumber(0);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
139	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  MAX_FOLD_NUMBER_ERROR));  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  MAX_FOLD_NUMBER_ERROR));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(Math.max(result,  MAX_FOLD_NUMBER_ERROR));	  Node    newNumber    =    Node.newNumber(negNum);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	41	None	replace
140	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  MAX_FOLD_NUMBER));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(Math.max(result,  MAX_FOLD_NUMBER));	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  ComparisonFailure  	41	2	replace
141	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  MAX_FOLD_NUMBER));  [FE]  ComparisonFailure  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  MAX_FOLD_NUMBER));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(Math.max(result,  MAX_FOLD_NUMBER));	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  ComparisonFailure  	41	2	replace
142	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(Math.min(result,  MAX_FOLD_NUMBER_ERROR));  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.min(result,  MAX_FOLD_NUMBER_ERROR));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(Math.min(result,  MAX_FOLD_NUMBER_ERROR));	  Node    newNumber    =    Node.newNumber(negNum);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	41	None	replace
143	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  lval));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(Math.max(result,  lval));	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  ComparisonFailure  	41	2	replace
144	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  lval));  [FE]  ComparisonFailure  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  lval));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(Math.max(result,  lval));	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  ComparisonFailure  	41	2	replace
145	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
146	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
148	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
149	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  n.getParent().replaceChild(left,  newNumber);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right  +  1);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
150	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
151	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
152	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
153	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
154	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
155	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	3	2	replace
156	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  right);  [CE]  no  suitable  method  found  for  newNumber(int,Node)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  right);	  Node    newNumber    =    Node.newNumber(right,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,Node)	18	None	replace
157	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,int,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  lvalInt,  result);	  Node    newNumber    =    Node.newNumber(right,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,double)	18	None	replace
158	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  result,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,double,int)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  result,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  result,  lvalInt);	  Node    newNumber    =    Node.newNumber(right,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,int)	18	None	replace
159	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  left.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  left.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	117	2	replace
160	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  left.getParent().removeChild(n);  [FE]  RuntimeException  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  left.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  left.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	117	2	replace
161	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().removeChild(left);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	117	None	replace
162	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  n.getParent().removeChild(left);  [CE]  cannot  find  symbol  lvalDouble  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalDouble);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	117	None	replace
163	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  right);  n.getParent().removeChild(left);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  right);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  right);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	117	None	replace
164	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  n.getParent().removeChild(left);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	117	None	replace
165	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().removeChild(right);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().removeChild(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().removeChild(right);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	117	None	replace
166	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newNumber(lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    rvalInt    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	92	None	replace
167	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(rvalInt  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(rvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(rvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    rvalInt    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	92	None	replace
168	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    rvalInt    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	92	None	replace
169	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newNumber(rvalInt  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newNumber(rvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newNumber(rvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    rvalInt    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	92	None	replace
170	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newNumber(result  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    rvalInt    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	92	None	replace
171	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left,  lval);  [CE]  no  suitable  method  found  for  newString(int,Node,double)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  left,  lval);	  Node    newNumber    =    Node.newString(Token.NAME,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,double)	116	None	replace
172	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  result,  lval);  [CE]  no  suitable  method  found  for  newString(int,double,double)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  result,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  result,  lval);	  Node    newNumber    =    Node.newString(Token.NAME,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double,double)	116	None	replace
173	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  lval,  left);  [CE]  no  suitable  method  found  for  newString(int,double,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  lval,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  lval,  left);	  Node    newNumber    =    Node.newString(Token.NAME,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double,Node)	116	None	replace
174	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  n,  lval);  [CE]  no  suitable  method  found  for  newString(int,Node,double)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  n,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  n,  lval);	  Node    newNumber    =    Node.newString(Token.NAME,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,double)	116	None	replace
175	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  lval,  result);  [CE]  no  suitable  method  found  for  newString(int,double,double)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  lval,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  lval,  result);	  Node    newNumber    =    Node.newString(Token.NAME,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double,double)	116	None	replace
176	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  rval,  lval);  [CE]  no  suitable  method  found  for  newString(int,double,double)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  rval,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  rval,  lval);	  Node    newNumber    =    Node.newString(Token.NAME,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double,double)	116	None	replace
177	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lval,  result);	  Node    newNumber    =    Node.newNumber(result,    lval,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double)	62	None	replace
178	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  left);  [CE]  no  suitable  method  found  for  newNumber(double,double,Node)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  result,  left);	  Node    newNumber    =    Node.newNumber(result,    lval,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,Node)	62	None	replace
179	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  lval);	  Node    newNumber    =    Node.newNumber(result,    lval,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	62	None	replace
180	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  left,  right);  [CE]  no  suitable  method  found  for  newNumber(double,double,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  left,  right);	  Node    newNumber    =    Node.newNumber(result,    lval,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,Node,Node)	62	None	replace
181	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lval,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lval,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  lval,  result);	  Node    newNumber    =    Node.newNumber(result,    lval,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double)	62	None	replace
182	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(result);  [CE]  no  suitable  method  found  for  newString(double)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(result);	  Node    newNumber    =    Node.newNumber(rval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(double)	68	None	replace
183	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,int)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    lvalDouble);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int)	119	None	replace
184	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rval);  [CE]  no  suitable  method  found  for  newNumber(double,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  rval);	  Node    newNumber    =    Node.newNumber(result,    lvalDouble);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double)	119	None	replace
185	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  val);  [CE]  cannot  find  symbol  val  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  val);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  val);	  Node    newNumber    =    Node.newNumber(result,    lvalDouble);    	non-compiled	[CE]  cannot  find  symbol  val	119	None	replace
186	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  n);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  n);	  Node    newNumber    =    Node.newNumber(result,    lvalDouble);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	119	None	replace
187	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  left);	  Node    newNumber    =    Node.newNumber(result,    lvalDouble);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	119	None	replace
188	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
189	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
191	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
192	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
193	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
194	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
195	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
196	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  result);  [CE]  no  suitable  method  found  for  newNumber(String,double)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString(),  result);	  Node    newNumber    =    Node.newNumber(left.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String,double)	110	None	replace
197	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(String,double)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString(),  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String,double)	110	None	replace
198	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  right);  [CE]  no  suitable  method  found  for  newNumber(String,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString(),  right);	  Node    newNumber    =    Node.newNumber(left.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String,Node)	110	None	replace
199	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString()  +  1);  [CE]  no  suitable  method  found  for  newNumber(String)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString()  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString()  +  1);	  Node    newNumber    =    Node.newNumber(left.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String)	110	None	replace
200	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right.getString(),  result);  [CE]  no  suitable  method  found  for  newNumber(String,double)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right.getString(),  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right.getString(),  result);	  Node    newNumber    =    Node.newNumber(left.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String,double)	110	None	replace
201	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  left.getLowerCase());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  left.getLowerCase());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString(),  left.getLowerCase());	  Node    newNumber    =    Node.newNumber(left.getString());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
202	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  n);  [CE]  no  suitable  method  found  for  newNumber(int,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  n);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,Node)	30	None	replace
203	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt    +    1);    Node  newNumber  =  Node.newNumber(lvalInt  +  1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	47	None	add
204	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt    +    1);    Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	47	None	add
205	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt    +    1);    Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	47	None	add
206	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  node.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt    +    1);    Node  newNumber  =  Node.newNumber(lvalInt  +  1);  node.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	47	None	add
207	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().removeChild(newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().removeChild(newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt    +    1);    Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().removeChild(newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	47	None	add
208	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  n,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	95	None	replace
209	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER,  result);	  Node    newNumber    =    Node.newNumber(left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double)	95	None	replace
210	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lval,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double)	95	None	replace
211	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
212	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
213	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  left.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  left.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
214	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  left.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  left.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  left.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
215	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
216	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  left.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
217	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right.getType());  left.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(right.getType());  left.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
218	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right.getType());  left.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right.getType());  left.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right.getType());  left.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
219	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result  +  1);  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
220	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  left.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result  +  1);  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
221	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getType());  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(left.getType());  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
222	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getType());  left.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]                        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getType());  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getType());  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
223	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(result);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(result);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	77	None	replace
224	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newString(1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newString(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newString(1);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	77	None	replace
225	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  left  =  Node.newNumber(right);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  Node  left  =  Node.newNumber(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  Node  left  =  Node.newNumber(right);	  Node    newNumber    =    Node.newNumber(lval);    Node    left    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	90	None	replace
226	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  Node  left  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  Node  left  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right);  Node  left  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    left    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	90	None	replace
227	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lval);  Node  left  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lval);  Node  left  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  lval);  Node  left  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    left    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	90	None	replace
228	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt);  Node  left  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(double,int)  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalInt);  Node  left  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  rvalInt);  Node  left  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    left    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int)	90	None	replace
229	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  Node  left  =  Node.newNumber(lvalDouble);  [CE]  cannot  find  symbol  lvalDouble  [FE]                        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  Node  left  =  Node.newNumber(lvalDouble);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalDouble);  Node  left  =  Node.newNumber(lvalDouble);	  Node    newNumber    =    Node.newNumber(lval);    Node    left    =    Node.newNumber(lval);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	90	None	replace
230	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  newNumber  =  Node.newNumber(1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
231	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(2);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  newNumber  =  Node.newNumber(2);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
232	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(1);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(1);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  newNumber  =  Node.newNumber(1);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
233	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(3);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(3);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  newNumber  =  Node.newNumber(3);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
234	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(2);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(2);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  newNumber  =  Node.newNumber(2);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
235	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(1);  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  newNumber  =  Node.newNumber(1);  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
236	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(1);  n.getParent().removeChild(n);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  newNumber  =  Node.newNumber(1);  n.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  newNumber  =  Node.newNumber(1);  n.getParent().removeChild(n);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
237	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lval);	  Node    newNumber    =    Node.newNumber(left,    MAX_FOLD_NUMBER_ERROR);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	96	None	replace
238	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left.length);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left.length);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left.length);	  Node    newNumber    =    Node.newNumber(left,    MAX_FOLD_NUMBER_ERROR);    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
239	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,int)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  rvalInt);	  Node    newNumber    =    Node.newNumber(left,    MAX_FOLD_NUMBER_ERROR);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int)	96	None	replace
240	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  result  =  lvalInt  >>  >  rvalInt;  break;	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
241	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
242	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	result  =  lvalInt  >>  >  rvalInt;  break;	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
243	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  >>  >  rvalInt;  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  >>  >  rvalInt;  break;	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
244	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
245	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >>  >  rvalInt;  break;	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
246	[BUG]  [BUGGY]  int  newNumber  =  right.getNext().getNumber();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  right.getNext().getNumber();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  right.getNext().getNumber();	  int    newNumber    =    left.getNext().getNumber();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
247	[BUG]  [BUGGY]  int  newNumber  =  left.getNext(),  right.getNumber();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getNext(),  right.getNumber();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getNext(),  right.getNumber();	  int    newNumber    =    left.getNext().getNumber();    	non-compiled	[CE]  ';'  expected	85	None	replace
248	[BUG]  [BUGGY]  int  newNumber  =  n.getNext().getNumber();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  n.getNext().getNumber();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  n.getNext().getNumber();	  int    newNumber    =    left.getNext().getNumber();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
249	[BUG]  [BUGGY]  int  newNumber  =  left.getNext().getNumber()  -  1;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getNext().getNumber()  -  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getNext().getNumber()  -  1;	  int    newNumber    =    left.getNext().getNumber();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
250	[BUG]  [BUGGY]  int  newNumber  =  left.getNext().getNumber()  +  1;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getNext().getNumber()  +  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getNext().getNumber()  +  1;	  int    newNumber    =    left.getNext().getNumber();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
251	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  newNumber  =  Node.newNumber(2);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  newNumber  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(2);    Node  newNumber  =  Node.newNumber(2);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
252	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  newNumber  =  Node.newNumber(3);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  newNumber  =  Node.newNumber(3);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(2);    Node  newNumber  =  Node.newNumber(3);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
253	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  n  =  Node.newNumber(2);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  n  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(2);    Node  n  =  Node.newNumber(2);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
254	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  oldNumber  =  Node.newNumber(2);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  oldNumber  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(2);    Node  oldNumber  =  Node.newNumber(2);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
255	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  newNumber  =  Node.newNumber(4);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  newNumber  =  Node.newNumber(4);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(2);    Node  newNumber  =  Node.newNumber(4);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
256	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  newNumber  =  Node.newNumber(1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  newNumber  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(2);    Node  newNumber  =  Node.newNumber(1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
257	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  rvalInt  =  Node.newNumber(2);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  rvalInt  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(2);    Node  rvalInt  =  Node.newNumber(2);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
258	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right.getFirstChild());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right.getFirstChild());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right.getFirstChild());	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(left.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	106	None	replace
259	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  left.getLastChild());  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  left.getLastChild());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild(),  left.getLastChild());	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(left.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	106	None	replace
260	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild(),  right);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(left.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	106	None	replace
261	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  right,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,Node,Node,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  right,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  left,  right,  lval);	  Node    newNumber    =    Node.newNumber(result,    left,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,Node,double)	65	None	replace
262	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  n,  left,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,Node,Node,double)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  n,  left,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  n,  left,  lval);	  Node    newNumber    =    Node.newNumber(result,    left,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,Node,double)	65	None	replace
263	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  right.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  right.getFirstChild();	  Node    newNumber    =    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	11	2	replace
264	[BUG]  [BUGGY]  Node  newNumber  =  right.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  right.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  right.getFirstChild();	  Node    newNumber    =    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	11	2	replace
265	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  right.getLastChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  right.getLastChild();	  Node    newNumber    =    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	11	2	replace
266	[BUG]  [BUGGY]  Node  newNumber  =  right.getLastChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  right.getLastChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  right.getLastChild();	  Node    newNumber    =    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	11	2	replace
267	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  n.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  n.getFirstChild();	  Node    newNumber    =    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	11	2	replace
268	[BUG]  [BUGGY]  Node  newNumber  =  n.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  n.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  n.getFirstChild();	  Node    newNumber    =    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	11	2	replace
269	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rvalInt  =  Node.newNumber(lval);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rvalInt  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt);  Node  rvalInt  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rvalInt    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	89	None	replace
270	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(lval);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rvalInt    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	89	None	replace
271	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  Node  rvalInt  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  Node  rvalInt  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  Node  rvalInt  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rvalInt    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	89	None	replace
272	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  n);  Node  rvalInt  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  n);  Node  rvalInt  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  n);  Node  rvalInt  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rvalInt    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	89	None	replace
273	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(lvalInt  +  1);  [CE]  no  suitable  method  found  for  newString(int)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(rvalInt    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	54	None	replace
274	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  2);	  Node    newNumber    =    Node.newNumber(rvalInt    +    1);    	compilable	  [FE]  ComparisonFailure  	54	2	replace
275	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  2);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  2);	  Node    newNumber    =    Node.newNumber(rvalInt    +    1);    	compilable	  [FE]  ComparisonFailure  	54	2	replace
276	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(int,int,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt,  result);	  Node    newNumber    =    Node.newNumber(lvalInt,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,int,double)	55	None	replace
277	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(int,double,int)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  result,  rvalInt);	  Node    newNumber    =    Node.newNumber(lvalInt,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,double,int)	55	None	replace
278	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  MAX_FOLD_NUMBER_ERROR,  result);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  MAX_FOLD_NUMBER_ERROR,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  MAX_FOLD_NUMBER_ERROR,  result);	  Node    newNumber    =    Node.newNumber(lvalInt,    result);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	55	None	replace
279	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  lvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,int,double)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  lvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  lvalInt,  result);	  Node    newNumber    =    Node.newNumber(lvalInt,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,double)	55	None	replace
280	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  result,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double,int)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  result,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  result,  lvalInt);	  Node    newNumber    =    Node.newNumber(left,    right,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double,int)	74	None	replace
281	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  right,  left);  [CE]  no  suitable  method  found  for  newNumber(int,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  right,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  right,  left);	  Node    newNumber    =    Node.newNumber(left,    right,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,Node,Node)	74	None	replace
282	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,int,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  lvalInt,  result);	  Node    newNumber    =    Node.newNumber(left,    right,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,int,double)	74	None	replace
283	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,int,Node)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lvalInt,  right);	  Node    newNumber    =    Node.newNumber(left,    right,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,Node)	74	None	replace
284	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  lvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,int,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  lvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  right,  lvalInt,  result);	  Node    newNumber    =    Node.newNumber(left,    right,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,int,double)	74	None	replace
285	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  right);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  right);	  Node    newNumber    =    Node.newNumber(right,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	20	None	replace
286	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  right,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  right,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  right,  result);	  Node    newNumber    =    Node.newNumber(right,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	20	None	replace
287	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  newNumber  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
288	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
289	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  oldNumber  =  Node.newNumber(lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  oldNumber  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  oldNumber  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
290	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(n);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(n);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
291	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
292	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  node.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  newNumber  =  Node.newNumber(lvalInt);  node.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
293	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rval,  result);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rval,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  rval,  result);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	66	None	replace
294	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  rval);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  rval);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	66	None	replace
295	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  rval,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double,double)  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  rval,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  result,  rval,  lval);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double,double)	66	None	replace
296	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval,  result,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval,  result,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(rval,  result,  lval);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	66	None	replace
297	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rval,  left,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,double,Node,double)  [FE]                                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rval,  left,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  rval,  left,  lval);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,Node,double)	66	None	replace
298	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  lval,  rval);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double,double)  [FE]                                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result,  lval,  rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  result,  lval,  rval);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double,double)	66	None	replace
299	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,int,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lvalInt,  result);	  Node    newNumber    =    Node.newNumber(left,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,double)	102	None	replace
300	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  left);  [CE]  no  suitable  method  found  for  newNumber(int,double,Node)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  result,  left);	  Node    newNumber    =    Node.newNumber(left,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,double,Node)	102	None	replace
301	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  lvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,int,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  lvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  lvalInt,  result);	  Node    newNumber    =    Node.newNumber(left,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,int,double)	102	None	replace
302	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild(),  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild(),  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getLastChild(),  right);	  Node    newNumber    =    Node.newNumber(left.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	111	None	replace
303	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  left.getFirstChild());  [CE]  no  suitable  method  found  for  newNumber(String,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  left.getFirstChild());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString(),  left.getFirstChild());	  Node    newNumber    =    Node.newNumber(left.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String,Node)	111	None	replace
304	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild(),  result);	  Node    newNumber    =    Node.newNumber(left.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	111	None	replace
305	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  left);  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	38	None	replace
306	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  right);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  node.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	38	None	replace
307	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  node.getParent().replaceChild(n,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  node.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	38	None	replace
308	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  n);  node.getParent().replaceChild(n,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  n);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  n);  node.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	38	None	replace
309	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  Node  n  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  Node  n  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  Node  n  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    n    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	88	None	replace
310	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(lval);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    n    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	88	None	replace
311	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  Node  n  =  Node.newNumber(lval);  [CE]  cannot  find  symbol  lvalDouble  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  Node  n  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalDouble);  Node  n  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    n    =    Node.newNumber(lval);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	88	None	replace
312	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  Node  n  =  Node.newNumber(lval);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  Node  n  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result);  Node  n  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    n    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	88	None	replace
313	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  newNumber  =  Node.newNumber(rvalInt  +  1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	53	None	add
314	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  newNumber  =  Node.newNumber(lvalInt  +  1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	53	None	add
315	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  newNumber  =  Node.newNumber(rvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	53	None	add
316	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  rvalInt  =  Node.newNumber(rvalInt  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  rvalInt  =  Node.newNumber(rvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  rvalInt  =  Node.newNumber(rvalInt  +  1);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	53	None	add
317	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  oldNumber  =  Node.newNumber(rvalInt  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  oldNumber  =  Node.newNumber(rvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  oldNumber  =  Node.newNumber(rvalInt  +  1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	53	None	add
318	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  rvalInt  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  rvalInt  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  rvalInt  =  Node.newNumber(lvalInt  +  1);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	53	None	add
319	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  newNumber  =  Node.newNumber(rvalInt  +  1);  result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
320	[BUG]  [BUGGY]  int  newNumber  =  right.getFirstChild();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  right.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  right.getFirstChild();	  int    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  incompatible  types	113	None	replace
321	[BUG]  [BUGGY]  int  newNumber  =  left.getFirstChild().length;  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getFirstChild().length;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getFirstChild().length;	  int    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  length	113	None	replace
322	[BUG]  [BUGGY]  int  newNumber  =  left.getFirstChild().intValue();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getFirstChild().intValue();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getFirstChild().intValue();	  int    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
323	[BUG]  [BUGGY]  int  newNumber  =  n.getFirstChild();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  n.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  n.getFirstChild();	  int    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  incompatible  types	113	None	replace
324	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  n,  result);	  Node    newNumber    =    Node.newNumber(left,    n);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	98	None	replace
325	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(null,  left);  [CE]  no  suitable  method  found  for  newNumber(<null>,Node)  [FE]            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(null,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(null,  left);	  Node    newNumber    =    Node.newNumber(null);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(<null>,Node)	99	None	replace
326	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  null);  [CE]  no  suitable  method  found  for  newNumber(double,<null>)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  null);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  null);	  Node    newNumber    =    Node.newNumber(null);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,<null>)	99	None	replace
327	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  null);  [CE]  no  suitable  method  found  for  newNumber(double,<null>)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  null);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  null);	  Node    newNumber    =    Node.newNumber(null);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,<null>)	99	None	replace
328	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(null,  result);  [CE]  no  suitable  method  found  for  newNumber(<null>,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(null,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(null,  result);	  Node    newNumber    =    Node.newNumber(null);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(<null>,double)	99	None	replace
329	[BUG]  [BUGGY]  int  newNumber  =  right.getType();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  right.getType();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  right.getType();	  int    newNumber    =    left.getType();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	112	None	replace
330	[BUG]  [BUGGY]  int  newNumber  =  left.getType()  -  1;  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getType()  -  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getType()  -  1;	  int    newNumber    =    left.getType();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	112	None	replace
331	[BUG]  [BUGGY]  int  newNumber  =  left.getType()  +  1;  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getType()  +  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getType()  +  1;	  int    newNumber    =    left.getType();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	112	None	replace
332	[BUG]  [BUGGY]  int  newNumber  =  left.getType()  &  0xff;  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getType()  &  0xff;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getType()  &  0xff;	  int    newNumber    =    left.getType();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	112	None	replace
333	[BUG]  [BUGGY]  int  newNumber  =  left.getType()  -  2;  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getType()  -  2;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getType()  -  2;	  int    newNumber    =    left.getType();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	112	None	replace
334	[BUG]  [BUGGY]  int  newNumber  =  left.getType()  &  0xFFFF;  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getType()  &  0xFFFF;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getType()  &  0xFFFF;	  int    newNumber    =    left.getType();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	112	None	replace
335	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  left.getLastChild());  [CE]  no  suitable  method  found  for  newNumber(String,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  left.getLastChild());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString(),  left.getLastChild());	  Node    newNumber    =    Node.newNumber(left.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String,Node)	94	None	replace
336	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild(),  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	94	None	replace
337	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild(),  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getLastChild(),  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	94	None	replace
338	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  n);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  n);	  Node    newNumber    =    Node.newNumber(n);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	40	None	replace
339	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  lval,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  lval,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  lval,  result);	  Node    newNumber    =    Node.newNumber(lval,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double)	56	None	replace
340	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  MAX_FOLD_NUMBER_ERROR,  result);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  MAX_FOLD_NUMBER_ERROR,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  MAX_FOLD_NUMBER_ERROR,  result);	  Node    newNumber    =    Node.newNumber(lval,    result);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	56	None	replace
341	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  rval);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  result,  rval);	  Node    newNumber    =    Node.newNumber(lval,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	56	None	replace
342	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(rvalInt  +  2);	  Node    newNumber    =    Node.newNumber(result    +    2);    	compilable	  [FE]  ComparisonFailure  	52	2	replace
343	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  2);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(rvalInt  +  2);	  Node    newNumber    =    Node.newNumber(result    +    2);    	compilable	  [FE]  ComparisonFailure  	52	2	replace
344	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval  +  2);	  Node    newNumber    =    Node.newNumber(result    +    2);    	compilable	  [FE]  ComparisonFailure  	52	2	replace
345	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  2);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval  +  2);	  Node    newNumber    =    Node.newNumber(result    +    2);    	compilable	  [FE]  ComparisonFailure  	52	2	replace
346	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  newNumber  =  Node.newNumber(rvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  newNumber  =  Node.newNumber(rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  newNumber  =  Node.newNumber(rvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
347	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  newNumber  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
348	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  newNumber  =  Node.newNumber(rvalInt);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  newNumber  =  Node.newNumber(rvalInt);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  newNumber  =  Node.newNumber(rvalInt);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
349	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  rvalInt  =  Node.newNumber(lvalInt);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  rvalInt  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  rvalInt  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
350	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  rvalInt  =  Node.newNumber(rvalInt);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  rvalInt  =  Node.newNumber(rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  rvalInt  =  Node.newNumber(rvalInt);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
351	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  oldNumber  =  Node.newNumber(rvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  oldNumber  =  Node.newNumber(rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  oldNumber  =  Node.newNumber(rvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
352	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
353	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  result,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    right,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)	21	None	replace
354	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double,double)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  right,  result,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    right,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double,double)	21	None	replace
355	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  right,  left);  [CE]  no  suitable  method  found  for  newNumber(double,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  right,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  right,  left);	  Node    newNumber    =    Node.newNumber(left,    right,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,Node)	21	None	replace
356	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  left,  right);  [CE]  no  suitable  method  found  for  newNumber(double,int,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt,  left,  right);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,Node,Node)	58	None	replace
357	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	105	2	replace
358	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(n);  [FE]  RuntimeException  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	105	2	replace
359	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  ComparisonFailure  	105	2	replace
360	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(left);  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  ComparisonFailure  	105	2	replace
361	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(right);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  ComparisonFailure  	105	2	replace
362	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(right);  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  left.getParent().removeChild(right);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  ComparisonFailure  	105	2	replace
363	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().removeChild(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  n.getParent().removeChild(right);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	105	2	replace
364	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().removeChild(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  n.getParent().removeChild(right);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	105	2	replace
365	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.newNumber(1);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  left.newNumber(1);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	105	2	replace
366	[BUG]  [BUGGY]  Node  newNumber  =  left.newNumber(1);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.newNumber(1);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.newNumber(1);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	105	2	replace
367	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	37	2	replace
368	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	37	2	replace
369	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  right);  n.getParent().replaceChild(left,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  right);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	37	None	replace
370	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  left.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  left.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	37	2	replace
371	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  left.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  left.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  left.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	37	2	replace
372	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().replaceChild(left,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	37	None	replace
373	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	37	2	replace
374	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]                        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	37	2	replace
375	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  [CE]  cannot  find  symbol  lvalDouble  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalDouble);	  Node    newNumber    =    Node.newNumber(lvalInt);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	115	None	replace
376	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  -  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  -  1);	  Node    newNumber    =    Node.newNumber(lvalInt);    	compilable	  [FE]  ComparisonFailure  	115	2	replace
377	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  -  1);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  -  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  -  1);	  Node    newNumber    =    Node.newNumber(lvalInt);    	compilable	  [FE]  ComparisonFailure  	115	2	replace
378	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rval  =  Node.newNumber(lval);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt);  Node  rval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rval    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	86	None	replace
379	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rval  =  Node.newNumber(lval);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  rval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rval    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	86	None	replace
380	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  Node  rval  =  Node.newNumber(lval);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result);  Node  rval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rval    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	86	None	replace
381	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  Node  rval  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  Node  rval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rval    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	86	None	replace
382	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  Node  rval  =  Node.newNumber(lval);  [CE]  cannot  find  symbol  lvalDouble  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalDouble);  Node  rval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rval    =    Node.newNumber(lval);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	86	None	replace
383	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  left  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  left  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  left  =  Node.newNumber(lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    left    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	93	None	replace
384	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  left  =  Node.newNumber(result  +  1);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  left  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  left  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    left    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	93	None	replace
385	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  Node  left  =  Node.newNumber(result  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  Node  left  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right  +  1);  Node  left  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    left    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	93	None	replace
386	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    left    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	93	None	replace
387	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	34	2	replace
388	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	34	2	replace
389	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	34	2	replace
390	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  n.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	34	2	replace
391	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().replaceChild(n,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	34	None	replace
392	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval)+  1;  n.getParent().replaceChild(n,  newNumber);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval)+  1;  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval)+  1;  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	34	None	replace
393	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  3);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  3);	  Node    newNumber    =    Node.newNumber(lvalInt    +    1);    	compilable	  [FE]  ComparisonFailure  	48	2	replace
394	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  3);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  3);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  3);	  Node    newNumber    =    Node.newNumber(lvalInt    +    1);    	compilable	  [FE]  ComparisonFailure  	48	2	replace
395	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  result);	  Node    newNumber    =    Node.newNumber(left,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	16	None	replace
396	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	39	2	replace
397	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  left);  [FE]  RuntimeException  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	39	2	replace
398	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	39	2	replace
399	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	39	2	replace
400	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	39	2	replace
401	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  right);  [FE]  RuntimeException  [FE]                        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval);  n.getNext().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getNext().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	39	2	replace
402	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getNext().replaceChild(n,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  n.getNext().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	39	None	replace
403	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left,  result);  [CE]  no  suitable  method  found  for  newString(int,Node,double)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  left,  result);	  Node    newNumber    =    Node.newString(Token.NAME,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,double)	43	None	replace
404	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  right,  result);  [CE]  no  suitable  method  found  for  newString(int,Node,double)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  right,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  right,  result);	  Node    newNumber    =    Node.newString(Token.NAME,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,double)	43	None	replace
405	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  n,  result);  [CE]  no  suitable  method  found  for  newString(int,Node,double)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  n,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  n,  result);	  Node    newNumber    =    Node.newString(Token.NAME,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,double)	43	None	replace
406	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  result,  left);  [CE]  no  suitable  method  found  for  newString(int,double,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  result,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  result,  left);	  Node    newNumber    =    Node.newString(Token.NAME,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double,Node)	43	None	replace
407	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  MAX_FOLD_NUMBER,  result);  [CE]  no  suitable  method  found  for  newString(int,double,double)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  MAX_FOLD_NUMBER,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  MAX_FOLD_NUMBER,  result);	  Node    newNumber    =    Node.newString(Token.NAME,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double,double)	43	None	replace
408	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  n);  [CE]  no  suitable  method  found  for  newNumber(double,double,Node)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  result,  n);	  Node    newNumber    =    Node.newNumber(n,    result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,Node)	63	None	replace
409	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  result,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  result,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  result,  lval);	  Node    newNumber    =    Node.newNumber(n,    result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)	63	None	replace
410	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  n,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,Node,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  n,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  n,  lval);	  Node    newNumber    =    Node.newNumber(n,    result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,double)	63	None	replace
411	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  n);  [CE]  no  suitable  method  found  for  newNumber(int,double,Node)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  result,  n);	  Node    newNumber    =    Node.newNumber(n,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,double,Node)	57	None	replace
412	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  result,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double,int)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  result,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  result,  lvalInt);	  Node    newNumber    =    Node.newNumber(n,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double,int)	57	None	replace
413	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  n,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,Node,int)  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  n,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  n,  lvalInt);	  Node    newNumber    =    Node.newNumber(n,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,int)	57	None	replace
414	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right);	  Node    newNumber    =    Node.newNumber(node);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	42	None	replace
415	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  newNumber  =  Node.newNumber(rval);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  newNumber  =  Node.newNumber(rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  newNumber  =  Node.newNumber(rval);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
416	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  Node.newNumber(rval);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  Node.newNumber(rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  rval  =  Node.newNumber(rval);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
417	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  newNumber  =  Node.newNumber(rval);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  newNumber  =  Node.newNumber(rval);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  newNumber  =  Node.newNumber(rval);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
418	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  oldNumber  =  Node.newNumber(rval);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  oldNumber  =  Node.newNumber(rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  oldNumber  =  Node.newNumber(rval);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
419	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  newNumber  =  Node.newNumber(lval);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  newNumber  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  newNumber  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
420	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  newNumber  =  Node.newNumber(rval);  n.getParent().removeChild(newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  newNumber  =  Node.newNumber(rval);  n.getParent().removeChild(newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  newNumber  =  Node.newNumber(rval);  n.getParent().removeChild(newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
421	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  Node.newNumber(lval);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  rval  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
422	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  n);  [CE]  no  suitable  method  found  for  newNumber(double,double,Node)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  n);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,Node)	101	None	replace
423	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  result,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  result,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  result,  lval);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	101	None	replace
424	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  result);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  result);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	101	None	replace
425	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  Node  lval  =  Node.newNumber(lval);  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  Node  lval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result);  Node  lval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    lval    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	87	None	replace
426	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  lval  =  Node.newNumber(lval);  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  lval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  lval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    lval    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	87	None	replace
427	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n);  Node  lval  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n);  Node  lval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n);  Node  lval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    lval    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	87	None	replace
428	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  lval  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  lval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  lval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    lval    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	87	None	replace
429	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  lval  =  Node.newNumber(rval);  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  lval  =  Node.newNumber(rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(rval);  Node  lval  =  Node.newNumber(rval);	  Node    newNumber    =    Node.newNumber(lval);    Node    lval    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	87	None	replace
430	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  right.getNext();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  right.getNext();	  Node    newNumber    =    left.getNext();    	compilable	  [FE]  RuntimeException  	9	2	replace
431	[BUG]  [BUGGY]  Node  newNumber  =  right.getNext();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  right.getNext();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  right.getNext();	  Node    newNumber    =    left.getNext();    	compilable	  [FE]  RuntimeException  	9	2	replace
432	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext()  -  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.getNext()  -  1;	  Node    newNumber    =    left.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	9	None	replace
433	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext()  +  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.getNext()  +  1;	  Node    newNumber    =    left.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
434	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,int)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  lvalInt);	  Node    newNumber    =    Node.newNumber(left,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,int)	17	None	replace
435	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  rvalInt,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,int,int)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  rvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  rvalInt,  lvalInt);	  Node    newNumber    =    Node.newNumber(left,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,int)	17	None	replace
436	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  left);  [CE]  no  suitable  method  found  for  newNumber(int,Node)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  left);	  Node    newNumber    =    Node.newNumber(left,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,Node)	17	None	replace
437	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  left,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  left,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	73	None	replace
438	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER,  result);	  Node    newNumber    =    Node.newNumber(left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)	73	None	replace
439	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  n  =  Node.newNumber(result  +  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  n  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  n  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    n    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	91	None	replace
440	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  n  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  n  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  n  =  Node.newNumber(lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    n    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	91	None	replace
441	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(result  +  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    n    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	91	None	replace
442	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  n  =  Node.newNumber(result  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  n  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);  Node  n  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    n    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	91	None	replace
443	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  n  =  Node.newNumber(rvalInt  +  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  n  =  Node.newNumber(rvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  n  =  Node.newNumber(rvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    n    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	91	None	replace
444	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  newNumber  =  Node.newNumber(result  +  2);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
445	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  newNumber  =  Node.newNumber(result  +  2);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
446	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  newNumber  =  Node.newNumber(result  +  2);  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
447	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  newNumber  =  Node.newNumber(result  +  2);  result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
448	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  left.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  left.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  newNumber  =  Node.newNumber(result  +  2);  left.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
449	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  2);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  newNumber  =  Node.newNumber(result  +  2);  result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
450	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(lvalInt  +  2);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(lvalInt  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  newNumber  =  Node.newNumber(lvalInt  +  2);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
451	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(nval  +  1);  [CE]  cannot  find  symbol  nval  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(nval  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(nval  +  1);	  Node    newNumber    =    Node.newNumber(negNum    +    1);    	non-compiled	[CE]  cannot  find  symbol  nval	82	None	replace
452	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n  +  1);	  Node    newNumber    =    Node.newNumber(negNum    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	82	None	replace
453	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	120	2	replace
454	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	120	2	replace
455	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  n.getParent().removeChild(left);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right  +  1);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().removeChild(left);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	120	None	replace
456	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left,  right);  [CE]  no  suitable  method  found  for  newNumber(double,Node,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left,  right);	  Node    newNumber    =    Node.newNumber(lval,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,Node)	72	None	replace
457	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(double,Node,double)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(lval,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,double)	72	None	replace
458	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  lval);	  Node    newNumber    =    Node.newNumber(lval,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	72	None	replace
459	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(3);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(3);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(2);    	compilable	  [FE]  ComparisonFailure  	32	2	replace
460	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(3);  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(3);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(3);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(2);    	compilable	  [FE]  ComparisonFailure  	32	2	replace
461	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt  +  1);  [CE]  no  suitable  method  found  for  newNumber(int,int)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt  +  1);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(lvalInt    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,int)	31	None	replace
462	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  right,  left);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  right,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  right,  left);	  Node    newNumber    =    Node.newNumber(n,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node)	19	None	replace
463	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(int,int)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0,  lvalInt);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(0,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,int)	29	None	replace
464	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(int,int)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  lvalInt);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(0,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,int)	29	None	replace
465	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(int,int)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(1,  lvalInt);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(0,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,int)	29	None	replace
466	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1L,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(long,int)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1L,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(1L,  lvalInt);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(0,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(long,int)	29	None	replace
467	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  nvalInt  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  Node  nvalInt  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	78	2	replace
468	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  nvalInt  =  Node.newNumber(0);  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  nvalInt  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  nvalInt  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	78	2	replace
469	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	78	None	replace
470	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  nvalInt  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  Node  nvalInt  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	78	2	replace
471	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  nvalInt  =  Node.newNumber(1);  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  nvalInt  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  nvalInt  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	78	2	replace
472	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  node  rvalInt  =  Node.newNumber(1);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  node  rvalInt  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  node  rvalInt  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
473	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getNext();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  left  =  left.getNext();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
474	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  newNumber  =  left.getNext();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  newNumber  =  left.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
475	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  oldNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  oldNumber  =  left.getNext();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  oldNumber  =  left.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
476	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  right.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  right.getNext();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  left  =  right.getNext();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
477	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  right  =  left.getNext();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  right  =  left.getNext();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
478	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  newNumber  =  left.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
479	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  n  =  left.getNext();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
480	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right  +  1);	  Node    newNumber    =    Node.newNumber(left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	81	None	replace
481	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left  +  1);	  Node    newNumber    =    Node.newNumber(left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	81	None	replace
482	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.length  +  1);  [CE]  cannot  find  symbol  length  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.length  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.length  +  1);	  Node    newNumber    =    Node.newNumber(left    +    1);    	non-compiled	[CE]  cannot  find  symbol  length	81	None	replace
483	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLowerCase()  +  1);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLowerCase()  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getLowerCase()  +  1);	  Node    newNumber    =    Node.newNumber(left    +    1);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
484	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  n,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  n,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  n,  result);	  Node    newNumber    =    Node.newNumber(left,    right,    n);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)	75	None	replace
485	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(int,double,int)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  result,  lvalInt);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,double,int)	104	None	replace
486	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  result,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,double,int)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  result,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  result,  lvalInt);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,int)	104	None	replace
487	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(double,int,double)  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt,  result);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,double)	104	None	replace
488	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  n);  [CE]  no  suitable  method  found  for  newNumber(double,int,Node)  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt,  n);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,Node)	104	None	replace
489	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  lval);	  Node    newNumber    =    Node.newNumber(resultDouble,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	118	None	replace
490	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(rval,  lval);	  Node    newNumber    =    Node.newNumber(resultDouble,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double)	118	None	replace
491	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  lval);  [CE]  cannot  find  symbol  negNum  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum,  lval);	  Node    newNumber    =    Node.newNumber(resultDouble,    lval);    	non-compiled	[CE]  cannot  find  symbol  negNum	118	None	replace
492	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  right,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  right,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  n,  right,  result);	  Node    newNumber    =    Node.newNumber(left,    n,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)	26	None	replace
493	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  left,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  n,  left,  right);	  Node    newNumber    =    Node.newNumber(left,    n,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,Node)	26	None	replace
494	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  right,  left);  [CE]  no  suitable  method  found  for  newNumber(double,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  right,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  right,  left);	  Node    newNumber    =    Node.newNumber(left,    right,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,Node)	25	None	replace
495	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  result,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  result,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  result,  lval);	  Node    newNumber    =    Node.newNumber(left,    right,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)	25	None	replace
496	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lval,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lval,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  lval,  result);	  Node    newNumber    =    Node.newNumber(left,    right,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)	25	None	replace
497	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lval,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lval,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  lval,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    right,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)	25	None	replace
498	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  left);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild(),  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild(),  left);	  Node    newNumber    =    Node.newNumber(left.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	94	None	replace
499	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  oldNumber  =  Node.newNumber(result  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  oldNumber  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);  Node  oldNumber  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    oldNumber    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	5	None	replace
500	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  oldNumber  =  Node.newNumber(right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  oldNumber  =  Node.newNumber(right  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);  Node  oldNumber  =  Node.newNumber(right  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    oldNumber    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	5	None	replace
501	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result  +  1);  Node  oldNumber  =  Node.newNumber(result  +  1);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result  +  1);  Node  oldNumber  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result  +  1);  Node  oldNumber  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    oldNumber    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	5	None	replace
502	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result  +  1);  Node  oldNumber  =  Node.newNumber(oldNumber);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result  +  1);  Node  oldNumber  =  Node.newNumber(oldNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result  +  1);  Node  oldNumber  =  Node.newNumber(oldNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    oldNumber    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	5	None	replace
503	[BUG]  [BUGGY]  int  newNumber  =  left.getFirstChild()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getFirstChild()  -  1;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getFirstChild()  -  1;	  int    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	113	None	replace
504	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(null  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(null  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(null  +  1);	  Node    newNumber    =    Node.newNumber(negNum    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	82	None	replace
505	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  right,  lval);  [CE]  no  suitable  method  found  for  newString(int,Node,double)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  right,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  right,  lval);	  Node    newNumber    =    Node.newString(Token.NAME,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,double)	116	None	replace
506	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left,  val);  [CE]  cannot  find  symbol  val  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left,  val);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  left,  val);	  Node    newNumber    =    Node.newString(Token.NAME,    lval);    	non-compiled	[CE]  cannot  find  symbol  val	116	None	replace
507	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double)  [FE]            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double)	16	None	replace
508	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left);	  Node    newNumber    =    Node.newNumber(null);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	99	None	replace
509	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  null);  [CE]  no  suitable  method  found  for  newNumber(Node,<null>)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  null);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  null);	  Node    newNumber    =    Node.newNumber(null);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,<null>)	99	None	replace
510	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  n  =  Node.newNumber(2);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  n  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  n  =  Node.newNumber(2);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
511	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  rvalInt  =  Node.newNumber(2);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  rvalInt  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  rvalInt  =  Node.newNumber(2);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
512	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  n  =  Node.newNumber(1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  n  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  n  =  Node.newNumber(1);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
513	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  rvalInt  =  Node.newNumber(1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  rvalInt  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  rvalInt  =  Node.newNumber(1);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
514	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  rvalInt  =  Node.newNumber(0);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  rvalInt  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  rvalInt  =  Node.newNumber(0);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
515	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  left  =  Node.newNumber(right);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  left  =  Node.newNumber(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  left  =  Node.newNumber(right);	  Node    newNumber    =    Node.newNumber(lval);    Node    left    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	90	None	replace
516	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  left  =  Node.newNumber(right);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  left  =  Node.newNumber(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  left  =  Node.newNumber(right);	  Node    newNumber    =    Node.newNumber(lval);    Node    left    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	90	None	replace
517	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  n,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  n,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  n,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    right,    n);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)	75	None	replace
518	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  n);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  right,  n);	  Node    newNumber    =    Node.newNumber(left,    right,    n);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,Node)	75	None	replace
519	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getNext());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getNext());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getNext());	  Node    newNumber    =    Node.newNumber(left.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	111	None	replace
520	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  Node  lval  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  Node  lval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right);  Node  lval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    lval    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	87	None	replace
521	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  lval  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  lval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right);  Node  lval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    lval    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	87	None	replace
522	[BUG]  [BUGGY]  Node  n  =  left.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  left.getParent();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  left.getParent();	  Node    n    =    left.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	84	None	replace
523	[BUG]  [BUGGY]  Node  n  =  left.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  left.removeFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  left.removeFirstChild();	  Node    n    =    left.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	84	None	replace
524	[BUG]  [BUGGY]  n.getNext().removeChild(right);  [CE]  cannot  find  symbol  newNumber  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  n.getNext().removeChild(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	n.getNext().removeChild(right);	  n.getParent().removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  newNumber	15	None	replace
525	[BUG]  [BUGGY]  node.getParent().removeChild(left);  [CE]  cannot  find  symbol  node  [FE]                                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  node.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	node.getParent().removeChild(left);	  n.getParent().removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  node	15	None	replace
526	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(1);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	79	None	replace
527	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  oldNumber  =  Node.newNumber(1);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  oldNumber  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right);  Node  oldNumber  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	79	None	replace
528	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  node.getParent().replaceChild(n,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  node.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	38	None	replace
529	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  node.getParent().replaceChild(n,  right);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  node.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  node.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	38	None	replace
530	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  right,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double,Node,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  right,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result,  right,  lval);	  Node    newNumber    =    Node.newNumber(left,    result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,Node,double)	100	None	replace
531	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  val,  result);  [CE]  cannot  find  symbol  val  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  val,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  val,  result);	  Node    newNumber    =    Node.newNumber(left,    result,    lval);    	non-compiled	[CE]  cannot  find  symbol  val	100	None	replace
532	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  lval,  rval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  lval,  rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  lval,  rval);	  Node    newNumber    =    Node.newNumber(left,    result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)	100	None	replace
533	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.removeFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  left.removeFirstChild();	  Node    newNumber    =    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	11	2	replace
534	[BUG]  [BUGGY]  Node  newNumber  =  left.removeFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.removeFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.removeFirstChild();	  Node    newNumber    =    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	11	2	replace
535	[BUG]  [BUGGY]  int  newNumber  =  left.getLastChild().getNext().getString();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getLastChild().getNext().getString();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getLastChild().getNext().getString();	  int    newNumber    =    left.getLastChild().getString();    	non-compiled	[CE]  incompatible  types	12	None	replace
536	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  rval  =  Node.newNumber(lval  +  1);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  rval  =  Node.newNumber(lval  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  rval  =  Node.newNumber(lval  +  1);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
537	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  lval  =  Node.newNumber(lval  +  1);  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  lval  =  Node.newNumber(lval  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  lval  =  Node.newNumber(lval  +  1);	  	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
538	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  left  =  Node.newNumber(lval  +  1);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  left  =  Node.newNumber(lval  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  left  =  Node.newNumber(lval  +  1);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
539	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  n  =  Node.newNumber(lval  +  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  n  =  Node.newNumber(lval  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  n  =  Node.newNumber(lval  +  1);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
540	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  rval  =  Node.newNumber(lval);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  rval  =  Node.newNumber(lval);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
541	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  rval  =  Node.newString(lval);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  rval  =  Node.newString(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  rval  =  Node.newString(lval);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
542	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  rvalInt  =  Node.newNumber(rvalInt  +  2);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  rvalInt  =  Node.newNumber(rvalInt  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  rvalInt  =  Node.newNumber(rvalInt  +  2);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	53	None	add
543	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  rvalInt  =  NodeUtil.newNumber(rvalInt  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  rvalInt  =  NodeUtil.newNumber(rvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  rvalInt  =  NodeUtil.newNumber(rvalInt  +  1);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	53	None	add
544	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  left  =  Node.newNumber(rvalInt  +  1);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  left  =  Node.newNumber(rvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  left  =  Node.newNumber(rvalInt  +  1);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	53	None	add
545	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,int)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  right,  lvalInt);	  Node    newNumber    =    Node.newNumber(left,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,int)	102	None	replace
546	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  lvalInt,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double,int,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result,  lvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,int,double)	102	None	replace
547	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  right,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,double,Node,int)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  right,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result,  right,  lvalInt);	  Node    newNumber    =    Node.newNumber(left,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,Node,int)	102	None	replace
548	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  rvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,int,double)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  rvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  rvalInt,  result);	  Node    newNumber    =    Node.newNumber(left,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,double)	102	None	replace
549	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1  -  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  +  1  -  result);	  Node    newNumber    =    Node.newNumber(lvalInt    +    1);    	compilable	  [FE]  ComparisonFailure  	48	2	replace
550	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1  -  result);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1  -  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1  -  result);	  Node    newNumber    =    Node.newNumber(lvalInt    +    1);    	compilable	  [FE]  ComparisonFailure  	48	2	replace
551	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  node.getParent().replaceChild(n,  newNumber);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);  node.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	6	None	replace
552	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  node.getParent().replaceChild(n,  left);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  node.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result);  node.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	6	None	replace
553	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  rvalInt  =  Node.newString(result,  rvalInt,  lvalInt);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  rvalInt  =  Node.newString(result,  rvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  rvalInt  =  Node.newString(result,  rvalInt,  lvalInt);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
554	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  rvalInt  =  Node.newNumber(result,  lvalInt,  lvalInt);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  rvalInt  =  Node.newNumber(result,  lvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  rvalInt  =  Node.newNumber(result,  lvalInt,  lvalInt);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
555	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  rval  =  Node.newNumber(result,  rvalInt,  lvalInt);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  rval  =  Node.newNumber(result,  rvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  rval  =  Node.newNumber(result,  rvalInt,  lvalInt);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
556	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,int)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  n,  lvalInt);	  Node    newNumber    =    Node.newNumber(n,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,int)	57	None	replace
557	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  2);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  2);	  Node    newNumber    =    Node.newNumber(left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	81	None	replace
558	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1  -  left);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1  -  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1  -  left);	  Node    newNumber    =    Node.newNumber(left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	81	None	replace
559	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1  -  result);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1  -  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1  -  result);	  Node    newNumber    =    Node.newNumber(left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	81	None	replace
560	[BUG]  [BUGGY]  int  newNumber  =  left,  right.getFirstChild().getNumber();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left,  right.getFirstChild().getNumber();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left,  right.getFirstChild().getNumber();	  int    newNumber    =    left.getFirstChild().getNumber();    	non-compiled	[CE]  ';'  expected	13	None	replace
561	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right.getString(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(String,double)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right.getString(),  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right.getString(),  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String,double)	110	None	replace
562	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  left);  [CE]  no  suitable  method  found  for  newNumber(String,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString(),  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString(),  left);	  Node    newNumber    =    Node.newNumber(left.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String,Node)	110	None	replace
563	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lvalInt,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,int,double)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  lvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(right,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,double)	18	None	replace
564	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt  >>  >  rvalInt;  break;	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
565	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  result  =  lvalDouble  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  result  =  lvalDouble  >>  >  rvalInt;  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result);  result  =  lvalDouble  >>  >  rvalInt;  break;	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
566	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  n,  lval);	  Node    newNumber    =    Node.newNumber(n,    result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	63	None	replace
567	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lvalInt,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,int,double)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  lvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,int,double)	73	None	replace
568	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER,  lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  MAX_FOLD_NUMBER,  lval);	  Node    newNumber    =    Node.newNumber(left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double,double)	73	None	replace
569	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getNext().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  left.getNext().removeChild(left);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	105	2	replace
570	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getNext().removeChild(left);  [FE]  RuntimeException  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getNext().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  left.getNext().removeChild(left);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	105	2	replace
571	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getNext().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  n.getNext().removeChild(left);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	105	2	replace
572	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getNext().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  n.getNext().removeChild(left);	  Node    newNumber    =    Node.newNumber(0);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	105	2	replace
573	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  negNum);  [CE]  cannot  find  symbol  negNum  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  result,  negNum);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  result,  negNum);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lvalInt);    	non-compiled	[CE]  cannot  find  symbol  negNum	104	None	replace
574	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  left,  lvalInt);  [CE]  cannot  find  symbol  negNum  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  left,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum,  left,  lvalInt);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lvalInt);    	non-compiled	[CE]  cannot  find  symbol  negNum	104	None	replace
575	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  left  =  Node.newNumber(2);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  left  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(2);    Node  left  =  Node.newNumber(2);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
576	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  rvalInt  =  Node.newNumber(1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(2);  Node  rvalInt  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(2);    Node  rvalInt  =  Node.newNumber(1);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
577	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  rval  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  rval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rval    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	86	None	replace
578	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left);  Node  rval  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left);  Node  rval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rval    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	86	None	replace
579	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  rval  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right);  Node  rval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rval    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	86	None	replace
580	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval);  Node  rval  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval);  Node  rval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lval);  Node  rval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rval    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	86	None	replace
581	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER,  left);  [CE]  no  suitable  method  found  for  newNumber(double,int,double,Node)  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt,  MAX_FOLD_NUMBER,  left);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,double,Node)	61	None	replace
582	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  lvalInt,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  negNum  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum,  lvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  cannot  find  symbol  negNum	61	None	replace
583	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  left,  lval);  [CE]  cannot  find  symbol  negNum  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  left,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum,  left,  lval);	  Node    newNumber    =    Node.newNumber(result,    lval,    left);    	non-compiled	[CE]  cannot  find  symbol  negNum	62	None	replace
584	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	97	None	replace
585	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  MAX_FOLD_NUMBER,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  MAX_FOLD_NUMBER,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right,  MAX_FOLD_NUMBER,  result);	  Node    newNumber    =    Node.newNumber(right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double)	97	None	replace
586	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(left);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	117	None	replace
587	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(right);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(right);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	117	None	replace
588	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval);  n.getParent().removeChild(left);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lval);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	117	None	replace
589	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(lval);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(lval);	  Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	117	None	replace
590	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  rvalInt  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  rvalInt  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  rvalInt  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rvalInt    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	89	None	replace
591	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left);  Node  rvalInt  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left);  Node  rvalInt  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left);  Node  rvalInt  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rvalInt    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	89	None	replace
592	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval);  Node  rvalInt  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval);  Node  rvalInt  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lval);  Node  rvalInt  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    rvalInt    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	89	None	replace
593	[BUG]  [BUGGY]  int  newNumber  =  left,  right.getNext().getNumber();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left,  right.getNext().getNumber();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left,  right.getNext().getNumber();	  int    newNumber    =    left.getNext().getNumber();    	non-compiled	[CE]  ';'  expected	85	None	replace
594	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  n.getParent().removeChild(left);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().removeChild(left);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	120	None	replace
595	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getNext().replaceChild(n,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  n.getNext().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	39	None	replace
596	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(n);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(n);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	36	None	replace
597	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  left);  [CE]  no  suitable  method  found  for  newNumber(double,double,double,Node)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  MAX_FOLD_NUMBER,  left);	  Node    newNumber    =    Node.newNumber(result,    lval,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double,Node)	64	None	replace
598	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  left,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(double,double,Node,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  left,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  left,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lval,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,Node,double)	64	None	replace
599	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  left,  lval,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  negNum  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  left,  lval,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum,  left,  lval,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lval,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  cannot  find  symbol  negNum	64	None	replace
600	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  n  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  n  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  n  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    n    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	88	None	replace
601	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left);  Node  n  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left);  Node  n  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left);  Node  n  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    n    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	88	None	replace
602	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  n  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  n  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right);  Node  n  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    n    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	88	None	replace
603	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval);  Node  n  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval);  Node  n  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lval);  Node  n  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    n    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	88	None	replace
604	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  NodeUtil.newNumber(rval);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  NodeUtil.newNumber(rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  rval  =  NodeUtil.newNumber(rval);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
605	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rvalNode  =  Node.newNumber(rval);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rvalNode  =  Node.newNumber(rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  rvalNode  =  Node.newNumber(rval);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
606	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  left  =  Node.newNumber(rval);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  left  =  Node.newNumber(rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  left  =  Node.newNumber(rval);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
607	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  Node.newString(rval);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  Node.newString(rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  rval  =  Node.newString(rval);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
608	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  Node  left  =  Node.newNumber(left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  Node  left  =  Node.newNumber(left  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right  +  1);  Node  left  =  Node.newNumber(left  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    left    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	93	None	replace
609	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  ComparisonFailure  	41	2	replace
610	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER);  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  ComparisonFailure  	41	2	replace
611	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.min(result,  MAX_FOLD_NUMBER));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(Math.min(result,  MAX_FOLD_NUMBER));	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  AssertionFailedError  	41	1	replace
612	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(Math.min(result,  MAX_FOLD_NUMBER));  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.min(result,  MAX_FOLD_NUMBER));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(Math.min(result,  MAX_FOLD_NUMBER));	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  AssertionFailedError  	41	1	replace
613	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  left.getParent().replaceChild(n,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  left.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right);  left.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	4	None	replace
614	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  left.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
615	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  left.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  left.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
616	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result);  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
617	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  left.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result);  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
618	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  left.getParent().replaceChild(n,  right);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  left.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right);  left.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	4	None	replace
619	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(0);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	80	None	replace
620	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(oldNumber);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(oldNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(oldNumber);	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	80	None	replace
621	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  n.getParent().replaceChild(left,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	37	None	replace
622	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  n.getParent().replaceChild(left,  right);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  n.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right);  n.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	37	None	replace
623	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(left,  right);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(left,  right);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	37	None	replace
624	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left);  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  left);	  Node    newNumber    =    Node.newString(Token.NAME,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	43	None	replace
625	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left,  lvalInt);  [CE]  no  suitable  method  found  for  newString(int,Node,int)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  left,  lvalInt);	  Node    newNumber    =    Node.newString(Token.NAME,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,int)	43	None	replace
626	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  lvalInt,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,int,double)  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  lvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    right,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,int,double)	74	None	replace
627	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  rvalInt  =  Node.newNumber(result  +  2);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  rvalInt  =  Node.newNumber(result  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  rvalInt  =  Node.newNumber(result  +  2);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
628	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  n  =  Node.newNumber(result  +  2);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  n  =  Node.newNumber(result  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  n  =  Node.newNumber(result  +  2);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
629	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  left  =  Node.newNumber(result  +  2);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  left  =  Node.newNumber(result  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  left  =  Node.newNumber(result  +  2);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
630	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  oldNumber  =  Node.newNumber(result  +  2);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  oldNumber  =  Node.newNumber(result  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  oldNumber  =  Node.newNumber(result  +  2);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
631	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  rvalInt  =  Node.newNumber(result  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  rvalInt  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  rvalInt  =  Node.newNumber(result  +  1);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
632	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  rvalInt  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  rvalInt  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  rvalInt  =  Node.newNumber(lvalInt  +  1);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
633	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,int,int)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lvalInt,  rvalInt);	  Node    newNumber    =    Node.newNumber(lval,    rvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,int)	71	None	replace
634	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  n  =  Node.newNumber(right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  n  =  Node.newNumber(right  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);  Node  n  =  Node.newNumber(right  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    n    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	91	None	replace
635	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result  +  1);  Node  n  =  Node.newNumber(result  +  1);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result  +  1);  Node  n  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result  +  1);  Node  n  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    n    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	91	None	replace
636	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt  +  1);  [CE]  no  suitable  method  found  for  newNumber(Node,int)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(lvalInt    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int)	31	None	replace
637	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  MAX_FOLD_NUMBER,  result);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  MAX_FOLD_NUMBER,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  MAX_FOLD_NUMBER,  result);	  Node    newNumber    =    Node.newNumber(lval,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	56	None	replace
638	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rvalInt  =  Node.newNumber(lvalInt);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rvalInt  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  rvalInt  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
639	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  n  =  Node.newNumber(lvalInt);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  n  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  n  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
640	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  left  =  Node.newNumber(lvalInt);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  left  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  left  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
641	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rvalInt  =  Node.newString(lvalInt);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rvalInt  =  Node.newString(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  rvalInt  =  Node.newString(lvalInt);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
642	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rval  =  Node.newNumber(lvalInt);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rval  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  rval  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
643	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(n,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	34	None	replace
644	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  rvalDouble  =  Node.newNumber(rvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  rvalDouble  =  Node.newNumber(rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  rvalDouble  =  Node.newNumber(rvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
645	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  rval  =  Node.newNumber(rvalInt);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  rval  =  Node.newNumber(rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  rval  =  Node.newNumber(rvalInt);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
646	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  left  =  Node.newNumber(rvalInt);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  left  =  Node.newNumber(rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  left  =  Node.newNumber(rvalInt);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
647	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  *  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result  *  2);	  Node    newNumber    =    Node.newNumber(result    +    2);    	compilable	  [FE]  ComparisonFailure  	52	2	replace
648	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  *  2);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  *  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result  *  2);	  Node    newNumber    =    Node.newNumber(result    +    2);    	compilable	  [FE]  ComparisonFailure  	52	2	replace
649	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  /  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result  /  2);	  Node    newNumber    =    Node.newNumber(result    +    2);    	compilable	  [FE]  ComparisonFailure  	52	2	replace
650	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  /  2);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  /  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result  /  2);	  Node    newNumber    =    Node.newNumber(result    +    2);    	compilable	  [FE]  ComparisonFailure  	52	2	replace
651	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalDouble,  lvalInt);  [CE]  cannot  find  symbol  lvalDouble  [FE]    AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalDouble,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalDouble,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	60	None	replace
652	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	compilable	  [FE]  ComparisonFailure  	60	2	replace
653	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt,  rvalInt);  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  rvalInt,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	compilable	  [FE]  ComparisonFailure  	60	2	replace
654	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,int,int)  [FE]        AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lvalInt,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,int)	60	None	replace
655	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getFirstChild();  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getFirstChild();  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  left  =  left.getFirstChild();  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
656	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getLastChild();  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getLastChild();  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  left  =  left.getLastChild();  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
657	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getFirstChild();  n.getNext().replaceChild(left,  newNumber);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getFirstChild();  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  left  =  left.getFirstChild();  n.getNext().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
658	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getFirstChild();  n.getParent().removeChild(left);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getFirstChild();  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  left  =  left.getFirstChild();  n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
659	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getFirstChild();  n.getLastChild().removeChild(left);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  left  =  left.getFirstChild();  n.getLastChild().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  left  =  left.getFirstChild();  n.getLastChild().removeChild(left);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
660	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  n,  right,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  n,  right,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    n,    right);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,Node,double)	26	None	replace
661	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(double,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lvalDouble);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double)	119	None	replace
662	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  rval,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,Node,double,double)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  rval,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  left,  rval,  lval);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,double,double)	66	None	replace
663	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  result,  rval,  lval);  [CE]  cannot  find  symbol  negNum  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  result,  rval,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum,  result,  rval,  lval);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  cannot  find  symbol  negNum	66	None	replace
664	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  lval,  rval);  [CE]  no  suitable  method  found  for  newNumber(Node,double,double,double)  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  lval,  rval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result,  lval,  rval);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,double,double)	66	None	replace
665	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  left  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
666	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getNext();  n.getParent().removeChild(left);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getNext();  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  left  =  left.getNext();  n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
667	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  left  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
668	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  break;  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  break;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  left  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  break;	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
669	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  left  =  left.getFirstChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
670	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  n.getParent().replaceChild(n,  newNumber);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
671	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
672	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  n.getParent().replaceChild(n,  right);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
673	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
674	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
675	[BUG]  [BUGGY]  int  newNumber  =  left.getType()  &  MAX_FOLD_NUMBER;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getType()  &  MAX_FOLD_NUMBER;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getType()  &  MAX_FOLD_NUMBER;	  int    newNumber    =    left.getType();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	112	None	replace
676	[BUG]  [BUGGY]  int  newNumber  =  left.getType(),  MAX_FOLD_NUMBER;  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getType(),  MAX_FOLD_NUMBER;  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getType(),  MAX_FOLD_NUMBER;	  int    newNumber    =    left.getType();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	112	None	replace
677	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  node);  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  node);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  node);	  Node    newNumber    =    Node.newNumber(n,    left);    	non-compiled	[CE]  cannot  find  symbol  node	19	None	replace
678	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  result);	  Node    newNumber    =    Node.newNumber(right,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,double)	20	None	replace
679	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(left);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  n  =  Node.newNumber(left);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	77	None	replace
680	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  n  =  Node.newNumber(1);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  n  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  n  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	77	None	replace
681	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  n  =  Node.newNumber(1);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  n  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right);  Node  n  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	77	None	replace
682	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  negNum,  lval);  [CE]  cannot  find  symbol  negNum  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  negNum,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  negNum,  lval);	  Node    newNumber    =    Node.newNumber(left,    right,    lval);    	non-compiled	[CE]  cannot  find  symbol  negNum	25	None	replace
683	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  negNum);  [CE]  cannot  find  symbol  negNum  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  result,  negNum);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  result,  negNum);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lval);    	non-compiled	[CE]  cannot  find  symbol  negNum	101	None	replace
684	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  n  =  Node.newNumber(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  n  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(1);  Node  n  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	76	None	replace
685	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(2);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(2);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	78	None	replace
686	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  lvalInt  =  Node.newNumber(1);  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  lvalInt  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  lvalInt  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	78	None	replace
687	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,int,double)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,double)	17	None	replace
688	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newString(lvalInt  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  rvalInt  =  Node.newString(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt    +    1);    Node  rvalInt  =  Node.newString(lvalInt  +  1);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	47	None	add
689	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  lvalInt  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  lvalInt  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt    +    1);    Node  lvalInt  =  Node.newNumber(lvalInt  +  1);	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	47	None	add
690	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(left,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	3	None	replace
691	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  n.getParent().replaceChild(left,  newNumber);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);  n.getParent().replaceChild(left,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
692	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  left.newNumber(2);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
693	[BUG]  [BUGGY]  Node  newNumber  =  left.newNumber(2);  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.newNumber(2);	  Node    newNumber    =    node.newNumber(0);    	compilable	  [FE]  ComparisonFailure  	46	2	replace
694	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  0);  [CE]  no  suitable  method  found  for  newNumber(Node,int)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  0);	  Node    newNumber    =    Node.newNumber(left,    MAX_FOLD_NUMBER_ERROR);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int)	96	None	replace
695	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  oldNumber  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    oldNumber    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	35	None	replace
696	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left);  Node  oldNumber  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left);  Node  oldNumber  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left);  Node  oldNumber  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    oldNumber    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	35	None	replace
697	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  oldNumber  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  Node  oldNumber  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right);  Node  oldNumber  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    oldNumber    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	35	None	replace
698	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  Node  oldNumber  =  Node.newNumber(lval);  [CE]  no  suitable  method  found  for  newNumber(double,Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left);  Node  oldNumber  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left);  Node  oldNumber  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    oldNumber    =    Node.newNumber(lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node)	35	None	replace
699	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  rvalInt  =  Node.newNumber(right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  rvalInt  =  Node.newNumber(right  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);  Node  rvalInt  =  Node.newNumber(right  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    rvalInt    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	92	None	replace
700	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(rvalInt);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(rvalInt);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    rvalInt    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	92	None	replace
701	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  rvalInt  =  Node.newNumber(result  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  +  1);  Node  rvalInt  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  +  1);  Node  rvalInt  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    rvalInt    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	92	None	replace
702	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(result);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(0);  Node  rvalInt  =  Node.newNumber(result);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    rvalInt    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	92	None	replace
703	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,double,int)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  result,  rvalInt);	  Node    newNumber    =    Node.newNumber(result,    left,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,int)	103	None	replace
704	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(double,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(lval,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double)	56	None	replace
705	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left.getString(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,String,double)  [FE]            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left.getString(),  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left.getString(),  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,String,double)	95	None	replace
706	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left.getLineno(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,int,double)  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left.getLineno(),  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left.getLineno(),  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int,double)	95	None	replace
707	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalDouble);  [CE]  cannot  find  symbol  rvalDouble  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  rvalDouble);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  rvalDouble);	  Node    newNumber    =    Node.newNumber(lval,    rvalInt);    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	71	None	replace
708	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  right,  left);  [CE]  no  suitable  method  found  for  newNumber(double,int,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lvalInt,  right,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lvalInt,  right,  left);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,int,Node,Node)	58	None	replace
709	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(double,Node,int)  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval,  left,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval,  left,  lvalInt);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,int)	58	None	replace
710	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  lvalInt);  [CE]  no  suitable  method  found  for  newString(int,int)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  lvalInt);	  Node    newNumber    =    Node.newNumber(rvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,int)	70	None	replace
711	[BUG]  [BUGGY]  Node  n  =  Node.newNumber(result);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  Node.newNumber(result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  Node.newNumber(result);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    n    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	91	None	replace
712	[BUG]  [BUGGY]  Node  n  =  Node.newNumber(result  +  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    n    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	91	None	replace
713	[BUG]  [BUGGY]  Node  n  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  Node.newNumber(lvalInt  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    n    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	91	None	replace
714	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getParent();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  left.getParent();	  Node    newNumber    =    left.getNext();    	compilable	  [FE]  RuntimeException  	9	2	replace
715	[BUG]  [BUGGY]  Node  newNumber  =  left.getParent();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getParent();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  left.getParent();	  Node    newNumber    =    left.getNext();    	compilable	  [FE]  RuntimeException  	9	2	replace
716	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  rvalDouble  =  Node.newNumber(lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt);  Node  rvalDouble  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt);    Node  rvalDouble  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	add
717	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  nvalInt  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt);  Node  nvalInt  =  Node.newNumber(lvalInt);	  Node    newNumber    =    Node.newNumber(lval);    Node    rvalInt    =    Node.newNumber(lval);    	compilable	  [FE]  ComparisonFailure  	89	2	replace
718	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  nvalInt  =  Node.newNumber(lvalInt);  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  nvalInt  =  Node.newNumber(lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt);  Node  nvalInt  =  Node.newNumber(lvalInt);	  Node    newNumber    =    Node.newNumber(lval);    Node    rvalInt    =    Node.newNumber(lval);    	compilable	  [FE]  ComparisonFailure  	89	2	replace
719	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(right,  newNumber);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  left.replaceChild(right,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  left.replaceChild(right,  newNumber);	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	83	None	replace
720	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble  +  1);  [CE]  cannot  find  symbol  resultDouble  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(resultDouble  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  cannot  find  symbol  resultDouble	1	None	replace
721	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	120	2	replace
722	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result  +  1);  n.getParent().removeChild(left);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	120	2	replace
723	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(int,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(lvalInt,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,double)	55	None	replace
724	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt,  result);  [CE]  no  suitable  method  found  for  newNumber(int,double)  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt,  result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(rvalInt,  result);	  Node    newNumber    =    Node.newNumber(lvalInt,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,double)	55	None	replace
725	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  lvalInt,  rvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,Node,int,int)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  lvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  lvalInt,  rvalInt);	  Node    newNumber    =    Node.newNumber(left,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node,int,int)	102	None	replace
726	[BUG]  [BUGGY]  Integer  newNumber  =  left.getLastChild().getString();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Integer  newNumber  =  left.getLastChild().getString();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Integer  newNumber  =  left.getLastChild().getString();	  int    newNumber    =    left.getLastChild().getString();    	non-compiled	[CE]  incompatible  types	12	None	replace
727	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lvalDouble);  [CE]  cannot  find  symbol  lvalDouble  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  lvalDouble);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  lvalDouble);	  Node    newNumber    =    Node.newNumber(left,    right,    lvalInt);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	74	None	replace
728	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble,  lval,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  resultDouble  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble,  lval,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(resultDouble,  lval,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lval,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  cannot  find  symbol  resultDouble	64	None	replace
729	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  lval,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  negNum  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  lval,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum,  lval,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lval,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  cannot  find  symbol  negNum	64	None	replace
730	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  n.getParent().removeChild(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
731	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  3);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result  +  2);  Node  newNumber  =  Node.newNumber(result  +  3);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result    +    2);    Node  newNumber  =  Node.newNumber(result  +  3);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	add
732	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  rvalDouble  =  Node.newNumber(rvalInt  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt  +  1);  Node  rvalDouble  =  Node.newNumber(rvalInt  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rvalInt    +    1);    Node  rvalDouble  =  Node.newNumber(rvalInt  +  1);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	53	None	add
733	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  2);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval  +  1);  Node  newNumber  =  Node.newNumber(lval  +  2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lval    +    1);    Node  newNumber  =  Node.newNumber(lval  +  2);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	49	None	add
734	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum);  Node  lval  =  Node.newNumber(lval);  [CE]  cannot  find  symbol  negNum  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(negNum);  Node  lval  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum);  Node  lval  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    lval    =    Node.newNumber(lval);    	non-compiled	[CE]  cannot  find  symbol  negNum	87	None	replace
735	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  rvalInt  =  Node.newNumber(1);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  rvalInt  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  rvalInt  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	78	None	replace
736	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  rvalInt  =  Node.newNumber(0);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  rvalInt  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  rvalInt  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	78	None	replace
737	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString());  Node  rvalInt  =  Node.newNumber(0);  [CE]  no  suitable  method  found  for  newNumber(String)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString());  Node  rvalInt  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString());  Node  rvalInt  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String)	78	None	replace
738	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild());  Node  rvalInt  =  Node.newNumber(0);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild());  Node  rvalInt  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getLastChild());  Node  rvalInt  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	78	None	replace
739	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString());  Node  rvalInt  =  Node.newNumber(1);  [CE]  no  suitable  method  found  for  newNumber(String)  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getString());  Node  rvalInt  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getString());  Node  rvalInt  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    rvalInt    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String)	78	None	replace
740	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  resultDouble);  [CE]  cannot  find  symbol  resultDouble  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right,  resultDouble);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  right,  resultDouble);	  Node    newNumber    =    Node.newNumber(left,    right,    result);    	non-compiled	[CE]  cannot  find  symbol  resultDouble	21	None	replace
741	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  resultDouble);  [CE]  cannot  find  symbol  resultDouble  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  resultDouble);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  right,  resultDouble);	  Node    newNumber    =    Node.newNumber(left,    right,    result);    	non-compiled	[CE]  cannot  find  symbol  resultDouble	21	None	replace
742	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
743	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
744	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble,  lvalInt,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  resultDouble  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble,  lvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(resultDouble,  lvalInt,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(result,    lvalInt,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  cannot  find  symbol  resultDouble	61	None	replace
745	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval)+  1;  node.getParent().replaceChild(n,  newNumber);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval)+  1;  node.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval)+  1;  node.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    node.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	38	None	replace
746	[BUG]  [BUGGY]  Node  n  =  Node.newNumber(1);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	77	None	replace
747	[BUG]  [BUGGY]  Node  n  =  Node.newNumber(2);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  Node.newNumber(2);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	77	None	replace
748	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  n  =  Node.newNumber(1);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  n  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  n  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	77	None	replace
749	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild());  Node  n  =  Node.newNumber(1);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getLastChild());  Node  n  =  Node.newNumber(1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getLastChild());  Node  n  =  Node.newNumber(1);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(1);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	77	None	replace
750	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.abs(result));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(Math.abs(result));	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  ComparisonFailure  	41	2	replace
751	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(Math.abs(result));  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.abs(result));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(Math.abs(result));	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  ComparisonFailure  	41	2	replace
752	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  lvalInt));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(Math.max(result,  lvalInt));	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  ComparisonFailure  	41	2	replace
753	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  lvalInt));  [FE]  ComparisonFailure  [FE]                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(Math.max(result,  lvalInt));  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(Math.max(result,  lvalInt));	  Node    newNumber    =    Node.newNumber(negNum);    	compilable	  [FE]  ComparisonFailure  	41	2	replace
754	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right.getLastChild(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right.getLastChild(),  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right.getLastChild(),  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	94	None	replace
755	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  lvalDouble);  [CE]  cannot  find  symbol  lvalDouble  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  left,  right,  lvalDouble);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  left,  right,  lvalDouble);	  Node    newNumber    =    Node.newNumber(left,    right,    lval);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	25	None	replace
756	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,double,Node)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  lval,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  lval,  right);	  Node    newNumber    =    Node.newNumber(left,    right,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double,Node)	25	None	replace
757	[BUG]  [BUGGY]  Node  oldNumber  =  Node.newNumber(0);  [CE]  cannot  find  symbol  newNumber  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  oldNumber  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  oldNumber  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    oldNumber    =    Node.newNumber(0);    	non-compiled	[CE]  cannot  find  symbol  newNumber	80	None	replace
758	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rvalInt  =  Node.newNumber(result  +  1);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  rvalInt  =  Node.newNumber(result  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt);  Node  rvalInt  =  Node.newNumber(result  +  1);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    rvalInt    =    Node.newNumber(result    +    1);    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	92	None	replace
759	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  -  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  -  1);	  Node    newNumber    =    Node.newNumber(left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	81	None	replace
760	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left  /  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left  /  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left  /  1);	  Node    newNumber    =    Node.newNumber(left    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	81	None	replace
761	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  lval);  [CE]  no  suitable  method  found  for  newNumber(double,double,double)  [FE]                    AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  lval,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  lval,  lval);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,double,double)	101	None	replace
762	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(2);  n.getParent().removeChild(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(2);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(2);    n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
763	[BUG]  [BUGGY]  Integer  newNumber  =  left.getLastChild();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Integer  newNumber  =  left.getLastChild();  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Integer  newNumber  =  left.getLastChild();	  int    newNumber    =    left.getLastChild();    	non-compiled	[CE]  incompatible  types	14	None	replace
764	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left,  newNumber);	  Node    newNumber    =    Node.newNumber(n,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	19	None	replace
765	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newString(int,double)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newString(Token.NAME,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double)	43	None	replace
766	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left,  right);  [CE]  no  suitable  method  found  for  newString(int,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  left,  right);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  left,  right);	  Node    newNumber    =    Node.newString(Token.NAME,    result);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,Node)	43	None	replace
767	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right.getFirstChild(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right.getFirstChild(),  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right.getFirstChild(),  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newNumber(left.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	111	None	replace
768	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  newNumber  [FE]                                AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	n.getParent().replaceChild(left,  newNumber);	  n.getParent().removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  newNumber	15	None	replace
769	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  left);  [CE]  no  suitable  method  found  for  newNumber(double,Node,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left,  left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(result,  left,  left);	  Node    newNumber    =    Node.newNumber(lval,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(double,Node,Node)	72	None	replace
770	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  newNumber  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  newNumber  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  newNumber  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
771	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  oldNumber  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  oldNumber  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  oldNumber  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
772	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  Node  newNumber  =  left.getNext();  n.getParent().removeChild(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getNext();  Node  newNumber  =  left.getNext();  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getNext();    Node  newNumber  =  left.getNext();  n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	add
773	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  n  =  Node.newNumber(lval);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  n  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt);  Node  n  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    n    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	88	None	replace
774	[BUG]  [BUGGY]  Node  n  =  Node.newNumber(lval);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  Node.newNumber(lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(lval);    Node    n    =    Node.newNumber(lval);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	88	None	replace
775	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  oldNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  Node  oldNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt    +    1);    Node  oldNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	47	None	add
776	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  n.getParent().removeChild(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
777	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  oldNumber  =  Node.newNumber(2);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(1);  Node  oldNumber  =  Node.newNumber(2);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(1);    Node  oldNumber  =  Node.newNumber(2);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	add
778	[BUG]  [BUGGY]  int  newNumber  =  left.getType(),  right.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  int  newNumber  =  left.getType(),  right.getLastChild());  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	int  newNumber  =  left.getType(),  right.getLastChild());	  int    newNumber    =    left.getType();    	non-compiled	[CE]  ';'  expected	112	None	replace
779	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  newNumber  =  left.getFirstChild();  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  newNumber  =  left.getFirstChild();  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  newNumber  =  left.getFirstChild();  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
780	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  newNumber  =  left.getFirstChild();  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  newNumber  =  left.getFirstChild();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  newNumber  =  left.getFirstChild();  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
781	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  oldNumber  =  left.getFirstChild();  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  left.getFirstChild();  Node  oldNumber  =  left.getFirstChild();  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    left.getFirstChild();    Node  oldNumber  =  left.getFirstChild();  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	10	None	add
782	[BUG]  [BUGGY]  Node  n  =  Node.newNumber(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  n  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  n  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	76	None	replace
783	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  n  =  Node.newNumber(0);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  n  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left.getFirstChild());  Node  n  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	76	None	replace
784	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  n  =  Node.newNumber(0);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  Node  n  =  Node.newNumber(0);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(left);  Node  n  =  Node.newNumber(0);	  Node    newNumber    =    Node.newNumber(0);    Node    n    =    Node.newNumber(0);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	76	None	replace
785	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  left.getParent().replaceChild(n,  newNumber);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(right  +  1);  left.getParent().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(right  +  1);  left.getParent().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(result    +    1);    Node    newNumber    =    Node.newNumber(result    +    1);    left.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
786	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalDouble);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalDouble);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  newNumber  =  Node.newNumber(lvalDouble);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
787	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(rvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    Node  newNumber  =  Node.newNumber(rvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
788	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(lvalInt);    n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	114	None	add
789	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval)+  1;  n.getNext().replaceChild(n,  newNumber);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval)+  1;  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval)+  1;  n.getNext().replaceChild(n,  newNumber);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getNext().replaceChild(n,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	39	None	replace
790	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  n.getParent().removeChild(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  n.getParent().removeChild(left);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    n.getParent().removeChild(left);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
791	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  Node.newString(result);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  Node.newString(result);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  rval  =  Node.newString(result);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
792	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  Node.newString(Token.NAME);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rval);  Node  rval  =  Node.newString(Token.NAME);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(rval);    Node  rval  =  Node.newString(Token.NAME);	  	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	67	None	add
793	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  lval,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newString(int,double,double)  [FE]        ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  lval,  MAX_FOLD_NUMBER);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  lval,  MAX_FOLD_NUMBER);	  Node    newNumber    =    Node.newString(Token.NAME,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double,double)	116	None	replace
794	[BUG]  [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  MAX_FOLD_NUMBER,  lval);  [CE]  no  suitable  method  found  for  newString(int,double,double)  [FE]          ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newString(Token.NAME,  MAX_FOLD_NUMBER,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newString(Token.NAME,  MAX_FOLD_NUMBER,  lval);	  Node    newNumber    =    Node.newString(Token.NAME,    lval);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,double,double)	116	None	replace
795	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval)+  1;  n.getParent().removeChild(n);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lval)+  1;  n.getParent().removeChild(n);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lval)+  1;  n.getParent().removeChild(n);	  Node    newNumber    =    Node.newNumber(lval);    Node    newNumber    =    Node.newNumber(lval);    n.getParent().removeChild(n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	36	None	replace
796	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt,  result,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(int,double,int)  [FE]                        AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(rvalInt,  result,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(rvalInt,  result,  lvalInt);	  Node    newNumber    =    Node.newNumber(negNum,    result,    lvalInt);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,double,int)	104	None	replace
797	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  rval,  lval);  [CE]  cannot  find  symbol  negNum  [FE]                          AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(negNum,  rval,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(negNum,  rval,  lval);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  cannot  find  symbol  negNum	66	None	replace
798	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble,  rval,  lval);  [CE]  cannot  find  symbol  resultDouble  [FE]                            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(resultDouble,  rval,  lval);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(resultDouble,  rval,  lval);	  Node    newNumber    =    Node.newNumber(result,    rval,    lval);    	non-compiled	[CE]  cannot  find  symbol  resultDouble	66	None	replace
799	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  /  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	Node  newNumber  =  Node.newNumber(lvalInt  /  1);	  Node    newNumber    =    Node.newNumber(rvalInt    +    1);    	compilable	  [FE]  ComparisonFailure  	54	2	replace
800	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  /  1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  /  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  /  1);	  Node    newNumber    =    Node.newNumber(rvalInt    +    1);    	compilable	  [FE]  ComparisonFailure  	54	2	replace
801	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]            AssertionFailedError      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(n,  MAX_FOLD_NUMBER_ERROR);	  Node    newNumber    =    Node.newNumber(n);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	40	None	replace
802	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble  +  1);  [CE]  cannot  find  symbol  lvalDouble  [FE]                ComparisonFailure      [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalDouble  +  1);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node  newNumber  =  Node.newNumber(lvalDouble  +  1);	  Node    newNumber    =    Node.newNumber(0);    Node    newNumber    =    Node.newNumber(lvalInt    +    1);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	31	None	replace
803	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  newNumber  =  Node.newNumber(rvalInt,  lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  newNumber  =  Node.newNumber(rvalInt,  lvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  newNumber  =  Node.newNumber(rvalInt,  lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
804	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  rvalInt  =  Node.newNumber(lvalInt,  rvalInt);  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]          result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  rvalInt,  lvalInt);  Node  rvalInt  =  Node.newNumber(lvalInt,  rvalInt);  [BUGGY]      n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	Node    newNumber    =    Node.newNumber(result,    rvalInt,    lvalInt);    Node  rvalInt  =  Node.newNumber(lvalInt,  rvalInt);	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	59	None	add
