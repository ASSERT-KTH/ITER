bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
2	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
4	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  right);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  right);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
6	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  right);  reportCodeChange();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  right);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  right);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getNext().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getNext().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
8	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getNext().replaceChild(n,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getNext().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getNext().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
9	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  Node  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  Node  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    Node  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	non-compiled	[CE]  ';'  expected	18	None	add
10	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
11	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
12	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  left);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  left);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
13	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  left);  reportCodeChange();  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  left);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  left);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
14	[BUG]  [BUGGY]  return  right.next(),  newNumber);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.next(),  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.next(),  newNumber);	  return    right.next();    	non-compiled	[CE]  ';'  expected	71	None	replace
15	[BUG]  [BUGGY]  return  n!=  newNumber.getFirstChild();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n!=  newNumber.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n!=  newNumber.getFirstChild();	  return    newNumber!=    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	143	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  n.getFirstChild();	  return    newNumber!=    n.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	143	1	replace
17	[BUG]  [BUGGY]  return  n.getFirstChild();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getFirstChild();	  return    newNumber!=    n.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	143	1	replace
18	[BUG]  [BUGGY]  return  newNumber!=  n.getLastChild();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  n.getLastChild();	  return    newNumber!=    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	143	None	replace
19	[BUG]  [BUGGY]  return  newNumber!=  left.getFirstChild();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  left.getFirstChild();	  return    newNumber!=    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	143	None	replace
20	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild();	  return    newNumber!=    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	143	None	replace
21	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  newNumber.setString(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                newNumber.setString(n.getString());    newNumber.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	129	2	add
22	[BUG]  [BUGGY]          newNumber.setString(n.getString());  newNumber.setString(n.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  newNumber.setString(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    newNumber.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	129	2	add
23	[BUG]  [BUGGY]          newNumber.setString(n.getString());  newNumber.setPosition(n.getPosition());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  newNumber.setPosition(n.getPosition());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    newNumber.setPosition(n.getPosition());	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
24	[BUG]  [BUGGY]          newNumber.setString(n.getString());  newNumber.setLocale(n.getLocale());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  newNumber.setLocale(n.getLocale());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    newNumber.setLocale(n.getLocale());	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
25	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  n.setString(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                newNumber.setString(n.getString());    n.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	129	2	add
26	[BUG]  [BUGGY]          newNumber.setString(n.getString());  n.setString(n.getString());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  n.setString(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    n.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	129	2	add
27	[BUG]  [BUGGY]          newNumber.setString(n.getString());  node.setString(n.getString());  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  node.setString(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    node.setString(n.getString());	  	non-compiled	[CE]  cannot  find  symbol  node	129	None	add
28	[BUG]  [BUGGY]          newNumber.setString(n.getString());  newNumber.setInt(n.getInt());  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  newNumber.setInt(n.getInt());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    newNumber.setInt(n.getInt());	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
29	[BUG]  [BUGGY]          newNumber.setString(n.getString());  newNumber.setName(n.getString());  [CE]  cannot  find  symbol  [FE]                RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  newNumber.setName(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    newNumber.setName(n.getString());	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
30	[BUG]  [BUGGY]  return  left.getFirstChild().getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild().getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild().getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  incompatible  types	116	None	replace
31	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right.getLastChild());  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	116	None	replace
32	[BUG]  [BUGGY]  return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild());  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	116	None	replace
33	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild(),  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild(),  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)	116	None	replace
34	[BUG]  [BUGGY]  return  left.getFirstChild()!=  this?  this  :  new  Double(newNumber,  left.getLastChild());  [CE]  incomparable  types:  Node  and  PeepholeFoldConstants  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()!=  this?  this  :  new  Double(newNumber,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()!=  this?  this  :  new  Double(newNumber,  left.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  incomparable  types:  Node  and  PeepholeFoldConstants	116	None	replace
35	[BUG]  [BUGGY]  return  left.getFirstChild()  ==  this?  this  :  new  Double(newNumber,  left.getLastChild());  [CE]  incomparable  types:  Node  and  PeepholeFoldConstants  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()  ==  this?  this  :  new  Double(newNumber,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()  ==  this?  this  :  new  Double(newNumber,  left.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  incomparable  types:  Node  and  PeepholeFoldConstants	116	None	replace
36	[BUG]  [BUGGY]  return  result  ==  left.getNext()?  this  :  new  Double(newNumber,  newNumber);  [CE]  incomparable  types:  double  and  Node  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result  ==  left.getNext()?  this  :  new  Double(newNumber,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result  ==  left.getNext()?  this  :  new  Double(newNumber,  newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    result);    	non-compiled	[CE]  incomparable  types:  double  and  Node	34	None	replace
37	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  result);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,double)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  result);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    result);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,double)	34	None	replace
38	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(result,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(double,Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(result,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(result,  newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    result);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(double,Node)	34	None	replace
39	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  result,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,double,Node)  [FE]                              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  result,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  result,  right);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    result);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,double,Node)	34	None	replace
40	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  result);  [CE]  no  suitable  constructor  found  for  Double(Node,double)  [FE]                                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  result);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    result);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,double)	34	None	replace
41	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(newNumber);	  return    newNumber.cloneTree();    newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	152	2	replace
42	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(newNumber);	  return    newNumber.cloneTree();    newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	152	2	replace
43	[BUG]  [BUGGY]  node.removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.removeChild(newNumber);	  return    newNumber.cloneTree();    newNumber.removeChild(left);    	non-compiled	[CE]  cannot  find  symbol  node	152	None	replace
44	[BUG]  [BUGGY]  NodeUtil.removeChild(newNumber);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeUtil.removeChild(newNumber);	  return    newNumber.cloneTree();    newNumber.removeChild(left);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	152	None	replace
45	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  newNumber  =  left.getFirstChild();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	replace
46	[BUG]  [BUGGY]  n.cloneTree();  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.cloneTree();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.cloneTree();  Node  newNumber  =  left.getFirstChild();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber  =  left.getFirstChild();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	51	1	replace
48	[BUG]  [BUGGY]  newNumber  =  left.getFirstChild();  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber  =  left.getFirstChild();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	51	1	replace
49	[BUG]  [BUGGY]  Node  newNumber  =  left.getLastChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  newNumber  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  newNumber  =  left.getLastChild();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	replace
50	[BUG]  [BUGGY]  n.cloneTree();  Node  newNumber  =  left.getLastChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.cloneTree();  Node  newNumber  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.cloneTree();  Node  newNumber  =  left.getLastChild();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	replace
51	[BUG]  [BUGGY]  return  n.nextToken();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.nextToken();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.nextToken();	  return    n.next();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
52	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(n,  newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(n,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Node(n,  newNumber,  right);	  return    newNumber    ==    left.getLastChild()?    this    :    new    Node(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	88	None	replace
53	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  result);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,double)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  result);	  return    newNumber    ==    left.getLastChild()?    this    :    new    Node(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,double)	88	None	replace
54	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Node(n,  newNumber);	  return    newNumber    ==    left.getLastChild()?    this    :    new    Node(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	88	None	replace
55	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  newNumber);	  return    newNumber    ==    left.getLastChild()?    this    :    new    Node(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	88	None	replace
56	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(newNumber);	  return    newNumber    ==    left.getFirstChild()?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	139	None	replace
57	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	139	None	replace
58	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(n,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	139	None	replace
59	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(n,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	139	None	replace
60	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	139	None	replace
61	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getNext()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getNext()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  left.getNext()  :  new  Node(newNumber);	  return    newNumber    ==    left.getFirstChild()?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	139	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  n,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  left);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber,  left);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  n,  right,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
66	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  n,  newNumber,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  n,  newNumber,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  n,  newNumber,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(right);  reportCodeChange();	          n.removeChild(newNumber);    reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	23	1	replace
68	[BUG]  [BUGGY]  n.removeChild(right);  reportCodeChange();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);  reportCodeChange();	          n.removeChild(newNumber);    reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	23	1	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(left);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(left);  reportCodeChange();	          n.removeChild(newNumber);    reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	23	1	replace
70	[BUG]  [BUGGY]  n.removeChild(left);  reportCodeChange();  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(left);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(left);  reportCodeChange();	          n.removeChild(newNumber);    reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	23	1	replace
71	[BUG]  [BUGGY]  return  n.getNext()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getNext()  -  1;	  return    newNumber.getNext()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	75	None	replace
72	[BUG]  [BUGGY]  return  left.getNext()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext()  -  1;	  return    newNumber.getNext()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	75	None	replace
73	[BUG]  [BUGGY]  return  right.getNext()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.getNext()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.getNext()  -  1;	  return    newNumber.getNext()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	75	None	replace
74	[BUG]  [BUGGY]  return  node.getNext()  -  1;  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  node.getNext()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  node.getNext()  -  1;	  return    newNumber.getNext()    -    1;    	non-compiled	[CE]  cannot  find  symbol  node	75	None	replace
75	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  right);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	32	None	replace
76	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  newNumber,  right);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)	32	None	replace
77	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  left.getLowerCase());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  left.getLowerCase());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  left.getLowerCase());	  return    newNumber    ==    left.getNext()?    this    :    new    Double(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(left);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(left);  return  newNumber;	  n.removeChild(newNumber);    return    newNumber;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
79	[BUG]  [BUGGY]  n.removeChild(left);  return  newNumber;  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(left);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(left);  return  newNumber;	  n.removeChild(newNumber);    return    newNumber;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(right);  return  newNumber;	  n.removeChild(newNumber);    return    newNumber;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
81	[BUG]  [BUGGY]  n.removeChild(right);  return  newNumber;  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);  return  newNumber;	  n.removeChild(newNumber);    return    newNumber;    	compilable	  [FE]  AssertionFailedError  	157	1	replace
82	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  result;  [CE]  incompatible  types  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  result;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);  return  result;	  n.removeChild(newNumber);    return    newNumber;    	non-compiled	[CE]  incompatible  types	157	None	replace
83	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  this;  [CE]  incompatible  types  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  this;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);  return  this;	  n.removeChild(newNumber);    return    newNumber;    	non-compiled	[CE]  incompatible  types	157	None	replace
84	[BUG]  [BUGGY]  return  n.doubleValue()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.doubleValue()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.doubleValue()  +  1;	  return    n.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
85	[BUG]  [BUGGY]  return  result.toString(),  newNumber);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.toString(),  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.toString(),  newNumber);	  return    newNumber.toString(),    result);    	non-compiled	[CE]  ';'  expected	81	None	replace
86	[BUG]  [BUGGY]  return  newNumber.toString(),  result  +  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.toString(),  result  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString(),  result  +  1);	  return    newNumber.toString(),    result);    	non-compiled	[CE]  ';'  expected	81	None	replace
87	[BUG]  [BUGGY]  return  n.toString(),  result);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.toString(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.toString(),  result);	  return    newNumber.toString(),    result);    	non-compiled	[CE]  ';'  expected	81	None	replace
88	[BUG]  [BUGGY]  return  newNumber.toString(),  left);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.toString(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString(),  left);	  return    newNumber.toString(),    result);    	non-compiled	[CE]  ';'  expected	81	None	replace
89	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right).doubleValue();	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	118	None	replace
90	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  newNumber).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  newNumber).doubleValue();	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	118	None	replace
91	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber),  right.doubleValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber),  right.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber),  right.doubleValue();	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  ';'  expected	118	None	replace
92	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right).doubleValue();	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	118	None	replace
93	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber).doubleValue();	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	118	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  newNumber,  this);	  return    newNumber.cloneTree();    n.removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	52	None	replace
95	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(n);	  return    newNumber.cloneTree();    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	52	2	replace
96	[BUG]  [BUGGY]  newNumber.removeChild(n);  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(n);	  return    newNumber.cloneTree();    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	52	2	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  newNumber);	  return    newNumber.cloneTree();    n.removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	52	None	replace
98	[BUG]  [BUGGY]  return  newNumber  ==  null?  left  :  new  Node(newNumber.getString(),  right);  [CE]  no  suitable  constructor  found  for  Node(String,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  left  :  new  Node(newNumber.getString(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  left  :  new  Node(newNumber.getString(),  right);	  return    newNumber    ==    null?    left    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String,Node)	145	None	replace
99	[BUG]  [BUGGY]  return  newNumber  ==  null?  left  :  new  Node(newNumber,  right.getString());  [CE]  no  suitable  constructor  found  for  Node(Node,String)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  left  :  new  Node(newNumber,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  left  :  new  Node(newNumber,  right.getString());	  return    newNumber    ==    null?    left    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,String)	145	None	replace
100	[BUG]  [BUGGY]  return  newNumber  ==  null?  left  :  new  Node(n.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  left  :  new  Node(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  left  :  new  Node(n.getString());	  return    newNumber    ==    null?    left    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	145	None	replace
101	[BUG]  [BUGGY]  return  left  ==  null?  newNumber  :  new  Node(newNumber.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  null?  newNumber  :  new  Node(newNumber.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  null?  newNumber  :  new  Node(newNumber.getString());	  return    newNumber    ==    null?    left    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	145	None	replace
102	[BUG]  [BUGGY]  return  newNumber!=  null?  left  :  new  Node(newNumber.getString(),  right);  [CE]  no  suitable  constructor  found  for  Node(String,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  left  :  new  Node(newNumber.getString(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  left  :  new  Node(newNumber.getString(),  right);	  return    newNumber    ==    null?    left    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String,Node)	145	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  newNumber,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
105	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  n,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  n,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
106	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  newNumber,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  newNumber,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  newNumber,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
108	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getString(),  result);  [CE]  no  suitable  constructor  found  for  Node(String,double)  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getString(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber.getString(),  result);	  return    newNumber!=    null?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String,double)	131	None	replace
109	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber.getString());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	131	None	replace
110	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  left.getString());  [CE]  no  suitable  constructor  found  for  Node(Node,String)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  left.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber,  left.getString());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,String)	131	None	replace
111	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(n.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(n.getString());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	131	None	replace
112	[BUG]  [BUGGY]  return  right  ==  left.getNext()?  this  :  new  Double(newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right  ==  left.getNext()?  this  :  new  Double(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right  ==  left.getNext()?  this  :  new  Double(newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	163	None	replace
113	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(n.getString()  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.setString(n.getString()  +  1);	          newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	130	2	replace
114	[BUG]  [BUGGY]  newNumber.setString(n.getString()  +  1);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(n.getString()  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.setString(n.getString()  +  1);	          newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	130	2	replace
115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.setString(right.getString());	          newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	130	2	replace
116	[BUG]  [BUGGY]  newNumber.setString(right.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.setString(right.getString());	          newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	130	2	replace
117	[BUG]  [BUGGY]  newNumber.setString(n.getString(),  result);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(n.getString(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.setString(n.getString(),  result);	          newNumber.setString(n.getString());    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
118	[BUG]  [BUGGY]  newNumber.setString(n.getString(),  left);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(n.getString(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.setString(n.getString(),  left);	          newNumber.setString(n.getString());    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
119	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(n.getString()  + ": ");  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.setString(n.getString()  + ": ");	          newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	130	2	replace
120	[BUG]  [BUGGY]  newNumber.setString(n.getString()  + ": ");  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(n.getString()  + ": ");  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.setString(n.getString()  + ": ");	          newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	130	2	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  false);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  false);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	93	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  false);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber,  false);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	93	None	replace
123	[BUG]  [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  false);  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  false);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    false);    	non-compiled	[CE]  cannot  find  symbol  node	93	None	replace
124	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  left,  newNumber,  false);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  left,  newNumber,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  left,  newNumber,  false);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	93	None	replace
125	[BUG]  [BUGGY]  node.traverse(compiler,  left,  newNumber,  false);  [CE]  cannot  find  symbol  compiler  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.traverse(compiler,  left,  newNumber,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.traverse(compiler,  left,  newNumber,  false);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	93	None	replace
126	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getParent().replaceChild(n,  left);	          n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	15	2	replace
127	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().replaceChild(n,  left);	          n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	15	2	replace
128	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getParent().replaceChild(n,  right);	          n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	15	2	replace
129	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().replaceChild(n,  right);	          n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	15	2	replace
130	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getNext().replaceChild(n,  newNumber);	          n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	15	2	replace
131	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getNext().replaceChild(n,  newNumber);	          n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	15	2	replace
132	[BUG]  [BUGGY]  return  n.removeFirst();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.removeFirst();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.removeFirst();	  return    newNumber.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
133	[BUG]  [BUGGY]  return  left.removeFirst();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.removeFirst();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.removeFirst();	  return    newNumber.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
134	[BUG]  [BUGGY]  return  right.removeFirst();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.removeFirst();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.removeFirst();	  return    newNumber.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
135	[BUG]  [BUGGY]  return  newNumber.getFirst();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirst();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getFirst();	  return    newNumber.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
136	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(n.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(n.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(n.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	147	None	replace
137	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  result);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  result);	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	147	None	replace
138	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(n,  newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(n,  newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(n,  newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	147	None	replace
139	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(n,  newNumber):  new  Integer(newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(n,  newNumber):  new  Integer(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(n,  newNumber):  new  Integer(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	147	None	replace
140	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber,  left):  new  Integer(newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber,  left):  new  Integer(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber,  left):  new  Integer(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	147	None	replace
141	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  Integer.valueOf(newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  Integer.valueOf(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  Integer.valueOf(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	147	None	replace
142	[BUG]  [BUGGY]  return  result  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);  [CE]  incomparable  types:  double  and  Node  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    result);    	non-compiled	[CE]  incomparable  types:  double  and  Node	86	None	replace
143	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  right,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    result);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	86	None	replace
144	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  result);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,double)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  result);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    result);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,double)	86	None	replace
145	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(n);  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(n);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(negNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	164	None	replace
146	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left.getLowerCase());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left.getLowerCase());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(left.getLowerCase());	  return    newNumber    ==    left.getNext()?    this    :    new    Double(negNumber);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
147	[BUG]  [BUGGY]  return  newNumber  ==  right.getLastChild()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  right.getLastChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  right.getLastChild()  :  new  Node(newNumber);	  return    newNumber    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	140	None	replace
148	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()  :  new  Node(newNumber);	  return    newNumber    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	140	None	replace
149	[BUG]  [BUGGY]  return  newNumber!=  left.getFirstChild()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  left.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  left.getFirstChild()  :  new  Node(newNumber);	  return    newNumber    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	140	None	replace
150	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()  :  new  Node(newNumber);	  return    newNumber    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	140	None	replace
151	[BUG]  [BUGGY]  return  newNumber  ==  right.getFirstChild()  :  new  Node(newNumber,  left);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  right.getFirstChild()  :  new  Node(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  right.getFirstChild()  :  new  Node(newNumber,  left);	  return    newNumber    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	140	None	replace
152	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	48	None	replace
153	[BUG]  [BUGGY]  node.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.traverse(compiler,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	48	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  left);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  newNumber,  left);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	48	None	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  right)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	if(newNumber!=  right)  {  return  newNumber;  }	  if(newNumber!=    left)    {    return    newNumber;    }    	compilable	  [FE]  AssertionFailedError  	29	1	replace
156	[BUG]  [BUGGY]  if(newNumber!=  right)  {  return  newNumber;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  right)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=  right)  {  return  newNumber;  }	  if(newNumber!=    left)    {    return    newNumber;    }    	compilable	  [FE]  AssertionFailedError  	29	1	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(left!=  newNumber)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	if(left!=  newNumber)  {  return  newNumber;  }	  if(newNumber!=    left)    {    return    newNumber;    }    	compilable	  [FE]  AssertionFailedError  	29	1	replace
158	[BUG]  [BUGGY]  if(left!=  newNumber)  {  return  newNumber;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(left!=  newNumber)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(left!=  newNumber)  {  return  newNumber;  }	  if(newNumber!=    left)    {    return    newNumber;    }    	compilable	  [FE]  AssertionFailedError  	29	1	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  right;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	if(newNumber!=  left)  {  return  right;  }	  if(newNumber!=    left)    {    return    newNumber;    }    	compilable	  [FE]  AssertionFailedError  	29	1	replace
160	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  right;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  right;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=  left)  {  return  right;  }	  if(newNumber!=    left)    {    return    newNumber;    }    	compilable	  [FE]  AssertionFailedError  	29	1	replace
161	[BUG]  [BUGGY]  return  n.toString()  +  1;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.toString()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.toString()  +  1;	  return    newNumber.toString()    +    1;    	non-compiled	[CE]  incompatible  types	151	None	replace
162	[BUG]  [BUGGY]  return  left.toString()  +  1;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.toString()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.toString()  +  1;	  return    newNumber.toString()    +    1;    	non-compiled	[CE]  incompatible  types	151	None	replace
163	[BUG]  [BUGGY]  return  newNumber.toString(),  right.toString()  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.toString(),  right.toString()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString(),  right.toString()  +  1;	  return    newNumber.toString()    +    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
164	[BUG]  [BUGGY]  return  newNumber.toString(),  right.toString());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.toString(),  right.toString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString(),  right.toString());	  return    newNumber.toString()    +    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	49	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber,  this);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	49	None	replace
167	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  left,  newNumber,  this);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	49	None	replace
168	[BUG]  [BUGGY]  node.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.traverse(compiler,  left,  newNumber,  this);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	49	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  this);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	104	None	replace
170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(right);	  newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
171	[BUG]  [BUGGY]  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(right);	  newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
172	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.addChildToFront(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.addChildToFront(right);	  newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
173	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.addChildToFront(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.addChildToFront(right);	  newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
174	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.addChildToBack(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.addChildToBack(right);	  newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
175	[BUG]  [BUGGY]  newNumber.addChildToBack(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.addChildToBack(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.addChildToBack(right);	  newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	161	2	replace
176	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(right);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getParent().removeChild(right);  reportCodeChange();	          n.getParent().removeChild(newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	21	2	replace
177	[BUG]  [BUGGY]  n.getParent().removeChild(right);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(right);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().removeChild(right);  reportCodeChange();	          n.getParent().removeChild(newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	21	2	replace
178	[BUG]  [BUGGY]  return  result.next();  [CE]  double  cannot  be  dereferenced  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.next();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.next();	  return    node.next();    	non-compiled	[CE]  double  cannot  be  dereferenced	72	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber!=  left)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	if(newNumber!=    left)    {    return    newNumber;    }    if(newNumber!=  left)  {  return  newNumber;  }	  	compilable	  [FE]  AssertionFailedError  	28	1	add
180	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber!=  left)  {  return  newNumber;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber!=  left)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=    left)    {    return    newNumber;    }    if(newNumber!=  left)  {  return  newNumber;  }	  	compilable	  [FE]  AssertionFailedError  	28	1	add
181	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber  >=  left)  {  return  newNumber;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber  >=  left)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=    left)    {    return    newNumber;    }    if(newNumber  >=  left)  {  return  newNumber;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	28	None	add
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber  ==  left)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	if(newNumber!=    left)    {    return    newNumber;    }    if(newNumber  ==  left)  {  return  newNumber;  }	  	compilable	  [FE]  AssertionFailedError  	28	1	add
183	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber  ==  left)  {  return  newNumber;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber  ==  left)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=    left)    {    return    newNumber;    }    if(newNumber  ==  left)  {  return  newNumber;  }	  	compilable	  [FE]  AssertionFailedError  	28	1	add
184	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber  >>  left)  {  return  newNumber;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber  >>  left)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=    left)    {    return    newNumber;    }    if(newNumber  >>  left)  {  return  newNumber;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	28	None	add
185	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber  [Delete]  left)  {  return  newNumber;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  if(newNumber  [Delete]  left)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=    left)    {    return    newNumber;    }    if(newNumber  [Delete]  left)  {  return  newNumber;  }	  	non-compiled	[CE]  ')'  expected	28	None	add
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  n.getLastChild();	  return    n.getNext();    	compilable	  [FE]  AssertionFailedError  	77	1	replace
187	[BUG]  [BUGGY]  return  n.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getLastChild();	  return    n.getNext();    	compilable	  [FE]  AssertionFailedError  	77	1	replace
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getParent();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  n.getParent();	  return    n.getNext();    	compilable	  [FE]  AssertionFailedError  	77	1	replace
189	[BUG]  [BUGGY]  return  n.getParent();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getParent();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getParent();	  return    n.getNext();    	compilable	  [FE]  AssertionFailedError  	77	1	replace
190	[BUG]  [BUGGY]  return  n.getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getNext()  +  1;	  return    n.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	77	None	replace
191	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  right.getString());  [CE]  no  suitable  constructor  found  for  Node(Node,String)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(newNumber,  right.getString());	  return    newNumber    ==    left?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,String)	111	None	replace
192	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber.getString(),  right);  [CE]  no  suitable  constructor  found  for  Node(String,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber.getString(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(newNumber.getString(),  right);	  return    newNumber    ==    left?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String,Node)	111	None	replace
193	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(n.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(n.getString());	  return    newNumber    ==    left?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	111	None	replace
194	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(n,  newNumber.getString());  [CE]  no  suitable  constructor  found  for  Node(Node,String)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(n,  newNumber.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(n,  newNumber.getString());	  return    newNumber    ==    left?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,String)	111	None	replace
195	[BUG]  [BUGGY]  return  left  ==  null?  null  :  new  Node(newNumber.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  null?  null  :  new  Node(newNumber.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  null?  null  :  new  Node(newNumber.getString());	  return    newNumber    ==    left?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	111	None	replace
196	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  left).cloneTree();  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  left).cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber,  left).cloneTree();	  return    newNumber!=    null?    null    :    new    Node(newNumber).cloneTree();    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	103	None	replace
197	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber,  left).cloneTree();  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber,  left).cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber,  left).cloneTree();	  return    newNumber!=    null?    null    :    new    Node(newNumber).cloneTree();    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	103	None	replace
198	[BUG]  [BUGGY]  return  right.toString(),  newNumber);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.toString(),  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.toString(),  newNumber);	  return    newNumber.toString(),    right);    	non-compiled	[CE]  ';'  expected	150	None	replace
199	[BUG]  [BUGGY]  return  left.toString(),  right);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.toString(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.toString(),  right);	  return    newNumber.toString(),    right);    	non-compiled	[CE]  ';'  expected	150	None	replace
200	[BUG]  [BUGGY]  return  n.toString(),  right);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.toString(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.toString(),  right);	  return    newNumber.toString(),    right);    	non-compiled	[CE]  ';'  expected	150	None	replace
201	[BUG]  [BUGGY]  return  n.toString(),  newNumber);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.toString(),  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.toString(),  newNumber);	  return    newNumber.toString(),    right);    	non-compiled	[CE]  ';'  expected	150	None	replace
202	[BUG]  [BUGGY]  return  node.toString(),  right);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  node.toString(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  node.toString(),  right);	  return    newNumber.toString(),    right);    	non-compiled	[CE]  ';'  expected	150	None	replace
203	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  newNumber.removeFirstChild();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  newNumber.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    newNumber.removeFirstChild();	  	non-compiled	[CE]  unreachable  statement	44	None	add
204	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  Node  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    Node  newNumber  =  left.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
205	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    Node  newNumber  =  left.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
206	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  Node  newNumber  =  node.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  Node  newNumber  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    Node  newNumber  =  node.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
207	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  Node  newNumber  =  n.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  Node  newNumber  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    Node  newNumber  =  n.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
208	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  Node  firstChild  =  left.getNext();  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  Node  firstChild  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    Node  firstChild  =  left.getNext();	  	non-compiled	[CE]  unreachable  statement	44	None	add
209	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  Node  newNumber  =  right.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  Node  newNumber  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    Node  newNumber  =  right.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
210	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  newNumber  =  Node.newNumber(0);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  newNumber  =  Node.newNumber(0);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    newNumber  =  Node.newNumber(0);	  	non-compiled	[CE]  unreachable  statement	109	None	add
211	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  newNumber  =  Node.newNumber(result);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  newNumber  =  Node.newNumber(result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    newNumber  =  Node.newNumber(result);	  	non-compiled	[CE]  unreachable  statement	109	None	add
212	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    Node  newNumber  =  left.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
213	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    Node  newNumber  =  left.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
214	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  Node.newNumber(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    Node  newNumber  =  Node.newNumber(result);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
215	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  n.getParent().removeChild(left);  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    n.getParent().removeChild(left);	  	non-compiled	[CE]  unreachable  statement	109	None	add
216	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  Node.newNumber(0);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  Node.newNumber(0);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    Node  newNumber  =  Node.newNumber(0);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	106	None	replace
218	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  right,  newNumber);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	106	None	replace
219	[BUG]  [BUGGY]  node.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.traverse(compiler,  right,  newNumber);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	106	None	replace
220	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	127	2	add
221	[BUG]  [BUGGY]          n.removeChild(left);  n.removeChild(left);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	127	2	add
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.removeChild(right);	  	compilable	  [FE]  AssertionFailedError  	127	1	add
223	[BUG]  [BUGGY]          n.removeChild(left);  n.removeChild(right);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.removeChild(right);	  	compilable	  [FE]  AssertionFailedError  	127	1	add
224	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  newNumber.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	127	2	add
225	[BUG]  [BUGGY]          n.removeChild(left);  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  newNumber.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	127	2	add
226	[BUG]  [BUGGY]          n.removeChild(left);  node.removeChild(left);  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  node.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    node.removeChild(left);	  	non-compiled	[CE]  cannot  find  symbol  node	127	None	add
227	[BUG]  [BUGGY]  return  this.next();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.next();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.next();	  return    next.next();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
228	[BUG]  [BUGGY]  return  left  ==  left.getNext()?  this  :  new  Double(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  left.getNext()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  left.getNext()?  this  :  new  Double(newNumber,  right);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	98	None	replace
229	[BUG]  [BUGGY]  return  left!=  left.getNext()?  this  :  new  Double(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  left.getNext()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  left.getNext()?  this  :  new  Double(newNumber,  right);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	98	None	replace
230	[BUG]  [BUGGY]  return  left  ==  newNumber.getNext()?  this  :  new  Double(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  newNumber.getNext()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  newNumber.getNext()?  this  :  new  Double(newNumber,  right);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	98	None	replace
231	[BUG]  [BUGGY]  return  left.getNext()?  this  :  new  Double(newNumber,  right);  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext()?  this  :  new  Double(newNumber,  right);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  incompatible  types	98	None	replace
232	[BUG]  [BUGGY]  return  n.getNext();  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  Node  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	76	None	add
233	[BUG]  [BUGGY]  return  n.getNext();  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  Node  n  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	76	None	add
234	[BUG]  [BUGGY]  return  n.getNext();  NodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  NodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    NodeTraversal.traverse(compiler,  right,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	76	None	add
235	[BUG]  [BUGGY]  return  n.getNext();  Node  n  =  right.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  Node  n  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    Node  n  =  right.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	76	None	add
236	[BUG]  [BUGGY]  return  n.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    NodeTraversal.traverse(compiler,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	76	None	add
237	[BUG]  [BUGGY]  return  n.getNext();  n.getParent().removeChild(newNumber);  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    n.getParent().removeChild(newNumber);	  	non-compiled	[CE]  unreachable  statement	76	None	add
238	[BUG]  [BUGGY]  return  n.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	76	None	add
239	[BUG]  [BUGGY]  Node  newNumber  =  right.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  newNumber  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  newNumber  =  right.getNext();	  return    newNumber.getNext();    Node    newNumber    =    right.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	38	None	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber  =  right.getNext();	  return    newNumber.getNext();    Node    newNumber    =    right.getNext();    	compilable	  [FE]  AssertionFailedError  	38	1	replace
241	[BUG]  [BUGGY]  newNumber  =  right.getNext();  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber  =  right.getNext();	  return    newNumber.getNext();    Node    newNumber    =    right.getNext();    	compilable	  [FE]  AssertionFailedError  	38	1	replace
242	[BUG]  [BUGGY]  n.getNext();  Node  newNumber  =  right.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext();  Node  newNumber  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getNext();  Node  newNumber  =  right.getNext();	  return    newNumber.getNext();    Node    newNumber    =    right.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	38	None	replace
243	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  newNumber  =  left.getNext();	  return    newNumber.getNext();    Node    newNumber    =    right.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	38	None	replace
244	[BUG]  [BUGGY]  node.removeChild(n);  Node  newNumber  =  right.getNext();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.removeChild(n);  Node  newNumber  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.removeChild(n);  Node  newNumber  =  right.getNext();	  return    newNumber.getNext();    Node    newNumber    =    right.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	38	None	replace
245	[BUG]  [BUGGY]  parent.removeChild(newNumber);  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  parent.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	parent.removeChild(newNumber);	  return    newNumber.cloneTree();    n.getParent().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  parent	50	None	replace
246	[BUG]  [BUGGY]  node.removeChild(n);  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.removeChild(n);	  return    newNumber.cloneTree();    n.getParent().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	50	None	replace
247	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  left  =  n.getNext();	  return    newNumber.cloneTree();    n.getParent().removeChild(newNumber);    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	50	None	replace
248	[BUG]  [BUGGY]  return  newNumber.getParent();  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  Node  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    Node  newNumber  =  left.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	78	None	add
249	[BUG]  [BUGGY]  return  newNumber.getParent();  Node  newNumber  =  right.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  Node  newNumber  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    Node  newNumber  =  right.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	78	None	add
250	[BUG]  [BUGGY]  return  newNumber.getParent();  n.removeChild(newNumber);  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    n.removeChild(newNumber);	  	non-compiled	[CE]  unreachable  statement	78	None	add
251	[BUG]  [BUGGY]  return  newNumber.getParent();  newNumber.removeChild(newNumber);  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    newNumber.removeChild(newNumber);	  	non-compiled	[CE]  unreachable  statement	78	None	add
252	[BUG]  [BUGGY]  return  newNumber.getParent();  Node  newNumber  =  node.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  Node  newNumber  =  node.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    Node  newNumber  =  node.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	78	None	add
253	[BUG]  [BUGGY]  return  newNumber.getParent();  newNumber.removeChild(n);  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  newNumber.removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    newNumber.removeChild(n);	  	non-compiled	[CE]  unreachable  statement	78	None	add
254	[BUG]  [BUGGY]  return  newNumber.getParent();  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    Node  newNumber  =  left.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	78	None	add
255	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree(),  result);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree(),  result);	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	148	None	replace
256	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(n,  newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(n,  newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(n,  newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	148	None	replace
257	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(n.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(n.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(n.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	148	None	replace
258	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber,  left):  new  Number(newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber,  left):  new  Number(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber,  left):  new  Number(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	148	None	replace
259	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(n,  newNumber):  new  Number(newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(n,  newNumber):  new  Number(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(n,  newNumber):  new  Number(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	148	None	replace
260	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber,  left.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber,  left.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	148	None	replace
261	[BUG]  [BUGGY]  n.getNext();  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getNext();  Node  newNumber  =  left.getFirstChild();	  return    newNumber.getNext();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	40	None	replace
262	[BUG]  [BUGGY]  node.setNext();  Node  newNumber  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.setNext();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.setNext();  Node  newNumber  =  left.getFirstChild();	  return    newNumber.getNext();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	40	None	replace
263	[BUG]  [BUGGY]  return  result.toString(),  newNumber;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.toString(),  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.toString(),  newNumber;	  return    newNumber.toString(),    result;    	non-compiled	[CE]  ';'  expected	83	None	replace
264	[BUG]  [BUGGY]  return  newNumber.toString(),  right;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.toString(),  right;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString(),  right;	  return    newNumber.toString(),    result;    	non-compiled	[CE]  ';'  expected	83	None	replace
265	[BUG]  [BUGGY]  return  newNumber.toString(),  left;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.toString(),  left;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString(),  left;	  return    newNumber.toString(),    result;    	non-compiled	[CE]  ';'  expected	83	None	replace
266	[BUG]  [BUGGY]  return  newNumber.toString(),  result  +  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.toString(),  result  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString(),  result  +  1;	  return    newNumber.toString(),    result;    	non-compiled	[CE]  ';'  expected	83	None	replace
267	[BUG]  [BUGGY]  return  newNumber.toString(),  left.toString();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.toString(),  left.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString(),  left.toString();	  return    newNumber.toString(),    result;    	non-compiled	[CE]  ';'  expected	83	None	replace
268	[BUG]  [BUGGY]  return  n.toString(),  result;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.toString(),  result;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.toString(),  result;	  return    newNumber.toString(),    result;    	non-compiled	[CE]  ';'  expected	83	None	replace
269	[BUG]  [BUGGY]  return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	117	None	replace
270	[BUG]  [BUGGY]  return  left!=  left.getFirstChild()?  this  :  new  Double(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  left.getFirstChild()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  left.getFirstChild()?  this  :  new  Double(newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	117	None	replace
271	[BUG]  [BUGGY]  return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	117	None	replace
272	[BUG]  [BUGGY]  return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	117	None	replace
273	[BUG]  [BUGGY]  return  left  ==  null?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  null?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  null?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	59	None	replace
274	[BUG]  [BUGGY]  return  left!=  null?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  null?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  null?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	59	None	replace
275	[BUG]  [BUGGY]  return  left  ==  null?  left.getFirstChild()  :  new  Node(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  null?  left.getFirstChild()  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  null?  left.getFirstChild()  :  new  Node(n,  newNumber);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	59	None	replace
276	[BUG]  [BUGGY]  return  left!=  null?  left.getFirstChild()  :  new  Node(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  null?  left.getFirstChild()  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  null?  left.getFirstChild()  :  new  Node(n,  newNumber);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	59	None	replace
277	[BUG]  [BUGGY]  return  left  ==  null?  left.getLastChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  null?  left.getLastChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  null?  left.getLastChild()  :  new  Node(newNumber);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	59	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  n.removeFirstChild();	  return    newNumber.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	45	1	replace
279	[BUG]  [BUGGY]  return  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.removeFirstChild();	  return    newNumber.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	45	1	replace
280	[BUG]  [BUGGY]  return  newNumber.removeLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.removeLastChild();	  return    newNumber.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
281	[BUG]  [BUGGY]  return  node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  node.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  node.removeFirstChild();	  return    newNumber.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	45	None	replace
282	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.removeChild(newNumber);  return  newNumber;  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.removeChild(newNumber);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    n.removeChild(newNumber);  return  newNumber;	  	non-compiled	[CE]  unreachable  statement	156	None	add
283	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.getParent().removeChild(newNumber);  return  newNumber;  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.getParent().removeChild(newNumber);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    n.getParent().removeChild(newNumber);  return  newNumber;	  	non-compiled	[CE]  unreachable  statement	156	None	add
284	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  Node  newNumber  =  left.getNext();  n.removeChild(newNumber);  return  newNumber;  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  Node  newNumber  =  left.getNext();  n.removeChild(newNumber);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    Node  newNumber  =  left.getNext();  n.removeChild(newNumber);  return  newNumber;	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	156	None	add
285	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  Node  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	156	None	add
286	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  node.removeChild(n);  return  newNumber;  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  node.removeChild(n);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    node.removeChild(n);  return  newNumber;	  	non-compiled	[CE]  cannot  find  symbol  node	156	None	add
287	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  Node  n  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	156	None	add
288	[BUG]  [BUGGY]  return  n.getType()  ==  Token.BLOCK;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getType()  ==  Token.BLOCK;	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  incompatible  types	142	None	replace
289	[BUG]  [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.BLOCK;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.BLOCK;	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  incompatible  types	142	None	replace
290	[BUG]  [BUGGY]  return  newNumber.getType()!=  Token.BLOCK;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()!=  Token.BLOCK;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()!=  Token.BLOCK;	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  incompatible  types	142	None	replace
291	[BUG]  [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.VAR;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.VAR;	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  incompatible  types	142	None	replace
292	[BUG]  [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.CALL;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.CALL;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.CALL;	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  incompatible  types	142	None	replace
293	[BUG]  [BUGGY]  return  left  ==  n?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  n?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  n?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    left    ==    n?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	63	None	replace
294	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    n?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	63	None	replace
295	[BUG]  [BUGGY]  return  left!=  n?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  n?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  n?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    left    ==    n?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	63	None	replace
296	[BUG]  [BUGGY]  return  left  ==  n?  left.getLastChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  n?  left.getLastChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  n?  left.getLastChild()  :  new  Node(newNumber);	  return    left    ==    n?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	63	None	replace
297	[BUG]  [BUGGY]  return  left!=  right.getFirstChild()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  right.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  right.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    n?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	63	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  right);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber,  right);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
300	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  left,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  left,  newNumber,  right);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
301	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  n);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  n);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
302	[BUG]  [BUGGY]  return  newNumber.doubleValue()  /  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.doubleValue()  /  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.doubleValue()  /  1;	  return    newNumber.doubleValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
303	[BUG]  [BUGGY]  return  left.doubleValue()  +  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.doubleValue()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.doubleValue()  +  1;	  return    newNumber.doubleValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
304	[BUG]  [BUGGY]  return  newNumber.doubleValue()  *  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.doubleValue()  *  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.doubleValue()  *  1;	  return    newNumber.doubleValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
305	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    newNumber    ==    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	58	None	replace
306	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()  :  new  Node(right,  newNumber);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()  :  new  Node(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()  :  new  Node(right,  newNumber);	  return    newNumber    ==    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	58	None	replace
307	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()  :  new  Node(newNumber);	  return    newNumber    ==    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	58	None	replace
308	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()  :  new  Node(n,  newNumber);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()  :  new  Node(n,  newNumber);	  return    newNumber    ==    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	58	None	replace
309	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()  :  new  Node(n,  newNumber);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()  :  new  Node(n,  newNumber);	  return    newNumber    ==    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	58	None	replace
310	[BUG]  [BUGGY]  return  result.doubleValue()  -  newNumber.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.doubleValue()  -  newNumber.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.doubleValue()  -  newNumber.doubleValue();	  return    result.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	121	None	replace
311	[BUG]  [BUGGY]  return  result.doubleValue()  /  MAX_FOLD_NUMBER;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.doubleValue()  /  MAX_FOLD_NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.doubleValue()  /  MAX_FOLD_NUMBER;	  return    result.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	121	None	replace
312	[BUG]  [BUGGY]  return  result.doubleValue()  +  newNumber.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.doubleValue()  +  newNumber.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.doubleValue()  +  newNumber.doubleValue();	  return    result.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	121	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  newWord);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  newWord);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber,  newWord);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    left,    newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  compiler	107	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  newRight);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  newRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber,  newRight);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    left,    newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  compiler	107	None	replace
315	[BUG]  [BUGGY]  return  n.cloneChildren();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneChildren();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.cloneChildren();	  return    newNumber.cloneChildren();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
316	[BUG]  [BUGGY]  return  left.cloneChildren();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.cloneChildren();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.cloneChildren();	  return    newNumber.cloneChildren();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
317	[BUG]  [BUGGY]  return  right.cloneChildren();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.cloneChildren();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.cloneChildren();	  return    newNumber.cloneChildren();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
318	[BUG]  [BUGGY]  return  node.cloneChildren();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  node.cloneChildren();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  node.cloneChildren();	  return    newNumber.cloneChildren();    	non-compiled	[CE]  cannot  find  symbol  node	6	None	replace
319	[BUG]  [BUGGY]  newNumber.cloneChildren();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.cloneChildren();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.cloneChildren();	  return    newNumber.cloneChildren();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
320	[BUG]  [BUGGY]  return  right.toString()  +  newNumber;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.toString()  +  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.toString()  +  newNumber;	  return    right.toString();    	non-compiled	[CE]  incompatible  types	84	None	replace
321	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	24	2	add
322	[BUG]  [BUGGY]          n.getParent().removeChild(left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	24	2	add
323	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  n.getParent().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(left);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	24	2	add
324	[BUG]  [BUGGY]          n.getParent().removeChild(left);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  n.getParent().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(left);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	24	2	add
325	[BUG]  [BUGGY]          n.getParent().removeChild(left);  Node  n.getParent().removeChild(left);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  Node  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(left);    Node  n.getParent().removeChild(left);	  	non-compiled	[CE]  ';'  expected	24	None	add
326	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  n.getNext().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(left);    n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	24	2	add
327	[BUG]  [BUGGY]          n.getParent().removeChild(left);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  n.getNext().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(left);    n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	24	2	add
328	[BUG]  [BUGGY]          n.getParent().removeChild(left);  node.getParent().removeChild(left);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  node.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(left);    node.getParent().removeChild(left);	  	non-compiled	[CE]  cannot  find  symbol  node	24	None	add
329	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	87	None	replace
330	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	87	None	replace
331	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  result);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  result);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	87	None	replace
332	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(left,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)	137	None	replace
333	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  right,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(left,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)	137	None	replace
334	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Double(left,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Double(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  this  :  new  Double(left,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(left,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	137	None	replace
335	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  left.cloneTree());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber,  left.cloneTree());	  return    newNumber!=    null?    null    :    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	100	None	replace
336	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  right.cloneTree());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber,  right.cloneTree());	  return    newNumber!=    null?    null    :    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	100	None	replace
337	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.cloneTree(),  result);  [CE]  no  suitable  constructor  found  for  Node(Node,double)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.cloneTree(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber.cloneTree(),  result);	  return    newNumber!=    null?    null    :    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,double)	100	None	replace
338	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.cloneTree(),  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.cloneTree(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber.cloneTree(),  left);	  return    newNumber!=    null?    null    :    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	100	None	replace
339	[BUG]  [BUGGY]  return  left.toString(),  newNumber);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.toString(),  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.toString(),  newNumber);	  return    left.toString();    	non-compiled	[CE]  ';'  expected	82	None	replace
340	[BUG]  [BUGGY]  return  left.toString()  +  newNumber.toString();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.toString()  +  newNumber.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.toString()  +  newNumber.toString();	  return    left.toString();    	non-compiled	[CE]  incompatible  types	82	None	replace
341	[BUG]  [BUGGY]  return  left.toString()  &&  newNumber.equals(right.toString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.toString()  &&  newNumber.equals(right.toString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.toString()  &&  newNumber.equals(right.toString());	  return    left.toString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	82	None	replace
342	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(right,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	146	None	replace
343	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	146	None	replace
344	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Node(newNumber);  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild().getNext()?  this  :  new  Node(newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber);    	non-compiled	[CE]  incompatible  types	146	None	replace
345	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    n.getFirstChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	136	None	replace
346	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  result);  [CE]  no  suitable  constructor  found  for  Double(Node,double)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  result);	  return    newNumber    ==    n.getFirstChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,double)	136	None	replace
347	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  right);	  return    newNumber    ==    n.getFirstChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	136	None	replace
348	[BUG]  [BUGGY]  return  newNumber  ==  n.getLastChild()?  this  :  new  Double(newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getLastChild()?  this  :  new  Double(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getLastChild()?  this  :  new  Double(newNumber);	  return    newNumber    ==    n.getFirstChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	136	None	replace
349	[BUG]  [BUGGY]  return  newNumber!=  n.getFirstChild()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  n.getFirstChild()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  n.getFirstChild()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    n.getFirstChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	136	None	replace
350	[BUG]  [BUGGY]  return  left  ==  newNumber?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  newNumber?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  newNumber?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    left    ==    newNumber?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	61	None	replace
351	[BUG]  [BUGGY]  return  left  ==  right?  left.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right?  left.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right?  left.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    newNumber?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	61	None	replace
352	[BUG]  [BUGGY]  return  left  ==  newNumber?  left.getFirstChild()  :  new  Node(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  newNumber?  left.getFirstChild()  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  newNumber?  left.getFirstChild()  :  new  Node(n,  newNumber);	  return    left    ==    newNumber?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	61	None	replace
353	[BUG]  [BUGGY]  return  left.next()?  newNumber  :  right.next();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.next()?  newNumber  :  right.next();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.next()?  newNumber  :  right.next();	  return    left.next();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
354	[BUG]  [BUGGY]  return  left.next(),  newNumber);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.next(),  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.next(),  newNumber);	  return    left.next();    	non-compiled	[CE]  ';'  expected	70	None	replace
355	[BUG]  [BUGGY]  return  newNumber,  left.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber,  left.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber,  left.doubleValue();	  return    newNumber,    right.doubleValue();    	non-compiled	[CE]  ';'  expected	138	None	replace
356	[BUG]  [BUGGY]  return  newNumber,  right.doubleValue()  -  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber,  right.doubleValue()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber,  right.doubleValue()  -  1;	  return    newNumber,    right.doubleValue();    	non-compiled	[CE]  ';'  expected	138	None	replace
357	[BUG]  [BUGGY]  return  newNumber,  right.doubleValue()  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber,  right.doubleValue()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber,  right.doubleValue()  +  1;	  return    newNumber,    right.doubleValue();    	non-compiled	[CE]  ';'  expected	138	None	replace
358	[BUG]  [BUGGY]  return  newNumber,  right.doubleValue()  /  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber,  right.doubleValue()  /  2;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber,  right.doubleValue()  /  2;	  return    newNumber,    right.doubleValue();    	non-compiled	[CE]  ';'  expected	138	None	replace
359	[BUG]  [BUGGY]  return  newNumber,  n.doubleValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber,  n.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber,  n.doubleValue();	  return    newNumber,    right.doubleValue();    	non-compiled	[CE]  ';'  expected	138	None	replace
360	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber,  left.cloneTree());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber,  left.cloneTree());	  return    newNumber    ==    null?    null    :    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	101	None	replace
361	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber,  right.cloneTree());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber,  right.cloneTree());	  return    newNumber    ==    null?    null    :    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	101	None	replace
362	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.cloneTree(),  result);  [CE]  no  suitable  constructor  found  for  Node(Node,double)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.cloneTree(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber.cloneTree(),  result);	  return    newNumber    ==    null?    null    :    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,double)	101	None	replace
363	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.cloneTree(),  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.cloneTree(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber.cloneTree(),  left);	  return    newNumber    ==    null?    null    :    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	101	None	replace
364	[BUG]  [BUGGY]  return  result.toString()  &&  newNumber.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.toString()  &&  newNumber.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.toString()  &&  newNumber.getLastChild().getString().endsWith( "__ "));	  return    result.toString();    	non-compiled	[CE]  	119	None	replace
365	[BUG]  [BUGGY]  return  result.toString()  &&  newNumber.getLastChild().getString().endsWith( "- "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.toString()  &&  newNumber.getLastChild().getString().endsWith( "- "));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.toString()  &&  newNumber.getLastChild().getString().endsWith( "- "));	  return    result.toString();    	non-compiled	[CE]  	119	None	replace
366	[BUG]  [BUGGY]  return  result.toString()  &&  newNumber.equals(n.toString());  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.toString()  &&  newNumber.equals(n.toString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.toString()  &&  newNumber.equals(n.toString());	  return    result.toString();    	non-compiled	[CE]  double  cannot  be  dereferenced	119	None	replace
367	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.replaceChild(n,  newNumber);	          n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	17	2	replace
368	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.replaceChild(n,  newNumber);	          n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	17	2	replace
369	[BUG]  [BUGGY]  n.removeChild(newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber  +  1);	          n.removeChild(newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	17	None	replace
370	[BUG]  [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  result);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  result);	  return    newNumber    ==    null?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	112	None	replace
371	[BUG]  [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  newNumber);	  return    newNumber    ==    null?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,Node)	112	None	replace
372	[BUG]  [BUGGY]  return  newNumber!=  null?  this  :  new  Node(newNumber,  left,  right,  result);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  this  :  new  Node(newNumber,  left,  right,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  this  :  new  Node(newNumber,  left,  right,  result);	  return    newNumber    ==    null?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	112	None	replace
373	[BUG]  [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(n,  left,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(n,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  this  :  new  Node(n,  left,  right);	  return    newNumber    ==    null?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	112	None	replace
374	[BUG]  [BUGGY]  return  newNumber!=  null?  this  :  new  Node(newNumber,  left,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  this  :  new  Node(newNumber,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  this  :  new  Node(newNumber,  left,  right);	  return    newNumber    ==    null?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	112	None	replace
375	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber,  result);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,double)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber,  result);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,double)	2	None	replace
376	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)	2	None	replace
377	[BUG]  [BUGGY]  return  left  ==  right?  this  :  new  Node(newNumber,  left,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right?  this  :  new  Node(newNumber,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right?  this  :  new  Node(newNumber,  left,  newNumber);	  return    newNumber    ==    left?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	115	None	replace
378	[BUG]  [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  result);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  result);	  return    newNumber    ==    left?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	115	None	replace
379	[BUG]  [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(n,  left,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(n,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  this  :  new  Node(n,  left,  right);	  return    newNumber    ==    left?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	115	None	replace
380	[BUG]  [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  newNumber);	  return    newNumber    ==    left?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,Node)	115	None	replace
381	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)	3	None	replace
382	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	3	None	replace
383	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getParent().replaceChild(left,  right);	          n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	126	2	replace
384	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().replaceChild(left,  right);	          n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	126	2	replace
385	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getNext().replaceChild(left,  newNumber);	          n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	126	2	replace
386	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getNext().replaceChild(left,  newNumber);	          n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	126	2	replace
387	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().replaceChild(left,  newNumber,  right);	          n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	126	None	replace
388	[BUG]  [BUGGY]  return  n.next  +  1;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.next  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.next  +  1;	  return    newNumber.next    +    1;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	42	None	replace
389	[BUG]  [BUGGY]  return  newNumber.next  +  2;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.next  +  2;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.next  +  2;	  return    newNumber.next    +    1;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	42	None	replace
390	[BUG]  [BUGGY]  return  newNumber.getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getNext()  +  1;	  return    newNumber.next    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	42	None	replace
391	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  NUMBER_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  NUMBER_FOLD_NUMBER_ERROR  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  NUMBER_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  NUMBER_FOLD_NUMBER_ERROR);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    MAX_FOLD_NUMBER_ERROR);    	non-compiled	[CE]  cannot  find  symbol  NUMBER_FOLD_NUMBER_ERROR	165	None	replace
392	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  resultDouble);  [CE]  cannot  find  symbol  resultDouble  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  resultDouble);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  resultDouble);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    MAX_FOLD_NUMBER_ERROR);    	non-compiled	[CE]  cannot  find  symbol  resultDouble	165	None	replace
393	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  DEFAULT_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  DEFAULT_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  DEFAULT_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  DEFAULT_FOLD_NUMBER_ERROR);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    MAX_FOLD_NUMBER_ERROR);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_FOLD_NUMBER_ERROR	165	None	replace
394	[BUG]  [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  result);  [CE]  no  suitable  constructor  found  for  Double(Node,double)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  result);	  return    left    ==    right.getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,double)	99	None	replace
395	[BUG]  [BUGGY]  return  newNumber  ==  right.getNext()?  this  :  new  Double(newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  right.getNext()?  this  :  new  Double(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  right.getNext()?  this  :  new  Double(newNumber);	  return    left    ==    right.getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	99	None	replace
396	[BUG]  [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  left);	  return    left    ==    right.getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	99	None	replace
397	[BUG]  [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  left.intValue());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  left.intValue());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  left.intValue());	  return    left    ==    right.getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
398	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  null);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,<null>)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  null);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,<null>)	166	None	replace
399	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  null);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,<null>)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  null);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,<null>)	166	None	replace
400	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  null,  result);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,<null>,double)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  null,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  null,  result);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,<null>,double)	166	None	replace
401	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  newNumber,  null);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,<null>)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  newNumber,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  newNumber,  null);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,<null>)	166	None	replace
402	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  result,  null);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,double,<null>)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  result,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  result,  null);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,double,<null>)	166	None	replace
403	[BUG]  [BUGGY]  return  left  ==  right.getLastChild()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getLastChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getLastChild()  :  new  Node(newNumber);	  return    left    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	141	None	replace
404	[BUG]  [BUGGY]  return  left!=  right.getLastChild()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  right.getLastChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  right.getLastChild()  :  new  Node(newNumber);	  return    left    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	141	None	replace
405	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()  :  new  Node(newNumber,  result);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()  :  new  Node(newNumber,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()  :  new  Node(newNumber,  result);	  return    left    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	141	None	replace
406	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    reportCodeChange();    n.removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	2	add
407	[BUG]  [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    reportCodeChange();    n.removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	2	add
408	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    reportCodeChange();    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	2	add
409	[BUG]  [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    reportCodeChange();    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	2	add
410	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	2	add
411	[BUG]  [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	2	add
412	[BUG]  [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  Node  n  =  left.getNext();  n.removeChild(newNumber);  reportCodeChange();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  Node  n  =  left.getNext();  n.removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    reportCodeChange();    Node  n  =  left.getNext();  n.removeChild(newNumber);  reportCodeChange();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	22	None	add
413	[BUG]  [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  node.removeChild(newNumber);  reportCodeChange();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  node.removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    reportCodeChange();    node.removeChild(newNumber);  reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  node	22	None	add
414	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	22	2	add
415	[BUG]  [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	22	2	add
416	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getFirstChild());  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber.getFirstChild());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	132	None	replace
417	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(n.getLastChild());  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(n.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(n.getLastChild());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	132	None	replace
418	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getLastChild(),  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getLastChild(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber.getLastChild(),  left);	  return    newNumber!=    null?    null    :    new    Node(newNumber.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	132	None	replace
419	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getLastChild(),  result);  [CE]  no  suitable  constructor  found  for  Node(Node,double)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getLastChild(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber.getLastChild(),  result);	  return    newNumber!=    null?    null    :    new    Node(newNumber.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,double)	132	None	replace
420	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getFirstChild());  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber.getFirstChild());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	132	None	replace
421	[BUG]  [BUGGY]  return  n.next  -  1;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.next  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.next  -  1;	  return    newNumber.next    -    1;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	43	None	replace
422	[BUG]  [BUGGY]  return  newNumber.next  -  2;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.next  -  2;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.next  -  2;	  return    newNumber.next    -    1;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	43	None	replace
423	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getParent().removeChild(right);	          n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	25	2	replace
424	[BUG]  [BUGGY]  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().removeChild(right);	          n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	25	2	replace
425	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getNext().removeChild(left);	          n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	25	2	replace
426	[BUG]  [BUGGY]  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getNext().removeChild(left);	          n.getParent().removeChild(left);    	compilable	  [FE]  RuntimeException  	25	2	replace
427	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	89	None	replace
428	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left.getLastChild());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	89	None	replace
429	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber,  result);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,double)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber,  result);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,double)	31	None	replace
430	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,double)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,double)	31	None	replace
431	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER_ERROR);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	31	None	replace
432	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(n,  right);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getParent().replaceChild(n,  right);  reportCodeChange();	          n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	19	2	replace
433	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(n,  right);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().replaceChild(n,  right);  reportCodeChange();	          n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	19	2	replace
434	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(n,  left);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getParent().replaceChild(n,  left);  reportCodeChange();	          n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	19	2	replace
435	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  reportCodeChange();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(n,  left);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().replaceChild(n,  left);  reportCodeChange();	          n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	19	2	replace
436	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getNext().replaceChild(n,  newNumber);  reportCodeChange();	          n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	19	2	replace
437	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getNext().replaceChild(n,  newNumber);  reportCodeChange();	          n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	19	2	replace
438	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,Node)	96	None	replace
439	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right,  result);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right,  result);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	96	None	replace
440	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  left,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  left,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	96	None	replace
441	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  left,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  left,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	96	None	replace
442	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	96	None	replace
443	[BUG]  [BUGGY]  return  n.intValue()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.intValue()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.intValue()  +  1;	  return    n.intValue();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
444	[BUG]  [BUGGY]  return  n.longValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.longValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.longValue();	  return    n.intValue();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
445	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right).doubleValue();	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	33	None	replace
446	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber),  right.doubleValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber),  right.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber),  right.doubleValue();	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  ';'  expected	33	None	replace
447	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  newNumber).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(n,  newNumber).doubleValue();	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	33	None	replace
448	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  newNumber).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  newNumber).doubleValue();	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	33	None	replace
449	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(right).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(right).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(right).doubleValue();	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	33	None	replace
450	[BUG]  [BUGGY]  return  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  node.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  node.getLastChild();	  return    newNumber.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	10	None	replace
451	[BUG]  [BUGGY]  return  newNumber.getLastChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getLastChild()  +  1;	  return    newNumber.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
452	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
453	[BUG]  [BUGGY]          n.removeChild(newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
454	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
455	[BUG]  [BUGGY]          n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
456	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    n.removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	16	2	add
457	[BUG]  [BUGGY]          n.removeChild(newNumber);  n.removeChild(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    n.removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	16	2	add
458	[BUG]  [BUGGY]          n.removeChild(newNumber);  node.removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  node.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    node.removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	16	None	add
459	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
460	[BUG]  [BUGGY]          n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
461	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	16	2	add
462	[BUG]  [BUGGY]          n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	16	2	add
463	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(right);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	158	2	add
464	[BUG]  [BUGGY]  n.removeChild(right);  n.removeChild(right);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	158	2	add
465	[BUG]  [BUGGY]  n.removeChild(right);  Node  right  =  left.getNext();  n.removeChild(right);  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  Node  right  =  left.getNext();  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    Node  right  =  left.getNext();  n.removeChild(right);	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	158	None	add
466	[BUG]  [BUGGY]  n.removeChild(right);  Node  right  =  left.getFirstChild();  n.removeChild(right);  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  Node  right  =  left.getFirstChild();  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    Node  right  =  left.getFirstChild();  n.removeChild(right);	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	158	None	add
467	[BUG]  [BUGGY]  n.removeChild(right);  Node  right  =  newNumber.getNext();  n.removeChild(right);  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  Node  right  =  newNumber.getNext();  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    Node  right  =  newNumber.getNext();  n.removeChild(right);	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	158	None	add
468	[BUG]  [BUGGY]  n.removeChild(right);  Node  right  =  n.getLastChild();  n.removeChild(right);  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  Node  right  =  n.getLastChild();  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    Node  right  =  n.getLastChild();  n.removeChild(right);	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	158	None	add
469	[BUG]  [BUGGY]  n.removeChild(right);  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  Node  right  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    Node  right  =  left.getNext();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	158	None	add
470	[BUG]  [BUGGY]  n.removeChild(right);  node.removeChild(right);  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  node.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    node.removeChild(right);	  	non-compiled	[CE]  cannot  find  symbol  node	158	None	add
471	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	12	2	add
472	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	12	2	add
473	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	12	2	add
474	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	12	2	add
475	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  Node  n.getParent().removeChild(newNumber);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  Node  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    Node  n.getParent().removeChild(newNumber);	  	non-compiled	[CE]  ';'  expected	12	None	add
476	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	12	2	add
477	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	12	2	add
478	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	12	2	add
479	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	12	2	add
480	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  node.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  node.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    node.getParent().removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	12	None	add
481	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	12	2	add
482	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	12	2	add
483	[BUG]  [BUGGY]  parent.replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  parent.replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	parent.replaceChild(n,  newNumber);	  if(newNumber!=    left)    {    return    newNumber    }    ;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  parent	27	None	replace
484	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	if(newNumber!=  left)  {  return  newNumber;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(newNumber!=    left)    {    return    newNumber    }    ;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
485	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=  left)  {  return  newNumber;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(newNumber!=    left)    {    return    newNumber    }    ;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
486	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber  ==  left)  {  return  newNumber;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	if(newNumber  ==  left)  {  return  newNumber;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(newNumber!=    left)    {    return    newNumber    }    ;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  RuntimeException  	27	2	replace
487	[BUG]  [BUGGY]  if(newNumber  ==  left)  {  return  newNumber;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber  ==  left)  {  return  newNumber;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber  ==  left)  {  return  newNumber;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(newNumber!=    left)    {    return    newNumber    }    ;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  RuntimeException  	27	2	replace
488	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber  ==  left)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	if(newNumber  ==  left)  {  return  newNumber;  }	  if(newNumber!=    left)    {    return    newNumber    }    ;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
489	[BUG]  [BUGGY]  if(newNumber  ==  left)  {  return  newNumber;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber  ==  left)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber  ==  left)  {  return  newNumber;  }	  if(newNumber!=    left)    {    return    newNumber    }    ;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
490	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(left);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
491	[BUG]  [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(left);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(left);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
492	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.getParent().removeChild(left);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.removeChild(newNumber);    n.getParent().removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
493	[BUG]  [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.getParent().removeChild(left);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.getParent().removeChild(left);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.removeChild(newNumber);    n.getParent().removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
494	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
495	[BUG]  [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(right);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
496	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.replaceChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.removeChild(newNumber);    n.replaceChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
497	[BUG]  [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.replaceChild(left,  newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.replaceChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.removeChild(newNumber);    n.replaceChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber  =  left.getNext();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	46	1	replace
499	[BUG]  [BUGGY]  newNumber  =  left.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber  =  left.getNext();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	46	1	replace
500	[BUG]  [BUGGY]  node.removeChild(left);  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.removeChild(left);	  return    newNumber.cloneTree();    Node    newNumber    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	46	None	replace
501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n  =  left.getNext();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	46	1	replace
502	[BUG]  [BUGGY]  n  =  left.getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n  =  left.getNext();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	46	1	replace
503	[BUG]  [BUGGY]  return  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  node.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  node.getFirstChild();	  return    newNumber.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	74	None	replace
504	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)	1	None	replace
505	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right,  result);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,double)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right,  result);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,double)	1	None	replace
506	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	1	None	replace
507	[BUG]  [BUGGY]  return  newNumber.substring(0,  newNumber.length());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.substring(0,  newNumber.length());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.substring(0,  newNumber.length());	  return    newNumber.substring(0,    newNumber.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
508	[BUG]  [BUGGY]  return  newNumber.substring(0,  n.length()  -  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.substring(0,  n.length()  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.substring(0,  n.length()  -  1);	  return    newNumber.substring(0,    newNumber.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
509	[BUG]  [BUGGY]  return  newNumber,  newNumber.substring(0,  newNumber.length()  -  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber,  newNumber.substring(0,  newNumber.length()  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber,  newNumber.substring(0,  newNumber.length()  -  1);	  return    newNumber.substring(0,    newNumber.length()    -    1);    	non-compiled	[CE]  ';'  expected	120	None	replace
510	[BUG]  [BUGGY]  return  newNumber.substring(0,  newNumber.length()));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.substring(0,  newNumber.length()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.substring(0,  newNumber.length()));	  return    newNumber.substring(0,    newNumber.length()    -    1);    	non-compiled	[CE]  ';'  expected	120	None	replace
511	[BUG]  [BUGGY]  return  string.substring(0,  newNumber.length()  -  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  string.substring(0,  newNumber.length()  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  string.substring(0,  newNumber.length()  -  1);	  return    newNumber.substring(0,    newNumber.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
512	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  Node  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    Node  newNumber  =  left.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	73	None	add
513	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    Node  newNumber  =  left.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	73	None	add
514	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  Node  newNumber  =  node.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  Node  newNumber  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    Node  newNumber  =  node.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	73	None	add
515	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  Node  newNumber  =  n.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  Node  newNumber  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    Node  newNumber  =  n.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	73	None	add
516	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  n.removeChild(newNumber);  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    n.removeChild(newNumber);	  	non-compiled	[CE]  unreachable  statement	73	None	add
517	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  newNumber.removeChild(n);  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  newNumber.removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    newNumber.removeChild(n);	  	non-compiled	[CE]  unreachable  statement	73	None	add
518	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  Node  newNumber  =  right.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  Node  newNumber  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    Node  newNumber  =  right.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	73	None	add
519	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(n,  newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(n,  newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(n,  newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	149	None	replace
520	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(newNumber,  left.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(newNumber,  left.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	149	None	replace
521	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber,  left):  new  Node(newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber,  left):  new  Node(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber,  left):  new  Node(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	149	None	replace
522	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(n,  newNumber):  new  Node(newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(n,  newNumber):  new  Node(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(n,  newNumber):  new  Node(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	149	None	replace
523	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(newNumber,  right.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(newNumber,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(newNumber,  right.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	149	None	replace
524	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Node(n,  newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Node(n,  newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Node(n,  newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	149	None	replace
525	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  newNumber,  right);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(left,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)	162	None	replace
526	[BUG]  [BUGGY]  return  left.getNext()?  this  :  new  Double(right,  newNumber);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext()?  this  :  new  Double(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext()?  this  :  new  Double(right,  newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(left,    newNumber);    	non-compiled	[CE]  incompatible  types	162	None	replace
527	[BUG]  [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(left,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getNext()?  this  :  new  Double(left,  newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(left,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	162	None	replace
528	[BUG]  [BUGGY]  return  left!=  right?  left.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  right?  left.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  right?  left.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    node?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	60	None	replace
529	[BUG]  [BUGGY]  return  node.cloneTree();  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  node.cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  node.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	8	None	replace
530	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  left.cloneTree();	  return    n.cloneTree();    	compilable	  [FE]  AssertionFailedError  	8	1	replace
531	[BUG]  [BUGGY]  return  left.cloneTree();  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.cloneTree();	  return    n.cloneTree();    	compilable	  [FE]  AssertionFailedError  	8	1	replace
532	[BUG]  [BUGGY]  return  n.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.clone();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.clone();	  return    n.cloneTree();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	8	None	replace
533	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	125	2	add
534	[BUG]  [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	125	2	add
535	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	125	2	add
536	[BUG]  [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	125	2	add
537	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	125	2	add
538	[BUG]  [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	125	2	add
539	[BUG]  [BUGGY]          n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(left,  newNumber);  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  Node  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(left,    newNumber);    Node  n.getParent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  ';'  expected	125	None	add
540	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	125	2	add
541	[BUG]  [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(left,    newNumber);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	125	2	add
542	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(0):  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  newNumber!=  null?  Node.newNumber(0):  newNumber;	  return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
543	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(0):  newNumber;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(0):  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(0):  newNumber;	  return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
544	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(1):  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  newNumber  ==  null?  Node.newNumber(1):  newNumber;	  return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
545	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(1):  newNumber;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(1):  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  Node.newNumber(1):  newNumber;	  return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
546	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  newNumber;  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  Node.newNumber(newNumber):  newNumber;	  return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	110	None	replace
547	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	20	2	add
548	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	20	2	add
549	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  Node  n.getParent().removeChild(newNumber);  reportCodeChange();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  Node  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    reportCodeChange();    Node  n.getParent().removeChild(newNumber);  reportCodeChange();	  	non-compiled	[CE]  ';'  expected	20	None	add
550	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	20	2	add
551	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	20	2	add
552	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	20	2	add
553	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	20	2	add
554	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getNext().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getNext().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	20	2	add
555	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getNext().removeChild(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getNext().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getNext().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	20	2	add
556	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  node.getParent().removeChild(newNumber);  reportCodeChange();  [CE]  cannot  find  symbol  node  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  node.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    reportCodeChange();    node.getParent().removeChild(newNumber);  reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  node	20	None	add
557	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(oldNumber);  reportCodeChange();  [CE]  cannot  find  symbol  oldNumber  [FE]                RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().removeChild(oldNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().removeChild(oldNumber);  reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  oldNumber	20	None	add
558	[BUG]  [BUGGY]  return  right.intValue()  -  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.intValue()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.intValue()  -  1;	  return    right.intValue();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
559	[BUG]  [BUGGY]  NodeTreeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTreeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTreeTraversal.traverse(compiler,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTreeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	154	None	replace
560	[BUG]  [BUGGY]  NodeTreeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTreeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTreeTraversal.traverse(compiler,  right,  newNumber);	  return    newNumber.cloneTree();    NodeTreeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	154	None	replace
561	[BUG]  [BUGGY]  node.cloneTree();  NodeTreeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.cloneTree();  NodeTreeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.cloneTree();  NodeTreeTraversal.traverse(compiler,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTreeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	154	None	replace
562	[BUG]  [BUGGY]  NodeTreeTraversal.traverse(compiler,  n,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTreeTraversal.traverse(compiler,  n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTreeTraversal.traverse(compiler,  n,  newNumber);	  return    newNumber.cloneTree();    NodeTreeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	154	None	replace
563	[BUG]  [BUGGY]  node.cloneTree();  NodeTreeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.cloneTree();  NodeTreeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.cloneTree();  NodeTreeTraversal.traverse(compiler,  right,  newNumber);	  return    newNumber.cloneTree();    NodeTreeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	154	None	replace
564	[BUG]  [BUGGY]  NodeTreeTraversal.traverse(compiler,  newNumber,  left);  [CE]  cannot  find  symbol  compiler  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTreeTraversal.traverse(compiler,  newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTreeTraversal.traverse(compiler,  newNumber,  left);	  return    newNumber.cloneTree();    NodeTreeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	154	None	replace
565	[BUG]  [BUGGY]  Node  newNumber  =  n.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  newNumber  =  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  newNumber  =  n.getNext();	  return    newNumber.getNext();    Node    newNumber    =    n.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	39	None	replace
566	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber  =  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber  =  n.getNext();	  return    newNumber.getNext();    Node    newNumber    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	39	1	replace
567	[BUG]  [BUGGY]  newNumber  =  n.getNext();  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber  =  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber  =  n.getNext();	  return    newNumber.getNext();    Node    newNumber    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	39	1	replace
568	[BUG]  [BUGGY]  Node  newNumber  =  node.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  newNumber  =  node.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  newNumber  =  node.getNext();	  return    newNumber.getNext();    Node    newNumber    =    n.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	39	None	replace
569	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getParent().removeChild(n);	  return    newNumber.getNext();    Node    newNumber    =    n.getNext();    	compilable	  [FE]  RuntimeException  	39	2	replace
570	[BUG]  [BUGGY]  n.getParent().removeChild(n);  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().removeChild(n);	  return    newNumber.getNext();    Node    newNumber    =    n.getNext();    	compilable	  [FE]  RuntimeException  	39	2	replace
571	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	14	2	add
572	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	14	2	add
573	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	14	2	add
574	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	14	2	add
575	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	14	2	add
576	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	14	2	add
577	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	14	2	add
578	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	14	2	add
579	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	14	2	add
580	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	14	2	add
581	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	14	2	add
582	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	14	2	add
583	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	14	2	add
584	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	14	2	add
585	[BUG]  [BUGGY]  return  newNumber.getLastChild();  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  Node  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    Node  newNumber  =  left.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	9	None	add
586	[BUG]  [BUGGY]  return  newNumber.getLastChild();  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    Node  newNumber  =  left.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	9	None	add
587	[BUG]  [BUGGY]  return  newNumber.getLastChild();  Node  newNumber  =  node.getLastChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  Node  newNumber  =  node.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    Node  newNumber  =  node.getLastChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	9	None	add
588	[BUG]  [BUGGY]  return  newNumber.getLastChild();  Node  newNumber  =  n.getLastChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  Node  newNumber  =  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    Node  newNumber  =  n.getLastChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	9	None	add
589	[BUG]  [BUGGY]  return  newNumber.getLastChild();  n.getParent().removeChild(newNumber);  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    n.getParent().removeChild(newNumber);	  	non-compiled	[CE]  unreachable  statement	9	None	add
590	[BUG]  [BUGGY]  return  newNumber.getLastChild();  n.removeChild(newNumber);  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    n.removeChild(newNumber);	  	non-compiled	[CE]  unreachable  statement	9	None	add
591	[BUG]  [BUGGY]  return  newNumber.getLastChild();  newNumber.removeChild(n);  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  newNumber.removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    newNumber.removeChild(n);	  	non-compiled	[CE]  unreachable  statement	9	None	add
592	[BUG]  [BUGGY]  newNumber  =  node.getNext();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber  =  node.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber  =  node.getNext();	  return    newNumber.getNext();    Node    newNumber    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
593	[BUG]  [BUGGY]  return  n.toString()  +  newNumber.toString();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.toString()  +  newNumber.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.toString()  +  newNumber.toString();	  return    n.toString();    	non-compiled	[CE]  incompatible  types	80	None	replace
594	[BUG]  [BUGGY]  return  result.intValue()  -  newNumber.intValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.intValue()  -  newNumber.intValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.intValue()  -  newNumber.intValue();	  return    result.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	95	None	replace
595	[BUG]  [BUGGY]  return  result.intValue()  /  MAX_FOLD_NUMBER;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.intValue()  /  MAX_FOLD_NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.intValue()  /  MAX_FOLD_NUMBER;	  return    result.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	95	None	replace
596	[BUG]  [BUGGY]  return  result.intValue()  -  MAX_FOLD_NUMBER;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.intValue()  -  MAX_FOLD_NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.intValue()  -  MAX_FOLD_NUMBER;	  return    result.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	95	None	replace
597	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)	30	None	replace
598	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right),  newNumber);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right),  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right),  newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  ';'  expected	30	None	replace
599	[BUG]  [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  this  :  new  Node(newNumber,  right);	  return    newNumber    ==    left?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	113	None	replace
600	[BUG]  [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  this  :  new  Node(n,  newNumber);	  return    newNumber    ==    left?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	113	None	replace
601	[BUG]  [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  this  :  new  Node(right,  newNumber);	  return    newNumber    ==    left?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	113	None	replace
602	[BUG]  [BUGGY]  return  left  ==  right?  this  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right?  this  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right?  this  :  new  Node(newNumber);	  return    newNumber    ==    left?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	113	None	replace
603	[BUG]  [BUGGY]  return(newNumber!=  null)?  n.next  :  new  Node(newNumber);  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return(newNumber!=  null)?  n.next  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return(newNumber!=  null)?  n.next  :  new  Node(newNumber);	  return    n.next;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	134	None	replace
604	[BUG]  [BUGGY]  return(newNumber  ==  null)?  n.next  :  new  Node(newNumber);  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return(newNumber  ==  null)?  n.next  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return(newNumber  ==  null)?  n.next  :  new  Node(newNumber);	  return    n.next;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	134	None	replace
605	[BUG]  [BUGGY]  return(newNumber  ==  null)?  n.next  :  new  Node(newNumber,  left,  right);  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return(newNumber  ==  null)?  n.next  :  new  Node(newNumber,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return(newNumber  ==  null)?  n.next  :  new  Node(newNumber,  left,  right);	  return    n.next;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	134	None	replace
606	[BUG]  [BUGGY]  return(newNumber!=  null)?  n.next  :  new  Node(newNumber,  left,  right);  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return(newNumber!=  null)?  n.next  :  new  Node(newNumber,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return(newNumber!=  null)?  n.next  :  new  Node(newNumber,  left,  right);	  return    n.next;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	134	None	replace
607	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(newNumber,  right);	  return    newNumber    ==    left?    null    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	114	None	replace
608	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(n,  newNumber);	  return    newNumber    ==    left?    null    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	114	None	replace
609	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(right,  newNumber);	  return    newNumber    ==    left?    null    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	114	None	replace
610	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  result);  [CE]  no  suitable  constructor  found  for  Node(Node,double)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(newNumber,  result);	  return    newNumber    ==    left?    null    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,double)	114	None	replace
611	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(left,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(left,  newNumber);	  return    newNumber    ==    left?    null    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	114	None	replace
612	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Number(newNumber.cloneTree());  [CE]  Number  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Number(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Number(newNumber.cloneTree());	  return    newNumber!=    null?    null    :    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  Number  is  abstract;  cannot  be  instantiated	102	None	replace
613	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Number(newNumber,  right.cloneTree());  [CE]  Number  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Number(newNumber,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Number(newNumber,  right.cloneTree());	  return    newNumber!=    null?    null    :    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  Number  is  abstract;  cannot  be  instantiated	102	None	replace
614	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Number(newNumber,  left.cloneTree());  [CE]  Number  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Number(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Number(newNumber,  left.cloneTree());	  return    newNumber!=    null?    null    :    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  Number  is  abstract;  cannot  be  instantiated	102	None	replace
615	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getNext().removeChild(newNumber);	          n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	13	2	replace
616	[BUG]  [BUGGY]  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getNext().removeChild(newNumber);	          n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	13	2	replace
617	[BUG]  [BUGGY]  return  n.cloneTree();  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  Node  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.cloneTree();    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	7	None	add
618	[BUG]  [BUGGY]  return  n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.cloneTree();    NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	add
619	[BUG]  [BUGGY]  return  n.cloneTree();  NodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  NodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.cloneTree();    NodeTraversal.traverse(compiler,  right,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	add
620	[BUG]  [BUGGY]  return  n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.cloneTree();    NodeTraversal.traverse(compiler,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	add
621	[BUG]  [BUGGY]  return  n.cloneTree();  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  Node  n  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.cloneTree();    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	7	None	add
622	[BUG]  [BUGGY]  return  n.cloneTree();  n.getParent().removeChild(newNumber);  [CE]  unreachable  statement  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.cloneTree();    n.getParent().removeChild(newNumber);	  	non-compiled	[CE]  unreachable  statement	7	None	add
623	[BUG]  [BUGGY]  return  n.cloneTree();  NodeTraversal.traverse(compiler,  n,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  NodeTraversal.traverse(compiler,  n,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.cloneTree();    NodeTraversal.traverse(compiler,  n,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	add
624	[BUG]  [BUGGY]  return  left  ==  right?  newNumber.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right?  newNumber.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right?  newNumber.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    node?    newNumber.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	62	None	replace
625	[BUG]  [BUGGY]  return  left!=  right?  newNumber.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  right?  newNumber.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  right?  newNumber.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    node?    newNumber.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	62	None	replace
626	[BUG]  [BUGGY]  return  left  ==  n?  newNumber.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  n?  newNumber.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  n?  newNumber.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    node?    newNumber.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	62	None	replace
627	[BUG]  [BUGGY]  return  right  ==  node?  newNumber.getFirstChild()  :  new  Node(newNumber);  [CE]  cannot  find  symbol  node  [FE]                                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right  ==  node?  newNumber.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right  ==  node?  newNumber.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    node?    newNumber.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	62	None	replace
628	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  this  :  new  Node(n,  newNumber);	  return    left    ==    right.getFirstChild()?    this    :    new    Node(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	97	None	replace
629	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  newNumber);	  return    left    ==    right.getFirstChild()?    this    :    new    Node(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	97	None	replace
630	[BUG]  [BUGGY]  return  newNumber  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  left);	  return    left    ==    right.getFirstChild()?    this    :    new    Node(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	97	None	replace
631	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(n,  newNumber,  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(n,  newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  this  :  new  Node(n,  newNumber,  left);	  return    left    ==    right.getFirstChild()?    this    :    new    Node(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	97	None	replace
632	[BUG]  [BUGGY]  return  left  ==  right.getLastChild()?  this  :  new  Node(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getLastChild()?  this  :  new  Node(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getLastChild()?  this  :  new  Node(newNumber,  left);	  return    left    ==    right.getFirstChild()?    this    :    new    Node(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	97	None	replace
633	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(left);    newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
634	[BUG]  [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(left);    newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
635	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(left);    newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	160	2	add
636	[BUG]  [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(left);    newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	160	2	add
637	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
638	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
639	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(left);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
640	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.removeChild(left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(left);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
641	[BUG]  [BUGGY]  newNumber.removeChild(left);  node.removeChild(left);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  node.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(left);    node.removeChild(left);	  	non-compiled	[CE]  cannot  find  symbol  node	160	None	add
642	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(left);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
643	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(left);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	160	2	add
644	[BUG]  [BUGGY]  return  newNumber  ==  left?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    newNumber    ==    left?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	90	None	replace
645	[BUG]  [BUGGY]  return  left.getFirstChild()  ==  newNumber?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()  ==  newNumber?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()  ==  newNumber?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    newNumber    ==    left?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	90	None	replace
646	[BUG]  [BUGGY]  return  left.getFirstChild()!=  newNumber?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()!=  newNumber?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()!=  newNumber?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    newNumber    ==    left?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	90	None	replace
647	[BUG]  [BUGGY]  return  newNumber  ==  left?  left.getFirstChild()  :  new  Node(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  left.getFirstChild()  :  new  Node(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  left.getFirstChild()  :  new  Node(n,  newNumber);	  return    newNumber    ==    left?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	90	None	replace
648	[BUG]  [BUGGY]  return  left.getFirstChild()  ==  newNumber?  left.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()  ==  newNumber?  left.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()  ==  newNumber?  left.getFirstChild()  :  new  Node(newNumber);	  return    newNumber    ==    left?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	90	None	replace
649	[BUG]  [BUGGY]  removeChild(newNumber);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	removeChild(newNumber);	  return    newNumber.getNext();    n.removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
650	[BUG]  [BUGGY]  n.getNext();  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext();  Node  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getNext();  Node  newNumber  =  left.getNext();	  return    newNumber.getNext();    Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	35	None	replace
651	[BUG]  [BUGGY]  Node  newNumber  =  left.getParent();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  newNumber  =  left.getParent();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  newNumber  =  left.getParent();	  return    newNumber.getNext();    Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	35	None	replace
652	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber,  right);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber,  right);	  return    left.getFirstChild().getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  incompatible  types	5	None	replace
653	[BUG]  [BUGGY]  return  n.getFirstChild().getNext()?  this  :  new  Double(newNumber);  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getFirstChild().getNext()?  this  :  new  Double(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getFirstChild().getNext()?  this  :  new  Double(newNumber);	  return    left.getFirstChild().getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  incompatible  types	5	None	replace
654	[BUG]  [BUGGY]  return  right.getFirstChild().getNext()?  this  :  new  Double(newNumber);  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.getFirstChild().getNext()?  this  :  new  Double(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.getFirstChild().getNext()?  this  :  new  Double(newNumber);	  return    left.getFirstChild().getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  incompatible  types	5	None	replace
655	[BUG]  [BUGGY]  return  newNumber.getFirstChild().getNext()?  left  :  new  Double(newNumber);  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild().getNext()?  left  :  new  Double(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getFirstChild().getNext()?  left  :  new  Double(newNumber);	  return    left.getFirstChild().getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  incompatible  types	5	None	replace
656	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Double(right,  newNumber);  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Double(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild().getNext()?  this  :  new  Double(right,  newNumber);	  return    left.getFirstChild().getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  incompatible  types	5	None	replace
657	[BUG]  [BUGGY]  return  left.doubleValue()  -  right.doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.doubleValue()  -  right.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.doubleValue()  -  right.doubleValue();	  return    left.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
658	[BUG]  [BUGGY]  return  left.doubleValue()  -  newNumber.doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.doubleValue()  -  newNumber.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.doubleValue()  -  newNumber.doubleValue();	  return    left.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
659	[BUG]  [BUGGY]  return  left.intValue()  -  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.intValue()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.intValue()  -  1;	  return    left.intValue();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
660	[BUG]  [BUGGY]  return  left.intValue()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.intValue()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.intValue()  +  1;	  return    left.intValue();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
661	[BUG]  [BUGGY]  if(newNumber!=  right)  {  return  newNumber  }  ;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  right)  {  return  newNumber  }  ;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=  right)  {  return  newNumber  }  ;  }	  if(newNumber!=    left)    {    return    newNumber    }    ;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
662	[BUG]  [BUGGY]  return  n.cloneTree()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.cloneTree()  +  1;	  return    newNumber.cloneTree()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	11	None	replace
663	[BUG]  [BUGGY]  return  left.cloneTree()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.cloneTree()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.cloneTree()  +  1;	  return    newNumber.cloneTree()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	11	None	replace
664	[BUG]  [BUGGY]  return  node.cloneTree()  +  1;  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  node.cloneTree()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  node.cloneTree()  +  1;	  return    newNumber.cloneTree()    +    1;    	non-compiled	[CE]  cannot  find  symbol  node	11	None	replace
665	[BUG]  [BUGGY]  return  this.newNumber.cloneTree();  [CE]  cannot  find  symbol  newNumber  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.newNumber.cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.newNumber.cloneTree();	  return    newNumber.cloneTree()    +    1;    	non-compiled	[CE]  cannot  find  symbol  newNumber	11	None	replace
666	[BUG]  [BUGGY]  return  newNumber!=  left;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  left;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  left;	  return    newNumber!=    n;    	non-compiled	[CE]  incompatible  types	144	None	replace
667	[BUG]  [BUGGY]  return  n!=  newNumber;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n!=  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n!=  newNumber;	  return    newNumber!=    n;    	non-compiled	[CE]  incompatible  types	144	None	replace
668	[BUG]  [BUGGY]  return  newNumber  ==  left;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left;	  return    newNumber!=    n;    	non-compiled	[CE]  incompatible  types	144	None	replace
669	[BUG]  [BUGGY]  return  newNumber.getType()  ==  Token.VAR;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()  ==  Token.VAR;	  return    newNumber!=    n;    	non-compiled	[CE]  incompatible  types	144	None	replace
670	[BUG]  [BUGGY]  return  newNumber.getType()  ==  Token.FUNCTION;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()  ==  Token.FUNCTION;	  return    newNumber!=    n;    	non-compiled	[CE]  incompatible  types	144	None	replace
671	[BUG]  [BUGGY]  return  newNumber.getType()!=  Token.VAR;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()!=  Token.VAR;	  return    newNumber!=    n;    	non-compiled	[CE]  incompatible  types	144	None	replace
672	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(right,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Double(right,  newNumber);	  return    newNumber    ==    left.getLastChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	4	None	replace
673	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(n,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Double(n,  newNumber);	  return    newNumber    ==    left.getLastChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	4	None	replace
674	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber,  result);  [CE]  no  suitable  constructor  found  for  Double(Node,double)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber,  result);	  return    newNumber    ==    left.getLastChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,double)	4	None	replace
675	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getNext(),  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getNext(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber.getNext(),  left);	  return    newNumber!=    null?    null    :    new    Node(newNumber.getNext());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	133	None	replace
676	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getNext(),  result);  [CE]  no  suitable  constructor  found  for  Node(Node,double)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getNext(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber.getNext(),  result);	  return    newNumber!=    null?    null    :    new    Node(newNumber.getNext());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,double)	133	None	replace
677	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  left.getNext());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  left.getNext());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber,  left.getNext());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getNext());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	133	None	replace
678	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(n.getNext());  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(n.getNext());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(n.getNext());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getNext());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	133	None	replace
679	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  right,  result);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  right,  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  newNumber,  right,  result);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	85	None	replace
680	[BUG]  [BUGGY]  return  left.longValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.longValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.longValue();	  return    newNumber.longValue();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
681	[BUG]  [BUGGY]  return  right.longValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.longValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.longValue();	  return    newNumber.longValue();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
682	[BUG]  [BUGGY]  return  result.longValue();  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.longValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.longValue();	  return    newNumber.longValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	56	None	replace
683	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.replaceChild(left,  newNumber);	  n.removeChild(right);    	compilable	  [FE]  RuntimeException  	159	2	replace
684	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.replaceChild(left,  newNumber);	  n.removeChild(right);    	compilable	  [FE]  RuntimeException  	159	2	replace
685	[BUG]  [BUGGY]  n.removeChild(old);  [CE]  cannot  find  symbol  old  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(old);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(old);	  n.removeChild(right);    	non-compiled	[CE]  cannot  find  symbol  old	159	None	replace
686	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(right);  n.removeChild(newNumber);	          n.removeChild(left);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	124	2	replace
687	[BUG]  [BUGGY]  n.removeChild(right);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);  n.removeChild(newNumber);	          n.removeChild(left);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	124	2	replace
688	[BUG]  [BUGGY]  return  newNumber.toString(),  result  +  2;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.toString(),  result  +  2;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString(),  result  +  2;	  return    newNumber.toString(),    result;    	non-compiled	[CE]  ';'  expected	83	None	replace
689	[BUG]  [BUGGY]  return  left.getFirstChild()!=  newNumber?  left.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()!=  newNumber?  left.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()!=  newNumber?  left.getFirstChild()  :  new  Node(newNumber);	  return    newNumber    ==    left?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	90	None	replace
690	[BUG]  [BUGGY]  return  left  ==  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    newNumber    ==    left?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	90	None	replace
691	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	73	None	add
692	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    NodeTraversal.traverse(compiler,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	73	None	add
693	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  NodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  NodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    NodeTraversal.traverse(compiler,  right,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	73	None	add
694	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  Node  left  =  n.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  Node  left  =  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    Node  left  =  n.getLastChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	73	None	add
695	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  null;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	if(newNumber!=  left)  {  return  null;  }	  if(newNumber!=    left)    {    return    newNumber;    }    	compilable	  [FE]  AssertionFailedError  	29	1	replace
696	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  null;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=  left)  {  return  null;  }	  if(newNumber!=    left)    {    return    newNumber;    }    	compilable	  [FE]  AssertionFailedError  	29	1	replace
697	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  this;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  this;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=  left)  {  return  this;  }	  if(newNumber!=    left)    {    return    newNumber;    }    	non-compiled	[CE]  incompatible  types	29	None	replace
698	[BUG]  [BUGGY]  newNumber.removeChild(left);  Node  left  =  n.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  Node  left  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(left);    Node  left  =  n.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	160	None	add
699	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(left);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	160	2	add
700	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(left);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	160	2	add
701	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	24	2	add
702	[BUG]  [BUGGY]          n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	24	2	add
703	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	44	None	add
704	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    NodeTraversal.traverse(compiler,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	44	None	add
705	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  NodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  NodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    NodeTraversal.traverse(compiler,  right,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	44	None	add
706	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  Node  left  =  n.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  Node  left  =  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    Node  left  =  n.getLastChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
707	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  Node  left  =  n.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  Node  left  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    Node  left  =  n.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	add
708	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    NodeTraversal.traverse(compiler,  left,  newNumber,  right);	  	non-compiled	[CE]  cannot  find  symbol  compiler	44	None	add
709	[BUG]  [BUGGY]  return  result.doubleValue()  -  resultDouble.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.doubleValue()  -  resultDouble.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.doubleValue()  -  resultDouble.doubleValue();	  return    result.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	121	None	replace
710	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  newNumber,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,double)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  newNumber,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,double)	31	None	replace
711	[BUG]  [BUGGY]  return  n.getNext();  newNumber.removeChild(newNumber);  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getNext();  newNumber.removeChild(newNumber);	  return    newNumber.getNext();    newNumber.removeChild(n);    	non-compiled	[CE]  unreachable  statement	41	None	replace
712	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(right,  newNumber);	          n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	126	None	replace
713	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(n,  right);  [CE]  void  cannot  be  dereferenced  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(left,  newNumber).replaceChild(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().replaceChild(left,  newNumber).replaceChild(n,  right);	          n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	126	None	replace
714	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(left,  newNumber  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().replaceChild(left,  newNumber  +  1);	          n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	126	None	replace
715	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber).cloneTree();  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber).cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber).cloneTree();	  return    newNumber!=    null?    null    :    new    Node(newNumber).cloneTree();    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	103	None	replace
716	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  left  =  left.getFirstChild();	  return    newNumber.getNext();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	40	None	replace
717	[BUG]  [BUGGY]  return  left.getNext();  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext();  Node  newNumber  =  left.getFirstChild();	  return    newNumber.getNext();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	40	None	replace
718	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  cannot  find  symbol  DEFAULT_GETELEM_INDEX_ERROR  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  DEFAULT_GETELEM_INDEX_ERROR);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    MAX_FOLD_NUMBER_ERROR);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_GETELEM_INDEX_ERROR	165	None	replace
719	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  n);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  n);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    MAX_FOLD_NUMBER_ERROR);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	165	None	replace
720	[BUG]  [BUGGY]  return  newNumber  ==  null?  left  :  new  Node(newNumber.getString(),  result);  [CE]  no  suitable  constructor  found  for  Node(String,double)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  left  :  new  Node(newNumber.getString(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  left  :  new  Node(newNumber.getString(),  result);	  return    newNumber    ==    null?    left    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String,double)	145	None	replace
721	[BUG]  [BUGGY]  return  newNumber!=  null?  left  :  new  Node(newNumber,  right.getString());  [CE]  no  suitable  constructor  found  for  Node(Node,String)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  left  :  new  Node(newNumber,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  left  :  new  Node(newNumber,  right.getString());	  return    newNumber    ==    null?    left    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,String)	145	None	replace
722	[BUG]  [BUGGY]  return  n.getNext();  n.getParent().replaceChild(n,  newNumber);  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getNext();  n.getParent().replaceChild(n,  newNumber);	  return    newNumber.getNext();    n.getParent().removeChild(newNumber);    	non-compiled	[CE]  unreachable  statement	168	None	replace
723	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  return  newNumber.getParent().removeChild(newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  newNumber  =  left.getNext();  return  newNumber.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  newNumber  =  left.getNext();  return  newNumber.getParent().removeChild(newNumber);	  return    newNumber.getNext();    n.getParent().removeChild(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	168	None	replace
724	[BUG]  [BUGGY]  return  left.next  -  1;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.next  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.next  -  1;	  return    newNumber.next    -    1;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	43	None	replace
725	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber).doubleValue();	  return    newNumber    ==    n.getFirstChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	136	None	replace
726	[BUG]  [BUGGY]  return  n  ==  left.getFirstChild()?  this  :  new  Double(newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n  ==  left.getFirstChild()?  this  :  new  Double(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n  ==  left.getFirstChild()?  this  :  new  Double(newNumber);	  return    newNumber    ==    n.getFirstChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	136	None	replace
727	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Node(newNumber,  left.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Node(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Node(newNumber,  left.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	149	None	replace
728	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(left,  newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(left,  newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(left,  newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	149	None	replace
729	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(Math.abs(newNumber.cloneTree()));  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(Math.abs(newNumber.cloneTree()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Node(Math.abs(newNumber.cloneTree()));	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	149	None	replace
730	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
731	[BUG]  [BUGGY]          n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
732	[BUG]  [BUGGY]          n.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber);  n.removeChild(newNumber);  [CE]  cannot  find  symbol  compiler  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    NodeTraversal.traverse(compiler,  left,  newNumber);  n.removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	add
733	[BUG]  [BUGGY]          n.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  n.removeChild(newNumber);  [CE]  cannot  find  symbol  compiler  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    NodeTraversal.traverse(compiler,  left,  newNumber,  this);  n.removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	add
734	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
735	[BUG]  [BUGGY]          n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
736	[BUG]  [BUGGY]          n.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	add
737	[BUG]  [BUGGY]          n.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]              RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    NodeTraversal.traverse(compiler,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	add
738	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	12	2	add
739	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	12	2	add
740	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left.cloneTree());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left.cloneTree());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	146	None	replace
741	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	146	None	replace
742	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	123	2	add
743	[BUG]  [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	123	2	add
744	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.addChildToFront(left);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.removeChild(newNumber);    n.addChildToFront(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
745	[BUG]  [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.addChildToFront(left);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.addChildToFront(left);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.removeChild(newNumber);    n.addChildToFront(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
746	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR.longValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR.longValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  NEGATING_A_NON_NUMBER_ERROR.longValue();	  return    newNumber.longValue();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
747	[BUG]  [BUGGY]  return  left  ==  right?  null  :  new  Node(newNumber.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right?  null  :  new  Node(newNumber.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right?  null  :  new  Node(newNumber.getString());	  return    newNumber    ==    left?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	111	None	replace
748	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber.getString(),  result);  [CE]  no  suitable  constructor  found  for  Node(String,double)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber.getString(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(newNumber.getString(),  result);	  return    newNumber    ==    left?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String,double)	111	None	replace
749	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(right);    newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	158	2	add
750	[BUG]  [BUGGY]  n.removeChild(right);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	158	2	add
751	[BUG]  [BUGGY]  n.removeChild(right);  Node  right  =  left.getNext();  n.replaceChild(right,  newNumber);  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  Node  right  =  left.getNext();  n.replaceChild(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    Node  right  =  left.getNext();  n.replaceChild(right,  newNumber);	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	158	None	add
752	[BUG]  [BUGGY]  return  left.toString()  +  newNumber;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.toString()  +  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.toString()  +  newNumber;	  return    left.toString();    	non-compiled	[CE]  incompatible  types	82	None	replace
753	[BUG]  [BUGGY]  return  left.getNext()?  this  :  new  Double(newNumber);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext()?  this  :  new  Double(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext()?  this  :  new  Double(newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(right);    	non-compiled	[CE]  incompatible  types	163	None	replace
754	[BUG]  [BUGGY]  return  left!=  right.getNext()?  this  :  new  Double(newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  right.getNext()?  this  :  new  Double(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  right.getNext()?  this  :  new  Double(newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	163	None	replace
755	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(left);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getParent().removeChild(left);  reportCodeChange();	          n.getParent().removeChild(newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	21	2	replace
756	[BUG]  [BUGGY]  n.getParent().removeChild(left);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().removeChild(left);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().removeChild(left);  reportCodeChange();	          n.getParent().removeChild(newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	21	2	replace
757	[BUG]  [BUGGY]  return  right  ==  n?  newNumber.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right  ==  n?  newNumber.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right  ==  n?  newNumber.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    node?    newNumber.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	62	None	replace
758	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  left.getFirstChild();	  return    newNumber.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	74	1	replace
759	[BUG]  [BUGGY]  return  left.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild();	  return    newNumber.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	74	1	replace
760	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(left.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.setString(left.getString());	          newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	130	2	replace
761	[BUG]  [BUGGY]  newNumber.setString(left.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(left.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.setString(left.getString());	          newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	130	2	replace
762	[BUG]  [BUGGY]  newNumber.setString(newString);  [CE]  cannot  find  symbol  newString  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(newString);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.setString(newString);	          newNumber.setString(n.getString());    	non-compiled	[CE]  cannot  find  symbol  newString	130	None	replace
763	[BUG]  [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	115	None	replace
764	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getParent());  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getParent());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber.getParent());	  return    newNumber.getParent();    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	79	None	replace
765	[BUG]  [BUGGY]  return  left  ==  left.getNext()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  left.getNext()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  left.getNext()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	98	None	replace
766	[BUG]  [BUGGY]  return  left  ==  newNumber.getNext()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  newNumber.getNext()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  newNumber.getNext()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	98	None	replace
767	[BUG]  [BUGGY]  return  n.cloneTree();  n.removeChild(newNumber);  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.cloneTree();  n.removeChild(newNumber);	  return    newNumber.cloneTree();    n.removeChild(newNumber);    	non-compiled	[CE]  unreachable  statement	52	None	replace
768	[BUG]  [BUGGY]  node.traverse(compiler,  n,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.traverse(compiler,  n,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.traverse(compiler,  n,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
769	[BUG]  [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  n,  left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  n,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.cloneTree();  NodeTraversal.traverse(compiler,  n,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	94	None	replace
770	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getNext(),  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getNext(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber.getNext(),  left);	  return    newNumber!=    null?    null    :    new    Node(newNumber.getNext());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	133	None	replace
771	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.addChildToFront(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.addChildToFront(newNumber);	          n.removeChild(left);    	compilable	  [FE]  RuntimeException  	128	2	replace
772	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.addChildToFront(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.addChildToFront(newNumber);	          n.removeChild(left);    	compilable	  [FE]  RuntimeException  	128	2	replace
773	[BUG]  [BUGGY]  n.removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(left,  newNumber);	          n.removeChild(left);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	128	None	replace
774	[BUG]  [BUGGY]  return  n.getNext();  Node  newNumber  =  n.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  Node  newNumber  =  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getNext();  Node  newNumber  =  n.getNext();	  return    newNumber.getNext();    Node    newNumber    =    n.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	39	None	replace
775	[BUG]  [BUGGY]  return  newNumber.getNext();  Node  newNumber  =  newNumber.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getNext();  Node  newNumber  =  newNumber.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getNext();  Node  newNumber  =  newNumber.getNext();	  return    newNumber.getNext();    Node    newNumber    =    n.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	39	None	replace
776	[BUG]  [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  node	49	None	replace
777	[BUG]  [BUGGY]  n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	49	None	replace
778	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber,  null);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,<null>)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber,  null);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,<null>)	166	None	replace
779	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  null,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  null,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  null,  MAX_FOLD_NUMBER_ERROR);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    null);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	166	None	replace
780	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  MAX_FOLD_NUMBER_ERROR);	  return    newNumber    ==    left.getLastChild()?    this    :    new    Node(newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	88	None	replace
781	[BUG]  [BUGGY]  return  left.getNext();  newNumber.removeChild(newNumber);  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext();  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext();  newNumber.removeChild(newNumber);	  return    newNumber.getNext();    newNumber.removeChild(left);    	non-compiled	[CE]  unreachable  statement	167	None	replace
782	[BUG]  [BUGGY]  return  left.getNext();  newNumber.removeChild(left);  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext();  newNumber.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext();  newNumber.removeChild(left);	  return    newNumber.getNext();    newNumber.removeChild(left);    	non-compiled	[CE]  unreachable  statement	167	None	replace
783	[BUG]  [BUGGY]  return  left.getNext();  newNumber.removeChild(right);  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext();  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext();  newNumber.removeChild(right);	  return    newNumber.getNext();    newNumber.removeChild(left);    	non-compiled	[CE]  unreachable  statement	167	None	replace
784	[BUG]  [BUGGY]  return  left.getNext();  newNumber.removeChild(n);  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext();  newNumber.removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext();  newNumber.removeChild(n);	  return    newNumber.getNext();    newNumber.removeChild(left);    	non-compiled	[CE]  unreachable  statement	167	None	replace
785	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  left  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  left  =  left.getNext();	  return    newNumber.getNext();    newNumber.removeChild(left);    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	167	None	replace
786	[BUG]  [BUGGY]  return  right.toString()  +  1;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.toString()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.toString()  +  1;	  return    newNumber.toString()    +    1;    	non-compiled	[CE]  incompatible  types	151	None	replace
787	[BUG]  [BUGGY]  return  node.toString()  +  1;  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  node.toString()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  node.toString()  +  1;	  return    newNumber.toString()    +    1;    	non-compiled	[CE]  cannot  find  symbol  node	151	None	replace
788	[BUG]  [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	47	None	replace
789	[BUG]  [BUGGY]  n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	47	None	replace
790	[BUG]  [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.cloneTree();  NodeTraversal.traverse(compiler,  right,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	47	None	replace
791	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber,  left);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber,  left);	  return    left.getFirstChild().getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  incompatible  types	5	None	replace
792	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber,  left.getLastChild());  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber,  left.getLastChild());	  return    left.getFirstChild().getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  incompatible  types	5	None	replace
793	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild());  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  this  :  new  Double(newNumber,  left.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	116	None	replace
794	[BUG]  [BUGGY]  return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right.getLastChild());  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	116	None	replace
795	[BUG]  [BUGGY]  return  n  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	85	None	replace
796	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  left,  newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  left,  newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,Node)	85	None	replace
797	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  left,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  left,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	85	None	replace
798	[BUG]  [BUGGY]  return  nextNode(right.next());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  nextNode(right.next());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  nextNode(right.next());	  return    right.next();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
799	[BUG]  [BUGGY]  n.cloneTree();  NodeTreeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.cloneTree();  NodeTreeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.cloneTree();  NodeTreeTraversal.traverse(compiler,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTreeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	91	None	replace
800	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(left).doubleValue();	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	33	None	replace
801	[BUG]  [BUGGY]  return  left.getNext()?  this  :  new  Double(newNumber).doubleValue();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext()?  this  :  new  Double(newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext()?  this  :  new  Double(newNumber).doubleValue();	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  incompatible  types	33	None	replace
802	[BUG]  [BUGGY]  return  result!=  null?  newNumber.toString()  :  result.toString();  [CE]  incomparable  types:  double  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result!=  null?  newNumber.toString()  :  result.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result!=  null?  newNumber.toString()  :  result.toString();	  return    result.toString();    	non-compiled	[CE]  incomparable  types:  double  and  <null>	119	None	replace
803	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toString();  [CE]  incomparable  types:  double  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result!=  null?  null  :  result.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result!=  null?  null  :  result.toString();	  return    result.toString();    	non-compiled	[CE]  incomparable  types:  double  and  <null>	119	None	replace
804	[BUG]  [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);	  return    newNumber    ==    null?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	112	None	replace
805	[BUG]  [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER_ERROR);	  return    newNumber    ==    null?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	112	None	replace
806	[BUG]  [BUGGY]  return  newNumber!=  null?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);	  return    newNumber    ==    null?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	112	None	replace
807	[BUG]  [BUGGY]  return  left.next(),  newNumber;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.next(),  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.next(),  newNumber;	  return    left.next();    	non-compiled	[CE]  ';'  expected	70	None	replace
808	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    reportCodeChange();    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	22	2	add
809	[BUG]  [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    reportCodeChange();    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	22	2	add
810	[BUG]  [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getGrandparent().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getGrandparent().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(left,    newNumber);    n.getGrandparent().replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	125	None	add
811	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,double)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,double)	2	None	replace
812	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,double)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  newNumber,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,double)	2	None	replace
813	[BUG]  [BUGGY]  Node  node  =  node.getNext();  [CE]  variable  node  might  not  have  been  initialized  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  node  =  node.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  node  =  node.getNext();	  return    newNumber.getNext();    Node    newNumber    =    node.getNext();    	non-compiled	[CE]  variable  node  might  not  have  been  initialized	36	None	replace
814	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getString(),  result);  [CE]  no  suitable  constructor  found  for  Node(String,double)  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getString(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber.getString(),  result);	  return    newNumber!=    null?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String,double)	131	None	replace
815	[BUG]  [BUGGY]  return  left.cloneTree();  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.cloneTree();  Node  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.cloneTree();  Node  newNumber  =  left.getFirstChild();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	51	None	replace
816	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  left.getNext();	  return    n.getNext();    	compilable	  [FE]  AssertionFailedError  	77	1	replace
817	[BUG]  [BUGGY]  return  left.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext();	  return    n.getNext();    	compilable	  [FE]  AssertionFailedError  	77	1	replace
818	[BUG]  [BUGGY]  return  n!=  left.getFirstChild();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n!=  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n!=  left.getFirstChild();	  return    newNumber!=    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	143	None	replace
819	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild();	  return    newNumber!=    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	143	None	replace
820	[BUG]  [BUGGY]  return  left  ==  n?  left.getFirstChild()  :  new  Node(right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  n?  left.getFirstChild()  :  new  Node(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  n?  left.getFirstChild()  :  new  Node(right,  newNumber);	  return    left    ==    n?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	63	None	replace
821	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  left.getLastChild();	  return    newNumber.getLastChild();    	compilable	  [FE]  AssertionFailedError  	10	1	replace
822	[BUG]  [BUGGY]  return  left.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getLastChild();	  return    newNumber.getLastChild();    	compilable	  [FE]  AssertionFailedError  	10	1	replace
823	[BUG]  [BUGGY]  return  left.getNext();  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext();  Node  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext();  Node  newNumber  =  left.getNext();	  return    newNumber.getNext();    Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	35	None	replace
824	[BUG]  [BUGGY]  return  left.doubleValue()  -(newNumber.doubleValue());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.doubleValue()  -(newNumber.doubleValue());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.doubleValue()  -(newNumber.doubleValue());	  return    left.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
825	[BUG]  [BUGGY]  return  left.cloneTree();  newNumber.removeChild(newNumber);  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.cloneTree();  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.cloneTree();  newNumber.removeChild(newNumber);	  return    newNumber.cloneTree();    newNumber.removeChild(left);    	non-compiled	[CE]  unreachable  statement	152	None	replace
826	[BUG]  [BUGGY]  return  left.cloneTree();  newNumber.removeChild(left);  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.cloneTree();  newNumber.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.cloneTree();  newNumber.removeChild(left);	  return    newNumber.cloneTree();    newNumber.removeChild(left);    	non-compiled	[CE]  unreachable  statement	152	None	replace
827	[BUG]  [BUGGY]  return  left.cloneTree();  newNumber.removeChild(right);  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.cloneTree();  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.cloneTree();  newNumber.removeChild(right);	  return    newNumber.cloneTree();    newNumber.removeChild(left);    	non-compiled	[CE]  unreachable  statement	152	None	replace
828	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  right);	  return    left    ==    right.getFirstChild()?    this    :    new    Node(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	97	None	replace
829	[BUG]  [BUGGY]  return  n  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	3	None	replace
830	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	3	None	replace
831	[BUG]  [BUGGY]  return  n.next  +  newNumber;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.next  +  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.next  +  newNumber;	  return    n.next;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	134	None	replace
832	[BUG]  [BUGGY]  return  left.next;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.next;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.next;	  return    n.next;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	134	None	replace
833	[BUG]  [BUGGY]  return  n.nextNumber;  [CE]  cannot  find  symbol  nextNumber  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.nextNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.nextNumber;	  return    n.next;    	non-compiled	[CE]  cannot  find  symbol  nextNumber	134	None	replace
834	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	117	None	replace
835	[BUG]  [BUGGY]  return  n  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	89	None	replace
836	[BUG]  [BUGGY]  return  n.toString()  + "n ";  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.toString()  + "n ";  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.toString()  + "n ";	  return    n.toString();    	non-compiled	[CE]  incompatible  types	80	None	replace
837	[BUG]  [BUGGY]  return  n.toString()  +  newNumber;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.toString()  +  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.toString()  +  newNumber;	  return    n.toString();    	non-compiled	[CE]  incompatible  types	80	None	replace
838	[BUG]  [BUGGY]          newNumber.setString(n.getString());  Node  n  =  left.getNext();  newNumber.setString(n.getString());  [CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  Node  n  =  left.getNext();  newNumber.setString(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    Node  n  =  left.getNext();  newNumber.setString(n.getString());	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	129	None	add
839	[BUG]  [BUGGY]          newNumber.setString(n.getString());  newNumber.setLength(n.getLength());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  newNumber.setLength(n.getLength());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    newNumber.setLength(n.getLength());	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
840	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneNode();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  n.cloneNode();	  return    n.cloneTree();    	compilable	  [FE]  AssertionFailedError  	8	1	replace
841	[BUG]  [BUGGY]  return  n.cloneNode();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneNode();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.cloneNode();	  return    n.cloneTree();    	compilable	  [FE]  AssertionFailedError  	8	1	replace
842	[BUG]  [BUGGY]  return  newNumber.substring(0,  newNumber.length())-  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.substring(0,  newNumber.length())-  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.substring(0,  newNumber.length())-  1);	  return    newNumber.substring(0,    newNumber.length()    -    1);    	non-compiled	[CE]  ';'  expected	120	None	replace
843	[BUG]  [BUGGY]  return  newNumber.substring(0,  oldNumber.length()  -  1);  [CE]  cannot  find  symbol  oldNumber  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.substring(0,  oldNumber.length()  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.substring(0,  oldNumber.length()  -  1);	  return    newNumber.substring(0,    newNumber.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol  oldNumber	120	None	replace
844	[BUG]  [BUGGY]  return  left.getType()  ==  Token.BLOCK;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getType()  ==  Token.BLOCK;	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  incompatible  types	142	None	replace
845	[BUG]  [BUGGY]  return  result.getType()  ==  Token.BLOCK;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.getType()  ==  Token.BLOCK;	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  double  cannot  be  dereferenced	142	None	replace
846	[BUG]  [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.EXPR_RESULT;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.EXPR_RESULT;	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  incompatible  types	142	None	replace
847	[BUG]  [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.GETELEM;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.GETELEM;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()  ==  Token.BLOCK  ||  newNumber.getType()  ==  Token.GETELEM;	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  incompatible  types	142	None	replace
848	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right));	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  ';'  expected	1	None	replace
849	[BUG]  [BUGGY]  return  result  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber);  [CE]  incomparable  types:  double  and  Node  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    result);    	non-compiled	[CE]  incomparable  types:  double  and  Node	86	None	replace
850	[BUG]  [BUGGY]  return  n.cloneTree();  n.removeChild(left);  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.cloneTree();    n.removeChild(left);	  	non-compiled	[CE]  unreachable  statement	7	None	add
851	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Number(newNumber,  left.cloneTree());  [CE]  Number  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Number(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Number(newNumber,  left.cloneTree());	  return    newNumber!=    null?    null    :    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  Number  is  abstract;  cannot  be  instantiated	102	None	replace
852	[BUG]  [BUGGY]  n.getName().replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getName().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getName().replaceChild(left,  newNumber);	          n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
853	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	14	2	add
854	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	14	2	add
855	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	14	2	add
856	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	14	2	add
857	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  left);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	14	2	add
858	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  reportCodeChange();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  left);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	14	2	add
859	[BUG]  [BUGGY]  return  left.cloneTree();  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.cloneTree();  Node  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.cloneTree();  Node  newNumber  =  left.getNext();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	46	None	replace
860	[BUG]  [BUGGY]  n.cloneTree();  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.cloneTree();  Node  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.cloneTree();  Node  newNumber  =  left.getNext();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	46	None	replace
861	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  newNumber  =  Node.newNumber(left);  n.removeChild(newNumber);  return  newNumber;  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  newNumber  =  Node.newNumber(left);  n.removeChild(newNumber);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    newNumber  =  Node.newNumber(left);  n.removeChild(newNumber);  return  newNumber;	  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	156	None	add
862	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    NodeTraversal.traverse(compiler,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	156	None	add
863	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	156	None	add
864	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  n.removeChild(newNumber);  return  newNumber;  [CE]  cannot  find  symbol  compiler  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  n.removeChild(newNumber);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    NodeTraversal.traverse(compiler,  left,  newNumber,  this);  n.removeChild(newNumber);  return  newNumber;	  	non-compiled	[CE]  cannot  find  symbol  compiler	156	None	add
865	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(n,  newNumber);  return  newNumber;  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(n,  newNumber);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    newNumber  =  Node.newNumber(left);  n.getParent().replaceChild(n,  newNumber);  return  newNumber;	  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	156	None	add
866	[BUG]  [BUGGY]  node.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	105	None	replace
867	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(left):  newNumber;  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(left):  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  Node.newNumber(left):  newNumber;	  return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	110	None	replace
868	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(1):  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  newNumber!=  null?  Node.newNumber(1):  newNumber;	  return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
869	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(1):  newNumber;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(1):  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(1):  newNumber;	  return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    	compilable	  [FE]  AssertionFailedError  	110	1	replace
870	[BUG]  [BUGGY]  n.removeChild(newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber).replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber).replaceChild(left,  newNumber);	          n.removeChild(newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	17	None	replace
871	[BUG]  [BUGGY]  n.removeChild(newNumber).removeChild(left);  [CE]  void  cannot  be  dereferenced  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber).removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber).removeChild(left);	          n.removeChild(newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	17	None	replace
872	[BUG]  [BUGGY]  return  result  ==  left.getNext()?  this  :  new  Double(newNumber,  left);  [CE]  incomparable  types:  double  and  Node  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result  ==  left.getNext()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result  ==  left.getNext()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    result);    	non-compiled	[CE]  incomparable  types:  double  and  Node	34	None	replace
873	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Double(Node,double)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    result);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,double)	34	None	replace
874	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right),  result);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right),  result);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    result);    	non-compiled	[CE]  ';'  expected	34	None	replace
875	[BUG]  [BUGGY]  return  newNumber.getLastChild();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	add
876	[BUG]  [BUGGY]  return  newNumber.getLastChild();  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    NodeTraversal.traverse(compiler,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	add
877	[BUG]  [BUGGY]  return  newNumber.getLastChild();  NodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  NodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    NodeTraversal.traverse(compiler,  right,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	add
878	[BUG]  [BUGGY]  return  newNumber.getLastChild();  Node  newNumber  =  n.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  Node  newNumber  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    Node  newNumber  =  n.getFirstChild();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	9	None	add
879	[BUG]  [BUGGY]  return  newNumber.getLastChild();  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    NodeTraversal.traverse(compiler,  left,  newNumber,  right);	  	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	add
880	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()  :  new  Node(newNumber,  left);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()  :  new  Node(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()  :  new  Node(newNumber,  left);	  return    left    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	141	None	replace
881	[BUG]  [BUGGY]  return  left.getLastChild()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getLastChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getLastChild()  :  new  Node(newNumber);	  return    left    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	141	None	replace
882	[BUG]  [BUGGY]  return  newNumber  >>  left;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  >>  left;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  >>  left;	  return    newNumber!=    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	144	None	replace
883	[BUG]  [BUGGY]  return  newNumber!=  n.newNumber;  [CE]  cannot  find  symbol  newNumber  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  n.newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  n.newNumber;	  return    newNumber!=    n;    	non-compiled	[CE]  cannot  find  symbol  newNumber	144	None	replace
884	[BUG]  [BUGGY]  return  newNumber!=  left.next;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  left.next;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  left.next;	  return    newNumber!=    n;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	144	None	replace
885	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Double(newNumber).doubleValue();	  return    newNumber    ==    left.getLastChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	4	None	replace
886	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  null;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(newNumber);  return  null;	  n.removeChild(newNumber);    return    newNumber;    	compilable	  [FE]  RuntimeException  	157	2	replace
887	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  null;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  null;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);  return  null;	  n.removeChild(newNumber);    return    newNumber;    	compilable	  [FE]  RuntimeException  	157	2	replace
888	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  If(newNumber!=  left)  {  return  newNumber;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  newNumber;  }  If(newNumber!=  left)  {  return  newNumber;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=    left)    {    return    newNumber;    }    If(newNumber!=  left)  {  return  newNumber;  }	  	non-compiled	[CE]  ';'  expected	28	None	add
889	[BUG]  [BUGGY]  if(newNumber  ==  left)  {  return  newNumber  }  ;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber  ==  left)  {  return  newNumber  }  ;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber  ==  left)  {  return  newNumber  }  ;  }	  if(newNumber!=    left)    {    return    newNumber    }    ;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
890	[BUG]  [BUGGY]  if(left!=  newNumber)  {  return  newNumber  }  ;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(left!=  newNumber)  {  return  newNumber  }  ;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(left!=  newNumber)  {  return  newNumber  }  ;  }	  if(newNumber!=    left)    {    return    newNumber    }    ;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
891	[BUG]  [BUGGY]  return  n  ==  left.getNext()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n  ==  left.getNext()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n  ==  left.getNext()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	32	None	replace
892	[BUG]  [BUGGY]  return  left.getNext()?  this  :  new  Double(newNumber,  left);  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext()?  this  :  new  Double(newNumber,  left);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(n,    newNumber);    	non-compiled	[CE]  incompatible  types	32	None	replace
893	[BUG]  [BUGGY]  node.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  node	104	None	replace
894	[BUG]  [BUGGY]  n.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	104	None	replace
895	[BUG]  [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  this  :  new  Node(newNumber,  left);	  return    newNumber    ==    left?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	113	None	replace
896	[BUG]  [BUGGY]  return  result.getNext()  -  1;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  result.getNext()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  result.getNext()  -  1;	  return    newNumber.getNext()    -    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	75	None	replace
897	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	18	2	add
898	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	18	2	add
899	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	18	2	add
900	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	18	2	add
901	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getLastChild(),  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getLastChild(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber.getLastChild(),  left);	  return    newNumber!=    null?    null    :    new    Node(newNumber.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	132	None	replace
902	[BUG]  [BUGGY]  return  left.intValue()  -  right.intValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.intValue()  -  right.intValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.intValue()  -  right.intValue();	  return    left.intValue();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
903	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  MAX_FOLD_NUMBER_ERROR);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	87	None	replace
904	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  left,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  left,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	87	None	replace
905	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left);  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(left);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(negNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	164	None	replace
906	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  left.removeFirstChild();	  return    newNumber.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	45	1	replace
907	[BUG]  [BUGGY]  return  left.removeFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.removeFirstChild();	  return    newNumber.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	45	1	replace
908	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR.cloneChildren();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR.cloneChildren();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  NEGATING_A_NON_NUMBER_ERROR.cloneChildren();	  return    newNumber.cloneChildren();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
909	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left).doubleValue();	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	118	None	replace
910	[BUG]  [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Double(Node,double)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER);	  return    left    ==    right.getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,double)	99	None	replace
911	[BUG]  [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getNext()?  this  :  new  Double(newNumber).doubleValue();	  return    left    ==    right.getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	99	None	replace
912	[BUG]  [BUGGY]  return  left!=  right.getNext()?  this  :  new  Double(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  right.getNext()?  this  :  new  Double(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  right.getNext()?  this  :  new  Double(newNumber,  left);	  return    left    ==    right.getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	99	None	replace
913	[BUG]  [BUGGY]  return  left,  newNumber.removeFirst();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left,  newNumber.removeFirst();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left,  newNumber.removeFirst();	  return    newNumber.removeFirst();    	non-compiled	[CE]  ';'  expected	135	None	replace
914	[BUG]  [BUGGY]  return  node.removeFirst();  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  node.removeFirst();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  node.removeFirst();	  return    newNumber.removeFirst();    	non-compiled	[CE]  cannot  find  symbol  node	135	None	replace
915	[BUG]  [BUGGY]  return  left.getNext();  Node  newNumber  =  right.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getNext();  Node  newNumber  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getNext();  Node  newNumber  =  right.getNext();	  return    newNumber.getNext();    Node    newNumber    =    right.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	38	None	replace
916	[BUG]  [BUGGY]  return  left,  newNumber.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left,  newNumber.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left,  newNumber.doubleValue();	  return    newNumber,    right.doubleValue();    	non-compiled	[CE]  ';'  expected	138	None	replace
917	[BUG]  [BUGGY]  return  left,  right.doubleValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left,  right.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left,  right.doubleValue();	  return    newNumber,    right.doubleValue();    	non-compiled	[CE]  ';'  expected	138	None	replace
918	[BUG]  [BUGGY]  return  right,  newNumber.doubleValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right,  newNumber.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right,  newNumber.doubleValue();	  return    newNumber,    right.doubleValue();    	non-compiled	[CE]  ';'  expected	138	None	replace
919	[BUG]  [BUGGY]  return  n,  right.doubleValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n,  right.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n,  right.doubleValue();	  return    newNumber,    right.doubleValue();    	non-compiled	[CE]  ';'  expected	138	None	replace
920	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	20	2	add
921	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	20	2	add
922	[BUG]  [BUGGY]  return  left!=  null?  left.getLastChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  null?  left.getLastChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  null?  left.getLastChild()  :  new  Node(newNumber);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	59	None	replace
923	[BUG]  [BUGGY]  return  left!=  null?  left.getFirstChild()  :  new  Node(right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  null?  left.getFirstChild()  :  new  Node(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  null?  left.getFirstChild()  :  new  Node(right,  newNumber);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	59	None	replace
924	[BUG]  [BUGGY]  return  left!=  null?  left.getFirstChild()  :  new  Node(newNumber,  left.cloneTree());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  null?  left.getFirstChild()  :  new  Node(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  null?  left.getFirstChild()  :  new  Node(newNumber,  left.cloneTree());	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	59	None	replace
925	[BUG]  [BUGGY]  return  left!=  right.getNext()?  this  :  new  Double(left,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  right.getNext()?  this  :  new  Double(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  right.getNext()?  this  :  new  Double(left,  newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(left,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	162	None	replace
926	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  newNumber  =  Node.newNumber(left);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  newNumber  =  Node.newNumber(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    newNumber  =  Node.newNumber(left);	  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	109	None	add
927	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  left.getFirstChild().getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  left.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    Node  newNumber  =  left.getFirstChild().getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
928	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  left.getNext().getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  left.getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    Node  newNumber  =  left.getNext().getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
929	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  n.getFirstChild().getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  Node  newNumber  =  n.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    Node  newNumber  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
930	[BUG]  [BUGGY]  return  newNumber.getParent();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    NodeTraversal.traverse(compiler,  left,  newNumber,  this);	  	non-compiled	[CE]  cannot  find  symbol  compiler	78	None	add
931	[BUG]  [BUGGY]  return  newNumber.getParent();  NodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  NodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    NodeTraversal.traverse(compiler,  right,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	78	None	add
932	[BUG]  [BUGGY]  return  newNumber.getParent();  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    NodeTraversal.traverse(compiler,  left,  newNumber,  right);	  	non-compiled	[CE]  cannot  find  symbol  compiler	78	None	add
933	[BUG]  [BUGGY]  return  newNumber.getParent();  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    NodeTraversal.traverse(compiler,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	78	None	add
934	[BUG]  [BUGGY]  Node  newNumber  =  left.cloneTree();  n.getParent().removeChild(newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Node  newNumber  =  left.cloneTree();  n.getParent().removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Node  newNumber  =  left.cloneTree();  n.getParent().removeChild(newNumber);	  return    newNumber.cloneTree();    n.getParent().removeChild(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	50	None	replace
935	[BUG]  [BUGGY]  return  n.cloneTree();  n.getParent().replaceChild(n,  newNumber);  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.cloneTree();  n.getParent().replaceChild(n,  newNumber);	  return    newNumber.cloneTree();    n.getParent().removeChild(newNumber);    	non-compiled	[CE]  unreachable  statement	50	None	replace
936	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(newNumber,  left);	  return    newNumber    ==    left?    null    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	114	None	replace
937	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  left.cloneTree());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(newNumber,  left.cloneTree());	  return    newNumber    ==    left?    null    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	114	None	replace
938	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  left.getLastChild());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(newNumber,  left.getLastChild());	  return    newNumber    ==    left?    null    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	114	None	replace
939	[BUG]  [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.cloneTree();  NodeTraversal.traverse(compiler,  n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.cloneTree();  NodeTraversal.traverse(compiler,  n,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	153	None	replace
940	[BUG]  [BUGGY]  node.traverse(compiler,  n,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.traverse(compiler,  n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.traverse(compiler,  n,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	153	None	replace
941	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right));	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  ';'  expected	30	None	replace
942	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER_ERROR);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	30	None	replace
943	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right),  MAX_FOLD_NUMBER_ERROR;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right),  MAX_FOLD_NUMBER_ERROR;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right),  MAX_FOLD_NUMBER_ERROR;	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  ';'  expected	30	None	replace
944	[BUG]  [BUGGY]          n.removeChild(left);  Node  left  =  left.getNext();  n.removeChild(right);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  Node  left  =  left.getNext();  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    Node  left  =  left.getNext();  n.removeChild(right);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	127	None	add
945	[BUG]  [BUGGY]          n.removeChild(left);  Node  left  =  left.getNext();  n.removeChild(left);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  Node  left  =  left.getNext();  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    Node  left  =  left.getNext();  n.removeChild(left);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	127	None	add
946	[BUG]  [BUGGY]          n.removeChild(left);  Node  left  =  n.getFirstChild();  n.removeChild(left);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  Node  left  =  n.getFirstChild();  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    Node  left  =  n.getFirstChild();  n.removeChild(left);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	127	None	add
947	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  left);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	96	None	replace
948	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  MAX_FOLD_NUMBER_ERROR);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  MAX_FOLD_NUMBER_ERROR);	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	147	None	replace
949	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  MAX_FOLD_NUMBER_ERROR);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  MAX_FOLD_NUMBER_ERROR);	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	147	None	replace
950	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(left,  newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(left,  newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(left,  newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	147	None	replace
951	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree(),  MAX_FOLD_NUMBER);	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	147	None	replace
952	[BUG]  [BUGGY]  return  n.getNext();  n.removeChild(newNumber);  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getNext();  n.removeChild(newNumber);	  return    newNumber.getNext();    n.removeChild(newNumber);    	non-compiled	[CE]  unreachable  statement	108	None	replace
953	[BUG]  [BUGGY]  return  left.next  +  1;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.next  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.next  +  1;	  return    newNumber.next    +    1;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	42	None	replace
954	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  MAX_FOLD_NUMBER);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
955	[BUG]  [BUGGY]  node.traverse(compiler,  left,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  node.traverse(compiler,  left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	node.traverse(compiler,  left,  newNumber,  right);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
956	[BUG]  [BUGGY]  return  right.doubleValue()  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  right.doubleValue()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  right.doubleValue()  +  1;	  return    newNumber.doubleValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
957	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(left,  newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(left,  newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(left,  newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	148	None	replace
958	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree(),  left);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree(),  left);	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	148	None	replace
959	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(right,  newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(right,  newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(right,  newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	148	None	replace
960	[BUG]  [BUGGY]  n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  false);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.cloneTree();  NodeTraversal.traverse(compiler,  left,  newNumber,  false);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	93	None	replace
961	[BUG]  [BUGGY]  return  left  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  left.getFirstChild()?  left.getLastChild()  :  new  Node(newNumber);	  return    newNumber    ==    left.getFirstChild()?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	139	None	replace
962	[BUG]  [BUGGY]  return  left  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	139	None	replace
963	[BUG]  [BUGGY]  return  n.getNext();  n.getParent().removeChild(left);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    n.getParent().removeChild(left);	  	non-compiled	[CE]  unreachable  statement	76	None	add
964	[BUG]  [BUGGY]  return  n.getNext();  NodeTraversal.traverse(compiler,  n,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  NodeTraversal.traverse(compiler,  n,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    NodeTraversal.traverse(compiler,  n,  left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  compiler	76	None	add
965	[BUG]  [BUGGY]  return  newNumber!=  right.getFirstChild()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  right.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  right.getFirstChild()  :  new  Node(newNumber);	  return    newNumber    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	140	None	replace
966	[BUG]  [BUGGY]  return  newNumber!=  right.getFirstChild()?  new  Node(newNumber):  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  right.getFirstChild()?  new  Node(newNumber):  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  right.getFirstChild()?  new  Node(newNumber):  new  Node(newNumber);	  return    newNumber    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	140	None	replace
967	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
968	[BUG]  [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
969	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	123	2	add
970	[BUG]  [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	123	2	add
971	[BUG]  [BUGGY]  return  newNumber.cloneTree();  newNumber  =  left.getNext();  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.cloneTree();  newNumber  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.cloneTree();  newNumber  =  left.getNext();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getNext();    	non-compiled	[CE]  unreachable  statement	46	None	replace
972	[BUG]  [BUGGY]  return  newNumber.toString(),  right.toString();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.toString(),  right.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString(),  right.toString();	  return    newNumber.toString(),    result;    	non-compiled	[CE]  ';'  expected	83	None	replace
973	[BUG]  [BUGGY]  return  n.toString(),  newNumber;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.toString(),  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.toString(),  newNumber;	  return    newNumber.toString(),    result;    	non-compiled	[CE]  ';'  expected	83	None	replace
974	[BUG]  [BUGGY]  return(newNumber  ==  null)?  n.next  :  new  Integer(newNumber);  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return(newNumber  ==  null)?  n.next  :  new  Integer(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return(newNumber  ==  null)?  n.next  :  new  Integer(newNumber);	  return    n.next;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	134	None	replace
975	[BUG]  [BUGGY]  return(newNumber  ==  null)?  n.next  :  new  Number(newNumber);  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return(newNumber  ==  null)?  n.next  :  new  Number(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return(newNumber  ==  null)?  n.next  :  new  Number(newNumber);	  return    n.next;    	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	134	None	replace
976	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
977	[BUG]  [BUGGY]          n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
978	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	16	2	add
979	[BUG]  [BUGGY]          n.removeChild(newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	16	2	add
980	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.addChildToFront(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
981	[BUG]  [BUGGY]          n.removeChild(newNumber);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.addChildToFront(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
982	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	16	2	add
983	[BUG]  [BUGGY]          n.removeChild(newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	16	2	add
984	[BUG]  [BUGGY]  return  newNumber.getNext();  Node  newNumber  =  right.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getNext();  Node  newNumber  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getNext();  Node  newNumber  =  right.getFirstChild();	  return    newNumber.getNext();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	40	None	replace
985	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber,  MAX_FOLD_NUMBER_ERROR);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	2	None	replace
986	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getNext());  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getNext());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber.getNext());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getNext());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	133	None	replace
987	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  right.getNext());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  right.getNext());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber,  right.getNext());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getNext());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	133	None	replace
988	[BUG]  [BUGGY]  return  this.right.cloneChildren();  [CE]  cannot  find  symbol  right  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.right.cloneChildren();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.right.cloneChildren();	  return    newNumber.cloneChildren();    	non-compiled	[CE]  cannot  find  symbol  right	6	None	replace
989	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  newNumber  =  left.getNext().getNext();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  newNumber  =  left.getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    newNumber  =  left.getNext().getNext();	  	non-compiled	[CE]  unreachable  statement	109	None	add
990	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  newNumber  =  left.getFirstChild().getNext().getNext();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(0):  newNumber;  newNumber  =  left.getFirstChild().getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    newNumber  =  left.getFirstChild().getNext().getNext();	  	non-compiled	[CE]  unreachable  statement	109	None	add
991	[BUG]  [BUGGY]  return  newNumber.cloneTree()  /  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.cloneTree()  /  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.cloneTree()  /  1;	  return    newNumber.cloneTree()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	11	None	replace
992	[BUG]  [BUGGY]  return  this.newNumber.cloneTree()  +  1;  [CE]  cannot  find  symbol  newNumber  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.newNumber.cloneTree()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.newNumber.cloneTree()  +  1;	  return    newNumber.cloneTree()    +    1;    	non-compiled	[CE]  cannot  find  symbol  newNumber	11	None	replace
993	[BUG]  [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  break;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	125	None	add
994	[BUG]  [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  this  :  new  Node(newNumber,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    newNumber    ==    null?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR	112	None	replace
995	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  NUMBER_SHIFT_AMOUNT_OUT_OF_RANGE);  [CE]  cannot  find  symbol  NUMBER_SHIFT_AMOUNT_OUT_OF_RANGE  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  NUMBER_SHIFT_AMOUNT_OUT_OF_RANGE);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  NUMBER_SHIFT_AMOUNT_OUT_OF_RANGE);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    MAX_FOLD_NUMBER_ERROR);    	non-compiled	[CE]  cannot  find  symbol  NUMBER_SHIFT_AMOUNT_OUT_OF_RANGE	165	None	replace
996	[BUG]  [BUGGY]          newNumber.setString(n.getString());  newNumber.setValue(n.getValue());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  newNumber.setValue(n.getValue());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    newNumber.setValue(n.getValue());	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
997	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  newNumber.setType(n.getType());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                newNumber.setString(n.getString());    newNumber.setType(n.getType());	  	compilable	  [FE]  RuntimeException  	129	2	add
998	[BUG]  [BUGGY]          newNumber.setString(n.getString());  newNumber.setType(n.getType());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          newNumber.setString(n.getString());  newNumber.setType(n.getType());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                newNumber.setString(n.getString());    newNumber.setType(n.getType());	  	compilable	  [FE]  RuntimeException  	129	2	add
999	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER_ERROR);	  return    newNumber    ==    n.getFirstChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	136	None	replace
1000	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Double(Node,double)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Double(newNumber,  MAX_FOLD_NUMBER);	  return    newNumber    ==    n.getFirstChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,double)	136	None	replace
1001	[BUG]  [BUGGY]  return  newNumber!=  n.getFirstChild()?  this  :  new  Double(newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  n.getFirstChild()?  this  :  new  Double(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  n.getFirstChild()?  this  :  new  Double(newNumber);	  return    newNumber    ==    n.getFirstChild()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	136	None	replace
1002	[BUG]  [BUGGY]  return  newNumber.cloneTree();  newNumber.removeChild(right);  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.cloneTree();  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.cloneTree();  newNumber.removeChild(right);	  return    newNumber.cloneTree();    newNumber.removeChild(left);    	non-compiled	[CE]  unreachable  statement	152	None	replace
1003	[BUG]  [BUGGY]  return  newNumber.cloneTree();  newNumber.removeChild(newNumber);  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.cloneTree();  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.cloneTree();  newNumber.removeChild(newNumber);	  return    newNumber.cloneTree();    newNumber.removeChild(left);    	non-compiled	[CE]  unreachable  statement	152	None	replace
1004	[BUG]  [BUGGY]  return  n.getNext();  n.removeChild(right);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    n.removeChild(right);	  	non-compiled	[CE]  unreachable  statement	76	None	add
1005	[BUG]  [BUGGY]  return  n.getNext();  n.removeChild(left);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.getNext();    n.removeChild(left);	  	non-compiled	[CE]  unreachable  statement	76	None	add
1006	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  newNumber).doubleValue();	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	118	None	replace
1007	[BUG]  [BUGGY]  return  n.getlastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getlastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getlastChild();	  return    newNumber.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
1008	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    result);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	86	None	replace
1009	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  result,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,double,double)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  result,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    result);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,double,double)	86	None	replace
1010	[BUG]  [BUGGY]  return  newNumber!=  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    result);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	86	None	replace
1011	[BUG]  [BUGGY]  return  newNumber  ==  left?  left.getFirstChild()  :  new  Node(right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  left.getFirstChild()  :  new  Node(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  left.getFirstChild()  :  new  Node(right,  newNumber);	  return    newNumber    ==    left?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	90	None	replace
1012	[BUG]  [BUGGY]  return  n.getChildCount();  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getChildCount();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getChildCount();	  return    n.getNext();    	non-compiled	[CE]  incompatible  types	77	None	replace
1013	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right),  newNumber);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right),  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right),  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  ';'  expected	1	None	replace
1014	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,double)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber,  right,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,double)	1	None	replace
1015	[BUG]  [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getLastChild());  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  null  :  new  Node(newNumber.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  null  :  new  Node(newNumber.getLastChild());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	132	None	replace
1016	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  left.getLastChild());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber,  left.getLastChild());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	132	None	replace
1017	[BUG]  [BUGGY]  return  this.right.next();  [CE]  cannot  find  symbol  right  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.right.next();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.right.next();	  return    next.next();    	non-compiled	[CE]  cannot  find  symbol  right	155	None	replace
1018	[BUG]  [BUGGY]  return  left.getFirstChild()?  this  :  new  Double(newNumber,  right);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()?  this  :  new  Double(newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  incompatible  types	117	None	replace
1019	[BUG]  [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  right);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	98	None	replace
1020	[BUG]  [BUGGY]  return  newNumber.removeLast();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeLast();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.removeLast();	  return    newNumber.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1021	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber).doubleValue();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild().getNext()?  this  :  new  Double(newNumber).doubleValue();	  return    left.getFirstChild().getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  incompatible  types	5	None	replace
1022	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	12	2	add
1023	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	12	2	add
1024	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	12	2	add
1025	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  n.getParent().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	12	2	add
1026	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(left,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(left,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	137	None	replace
1027	[BUG]  [BUGGY]  return  left.getFirstChild()!=  right.getNext()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()!=  right.getNext()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()!=  right.getNext()  :  new  Node(newNumber);	  return    left    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	141	None	replace
1028	[BUG]  [BUGGY]  return  left.getFirstChild()  ==  right.getNext()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()  ==  right.getNext()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()  ==  right.getNext()  :  new  Node(newNumber);	  return    left    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	141	None	replace
1029	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()  :  new  Node(newNumber,  left.cloneTree());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()  :  new  Node(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()  :  new  Node(newNumber,  left.cloneTree());	  return    left    ==    right.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	141	None	replace
1030	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Integer(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Integer(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	147	None	replace
1031	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.addChildToFront(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    reportCodeChange();    n.addChildToFront(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	2	add
1032	[BUG]  [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.addChildToFront(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.addChildToFront(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    reportCodeChange();    n.addChildToFront(newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	2	add
1033	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(right);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(newNumber);    reportCodeChange();    n.removeChild(right);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	2	add
1034	[BUG]  [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(right);  reportCodeChange();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(right);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    reportCodeChange();    n.removeChild(right);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	22	2	add
1035	[BUG]  [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(oldNumber);  reportCodeChange();  [CE]  cannot  find  symbol  oldNumber  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(newNumber);  reportCodeChange();  n.removeChild(oldNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(newNumber);    reportCodeChange();    n.removeChild(oldNumber);  reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  oldNumber	22	None	add
1036	[BUG]  [BUGGY]  return  newNumber!=  left?  null  :  new  Node(newNumber.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  left?  null  :  new  Node(newNumber.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  left?  null  :  new  Node(newNumber.getString());	  return    newNumber    ==    left?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	111	None	replace
1037	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(n,  left.getString());  [CE]  no  suitable  constructor  found  for  Node(Node,String)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(n,  left.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(n,  left.getString());	  return    newNumber    ==    left?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,String)	111	None	replace
1038	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(right.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(right.getString());	  return    newNumber    ==    left?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	111	None	replace
1039	[BUG]  [BUGGY]  Traversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  Traversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	Traversal.traverse(compiler,  left,  newNumber,  this);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	49	None	replace
1040	[BUG]  [BUGGY]  return  newNumber  ==  n?  left.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n?  left.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n?  left.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    n?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	63	None	replace
1041	[BUG]  [BUGGY]  return  left.getFirstChild()  ==  right.getFirstChild()  :  new  Node(newNumber);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()  ==  right.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()  ==  right.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    n?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  ';'  expected	63	None	replace
1042	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  new  Node(newNumber):  new  Node(left);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  new  Node(newNumber):  new  Node(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  new  Node(newNumber):  new  Node(left);	  return    left    ==    n?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	63	None	replace
1043	[BUG]  [BUGGY]  return  left!=  right.getFirstChild()?  new  Node(newNumber):  new  Node(left);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  right.getFirstChild()?  new  Node(newNumber):  new  Node(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  right.getFirstChild()?  new  Node(newNumber):  new  Node(left);	  return    left    ==    n?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	63	None	replace
1044	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Number(newNumber.cloneTree(),  result);  [CE]  Number  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Number(newNumber.cloneTree(),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Number(newNumber.cloneTree(),  result);	  return    newNumber!=    null?    null    :    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  Number  is  abstract;  cannot  be  instantiated	102	None	replace
1045	[BUG]  [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  null);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,<null>)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getLastChild()?  this  :  new  Node(newNumber,  right,  null);	  return    newNumber    ==    left.getLastChild()?    this    :    new    Node(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,<null>)	88	None	replace
1046	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	NodeUtil.removeChild(n,  newNumber);	  return    newNumber.cloneTree();    n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	50	2	replace
1047	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  newNumber);  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeUtil.removeChild(n,  newNumber);	  return    newNumber.cloneTree();    n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	50	2	replace
1048	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(left,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(left,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	146	None	replace
1049	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	146	None	replace
1050	[BUG]  [BUGGY]  return  newNumber!=  left.getFirstChild()?  this  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  left.getFirstChild()?  this  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  left.getFirstChild()?  this  :  new  Node(newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	146	None	replace
1051	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber);	  return    left    ==    right.getFirstChild()?    this    :    new    Node(newNumber,    left);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	97	None	replace
1052	[BUG]  [BUGGY]  return  this.right.doubleValue();  [CE]  cannot  find  symbol  right  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.right.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.right.doubleValue();	  return    right.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  right	66	None	replace
1053	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  newNumber.removeChild(newNumber);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    newNumber.removeChild(newNumber);	  	non-compiled	[CE]  unreachable  statement	73	None	add
1054	[BUG]  [BUGGY]  return  newNumber.getFirstChild();  newNumber.removeChild(left);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getFirstChild();  newNumber.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getFirstChild();    newNumber.removeChild(left);	  	non-compiled	[CE]  unreachable  statement	73	None	add
1055	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,double)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,double)	30	None	replace
1056	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber,  right,  MAX_FOLD_NUMBER_ERROR);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	30	None	replace
1057	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Node(newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Node(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Node(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	149	None	replace
1058	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber,  MAX_FOLD_NUMBER_ERROR):  new  Node(newNumber.cloneTree());  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber,  MAX_FOLD_NUMBER_ERROR):  new  Node(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber,  MAX_FOLD_NUMBER_ERROR):  new  Node(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Node(newNumber.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	149	None	replace
1059	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  n.getNext().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(left);    n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	24	2	add
1060	[BUG]  [BUGGY]          n.getParent().removeChild(left);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(left);  n.getNext().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(left);    n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	24	2	add
1061	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.getNext().removeChild(newNumber);  reportCodeChange();	          n.getParent().removeChild(newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	21	2	replace
1062	[BUG]  [BUGGY]  n.getNext().removeChild(newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getNext().removeChild(newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getNext().removeChild(newNumber);  reportCodeChange();	          n.getParent().removeChild(newNumber);    reportCodeChange();    	compilable	  [FE]  RuntimeException  	21	2	replace
1063	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  n,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  n,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  n,  left,  newNumber);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
1064	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  n,  newNumber,  left);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  n,  newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  n,  newNumber,  left);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    n,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
1065	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree(),  MAX_FOLD_NUMBER_ERROR);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree(),  MAX_FOLD_NUMBER_ERROR);	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	148	None	replace
1066	[BUG]  [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  Node.newNumber(newNumber):  new  Number(newNumber.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	148	None	replace
1067	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber,  right.cloneTree());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  new  Number(newNumber,  right.cloneTree());	  return    newNumber!=    null?    Node.newNumber(newNumber):    new    Number(newNumber.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	148	None	replace
1068	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  false);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  false);	  return    newNumber.cloneTree();    NodeTraversal.traverse(compiler,    left,    newNumber,    false);    	non-compiled	[CE]  cannot  find  symbol  compiler	93	None	replace
1069	[BUG]  [BUGGY]  return  this.right.intValue();  [CE]  cannot  find  symbol  right  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.right.intValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.right.intValue();	  return    right.intValue();    	non-compiled	[CE]  cannot  find  symbol  right	55	None	replace
1070	[BUG]  [BUGGY]  return  newNumber.getNext();  newNumber.removeChild(right);  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getNext();  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getNext();  newNumber.removeChild(right);	  return    newNumber.getNext();    newNumber.removeChild(left);    	non-compiled	[CE]  unreachable  statement	167	None	replace
1071	[BUG]  [BUGGY]  return  this.result.intValue();  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.result.intValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.result.intValue();	  return    result.intValue();    	non-compiled	[CE]  cannot  find  symbol  result	95	None	replace
1072	[BUG]  [BUGGY]  return  newNumber.getParent();  newNumber.removeChild(left);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  newNumber.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    newNumber.removeChild(left);	  	non-compiled	[CE]  unreachable  statement	78	None	add
1073	[BUG]  [BUGGY]  return  newNumber.getParent();  newNumber.removeChild(right);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getParent();  newNumber.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getParent();    newNumber.removeChild(right);	  	non-compiled	[CE]  unreachable  statement	78	None	add
1074	[BUG]  [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  left.cloneTree());  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getNext()?  this  :  new  Double(newNumber,  left.cloneTree());	  return    left    ==    right.getNext()?    this    :    new    Double(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	99	None	replace
1075	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber).doubleValue();  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber).doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(right,  newNumber).doubleValue();	  return    newNumber    ==    left.getNext()?    this    :    new    Double(newNumber).doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	33	None	replace
1076	[BUG]  [BUGGY]  if(newNumber!=  left)  {  return  node;  }  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  if(newNumber!=  left)  {  return  node;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	if(newNumber!=  left)  {  return  node;  }	  if(newNumber!=    left)    {    return    newNumber;    }    	non-compiled	[CE]  cannot  find  symbol  node	29	None	replace
1077	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  left.getFirstChild()  :  new  Node(right,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	139	None	replace
1078	[BUG]  [BUGGY]  return  newNumber!=  left.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  left.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  left.getFirstChild()?  left.getFirstChild()  :  new  Node(newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	139	None	replace
1079	[BUG]  [BUGGY]  return  newNumber.getLastChild();  newNumber.removeChild(newNumber);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    newNumber.removeChild(newNumber);	  	non-compiled	[CE]  unreachable  statement	9	None	add
1080	[BUG]  [BUGGY]  return  newNumber.getLastChild();  newNumber.removeChild(left);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  newNumber.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    newNumber.removeChild(left);	  	non-compiled	[CE]  unreachable  statement	9	None	add
1081	[BUG]  [BUGGY]  return  newNumber.getLastChild();  newNumber.setLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  newNumber.setLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    newNumber.setLastChild();	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
1082	[BUG]  [BUGGY]  return  newNumber.getLastChild();  Node  left  =  n.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getLastChild();  Node  left  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.getLastChild();    Node  left  =  n.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	9	None	add
1083	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(left,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
1084	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    reportCodeChange();    n.getParent().replaceChild(left,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	18	2	add
1085	[BUG]  [BUGGY]  newNumber.setString(n.getString(),  right);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(n.getString(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.setString(n.getString(),  right);	          newNumber.setString(n.getString());    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
1086	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(newNumber.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.setString(newNumber.getString());	          newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	130	2	replace
1087	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.setString(newNumber.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.setString(newNumber.getString());	          newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	130	2	replace
1088	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	89	None	replace
1089	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  left);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	89	None	replace
1090	[BUG]  [BUGGY]  return  this.node.doubleValue();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.node.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.node.doubleValue();	  return    node.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  node	122	None	replace
1091	[BUG]  [BUGGY]  [FE]  Error  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.detachFromParent();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.detachFromParent();	  newNumber.removeChild(left);    	compilable	  [FE]  Error  	161	2	replace
1092	[BUG]  [BUGGY]  newNumber.detachFromParent();  [FE]  Error  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.detachFromParent();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.detachFromParent();	  newNumber.removeChild(left);    	compilable	  [FE]  Error  	161	2	replace
1093	[BUG]  [BUGGY]  return  newNumber.cloneTree();  newNumber  =  left.getFirstChild();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.cloneTree();  newNumber  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.cloneTree();  newNumber  =  left.getFirstChild();	  return    newNumber.cloneTree();    Node    newNumber    =    left.getFirstChild();    	non-compiled	[CE]  unreachable  statement	51	None	replace
1094	[BUG]  [BUGGY]  return  this.result.doubleValue();  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.result.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.result.doubleValue();	  return    result.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  result	121	None	replace
1095	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild()?  newNumber  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  right.getFirstChild()?  newNumber  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  right.getFirstChild()?  newNumber  :  new  Node(newNumber);	  return    left    ==    newNumber?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	61	None	replace
1096	[BUG]  [BUGGY]  return  left!=  right.getFirstChild()?  newNumber  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  right.getFirstChild()?  newNumber  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  right.getFirstChild()?  newNumber  :  new  Node(newNumber);	  return    left    ==    newNumber?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	61	None	replace
1097	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	14	2	add
1098	[BUG]  [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	14	2	add
1099	[BUG]  [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  &&  newNumber.getString().endsWith( "__ ")||  newNumber.getString().endsWith( "__ "));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  &&  newNumber.getString().endsWith( "__ ")||  newNumber.getString().endsWith( "__ "));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()  ==  Token.BLOCK  &&  newNumber.getString().endsWith( "__ ")||  newNumber.getString().endsWith( "__ "));	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	142	None	replace
1100	[BUG]  [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  &&  newNumber.getChildCount()  >  1;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.getType()  ==  Token.BLOCK  &&  newNumber.getChildCount()  >  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getType()  ==  Token.BLOCK  &&  newNumber.getChildCount()  >  1;	  return    newNumber.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  incompatible  types	142	None	replace
1101	[BUG]  [BUGGY]  return  this.result.toString();  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.result.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.result.toString();	  return    result.toString();    	non-compiled	[CE]  cannot  find  symbol  result	119	None	replace
1102	[BUG]  [BUGGY]  return  left.toString()  &&  right.toString().equals(newNumber.toString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.toString()  &&  right.toString().equals(newNumber.toString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.toString()  &&  right.toString().equals(newNumber.toString());	  return    left.toString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	82	None	replace
1103	[BUG]  [BUGGY]  return  left.toString()  &&  right.toString().equals(newNumber);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.toString()  &&  right.toString().equals(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.toString()  &&  right.toString().equals(newNumber);	  return    left.toString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	82	None	replace
1104	[BUG]  [BUGGY]  return  this.left.intValue();  [CE]  cannot  find  symbol  left  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.left.intValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.left.intValue();	  return    left.intValue();    	non-compiled	[CE]  cannot  find  symbol  left	54	None	replace
1105	[BUG]  [BUGGY]  return  left!=  null?  left.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  null?  left.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  null?  left.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	59	None	replace
1106	[BUG]  [BUGGY]  return  left  ==  null?  left.getFirstChild()  :  new  Node(right,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  null?  left.getFirstChild()  :  new  Node(right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  null?  left.getFirstChild()  :  new  Node(right,  newNumber);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	59	None	replace
1107	[BUG]  [BUGGY]  return  left!=  null?  right.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left!=  null?  right.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left!=  null?  right.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	59	None	replace
1108	[BUG]  [BUGGY]  return  newNumber  ==  null?  left.getFirstChild()  :  new  Node(newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node)  [FE]                          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  null?  left.getFirstChild()  :  new  Node(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  null?  left.getFirstChild()  :  new  Node(newNumber);	  return    left    ==    null?    left.getFirstChild()    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node)	59	None	replace
1109	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  n,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  nodeTraversal.traverse(compiler,  n,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	nodeTraversal.traverse(compiler,  n,  newNumber,  right);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    left,    newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  compiler	107	None	replace
1110	[BUG]  [BUGGY]  return  n.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getNext();  NodeTraversal.traverse(compiler,  left,  newNumber,  right);	  return    newNumber.getNext();    NodeTraversal.traverse(compiler,    left,    newNumber,    right);    	non-compiled	[CE]  cannot  find  symbol  compiler	107	None	replace
1111	[BUG]  [BUGGY]  return  left.doubleValue(),  right.doubleValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.doubleValue(),  right.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.doubleValue(),  right.doubleValue();	  return    newNumber,    right.doubleValue();    	non-compiled	[CE]  ';'  expected	138	None	replace
1112	[BUG]  [BUGGY]  return  left.getFirstChild()  >  this?  this  :  new  Double(newNumber,  left.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()  >  this?  this  :  new  Double(newNumber,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()  >  this?  this  :  new  Double(newNumber,  left.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	116	None	replace
1113	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  left.getLastChild());  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(right,  left.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	116	None	replace
1114	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  left.getLastChild());  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(n,  left.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	116	None	replace
1115	[BUG]  [BUGGY]  return  left.getFirstChild()  >  this?  this  :  new  Double(newNumber,  right.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left.getFirstChild()  >  this?  this  :  new  Double(newNumber,  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left.getFirstChild()  >  this?  this  :  new  Double(newNumber,  right.getLastChild());	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Double(newNumber,    left.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	116	None	replace
1116	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  n.removeFirstChild();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  n.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    n.removeFirstChild();	  	non-compiled	[CE]  unreachable  statement	44	None	add
1117	[BUG]  [BUGGY]  return  newNumber.removeFirstChild();  n.removeChild(newNumber);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeFirstChild();  n.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    newNumber.removeFirstChild();    n.removeChild(newNumber);	  	non-compiled	[CE]  unreachable  statement	44	None	add
1118	[BUG]  [BUGGY]  return  this.left.doubleValue();  [CE]  cannot  find  symbol  left  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.left.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.left.doubleValue();	  return    left.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  left	65	None	replace
1119	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  left,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  left,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	96	None	replace
1120	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	96	None	replace
1121	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);	          n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	15	None	replace
1122	[BUG]  [BUGGY]  return  n.cloneTree();  n.removeChild(right);  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.cloneTree();  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return    n.cloneTree();    n.removeChild(right);	  	non-compiled	[CE]  unreachable  statement	7	None	add
1123	[BUG]  [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  right.cloneTree());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  null  :  new  Node(newNumber,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  null  :  new  Node(newNumber,  right.cloneTree());	  return    newNumber    ==    left?    null    :    new    Node(newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	114	None	replace
1124	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(n,  left,  newNumber);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(n,  left,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(n,  left,  newNumber);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	85	None	replace
1125	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(n,  newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(n,  newNumber,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(n,  newNumber,  right);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(n,    newNumber,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	85	None	replace
1126	[BUG]  [BUGGY]  return  newNumber.removeChild(newNumber);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.removeChild(newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.removeChild(newNumber);	  return    newNumber.getParent();    	non-compiled	[CE]  incompatible  types	79	None	replace
1127	[BUG]  [BUGGY]  return  newNumber  ==  n;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n;	  return    newNumber!=    n;    	non-compiled	[CE]  incompatible  types	144	None	replace
1128	[BUG]  [BUGGY]  return  newNumber!=  right;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  right;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  right;	  return    newNumber!=    n;    	non-compiled	[CE]  incompatible  types	144	None	replace
1129	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  MISSING_A_NON_NUMBER_ERROR);  [CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  MISSING_A_NON_NUMBER_ERROR);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR	87	None	replace
1130	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  MAX_FOLD_NUMBER);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right,  newNumber,  MAX_FOLD_NUMBER);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node,double)	87	None	replace
1131	[BUG]  [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  newNumber;  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  Node.newNumber(newNumber):  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  Node.newNumber(newNumber):  newNumber;	  return    newNumber    ==    null?    Node.newNumber(0):    newNumber;    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	110	None	replace
1132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getParent().cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  n.getParent().cloneTree();	  return    n.cloneTree();    	compilable	  [FE]  RuntimeException  	8	2	replace
1133	[BUG]  [BUGGY]  return  n.getParent().cloneTree();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  n.getParent().cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  n.getParent().cloneTree();	  return    n.cloneTree();    	compilable	  [FE]  RuntimeException  	8	2	replace
1134	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getString(),  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber.getString(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber.getString(),  MAX_FOLD_NUMBER_ERROR);	  return    newNumber!=    null?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	131	None	replace
1135	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  right.getString());  [CE]  no  suitable  constructor  found  for  Node(Node,String)  [FE]          AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber,  right.getString());	  return    newNumber!=    null?    null    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,String)	131	None	replace
1136	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  right);  [CE]  no  suitable  constructor  found  for  Double(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  right);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(left,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node)	162	None	replace
1137	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  right,  newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  right,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(left,  right,  newNumber);	  return    newNumber    ==    left.getNext()?    this    :    new    Double(left,    newNumber);    	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node,Node,Node)	162	None	replace
1138	[BUG]  [BUGGY]  return  newNumber,  left.substring(0,  newNumber.length()  -  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber,  left.substring(0,  newNumber.length()  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber,  left.substring(0,  newNumber.length()  -  1);	  return    newNumber.substring(0,    newNumber.length()    -    1);    	non-compiled	[CE]  ';'  expected	120	None	replace
1139	[BUG]  [BUGGY]  return  newNumber.substring(0,  newNumber.length())-  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.substring(0,  newNumber.length())-  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.substring(0,  newNumber.length())-  1;	  return    newNumber.substring(0,    newNumber.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1140	[BUG]  [BUGGY]  return  newNumber.substring(0,  right.length()  -  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber.substring(0,  right.length()  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.substring(0,  right.length()  -  1);	  return    newNumber.substring(0,    newNumber.length()    -    1);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1141	[BUG]  [BUGGY]  return  newNumber!=  null?  left  :  new  Node(newNumber.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  left  :  new  Node(newNumber.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  left  :  new  Node(newNumber.getString());	  return    newNumber    ==    null?    left    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	145	None	replace
1142	[BUG]  [BUGGY]  return  left  ==  null?  newNumber  :  new  Node(newNumber.getString(),  right);  [CE]  no  suitable  constructor  found  for  Node(String,Node)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  null?  newNumber  :  new  Node(newNumber.getString(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  null?  newNumber  :  new  Node(newNumber.getString(),  right);	  return    newNumber    ==    null?    left    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String,Node)	145	None	replace
1143	[BUG]  [BUGGY]  return  left  ==  null?  newNumber  :  new  Node(left.getString());  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  left  ==  null?  newNumber  :  new  Node(left.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  left  ==  null?  newNumber  :  new  Node(left.getString());	  return    newNumber    ==    null?    left    :    new    Node(newNumber.getString());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	145	None	replace
1144	[BUG]  [BUGGY]  return  this.newNumber.toString()  +  1;  [CE]  cannot  find  symbol  newNumber  [FE]                    AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  this.newNumber.toString()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  this.newNumber.toString()  +  1;	  return    newNumber.toString()    +    1;    	non-compiled	[CE]  cannot  find  symbol  newNumber	151	None	replace
1145	[BUG]  [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  right,  left);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  right,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  this  :  new  Node(newNumber,  right,  left);	  return    newNumber    ==    left?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,Node)	115	None	replace
1146	[BUG]  [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                        AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left?  this  :  new  Node(newNumber,  left,  right,  MAX_FOLD_NUMBER_ERROR);	  return    newNumber    ==    left?    this    :    new    Node(newNumber,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	115	None	replace
1147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().replaceChild(left,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	20	2	add
1148	[BUG]  [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.getParent().removeChild(newNumber);  reportCodeChange();  n.getParent().replaceChild(left,  newNumber);  reportCodeChange();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.getParent().removeChild(newNumber);    reportCodeChange();    n.getParent().replaceChild(left,  newNumber);  reportCodeChange();	  	compilable	  [FE]  RuntimeException  	20	2	add
1149	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  n.getParent().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(right);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	158	2	add
1150	[BUG]  [BUGGY]  n.removeChild(right);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  n.getParent().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	158	2	add
1151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  n.addChildToFront(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(right);    n.addChildToFront(right);	  	compilable	  [FE]  AssertionFailedError  	158	1	add
1152	[BUG]  [BUGGY]  n.removeChild(right);  n.addChildToFront(right);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  n.addChildToFront(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    n.addChildToFront(right);	  	compilable	  [FE]  AssertionFailedError  	158	1	add
1153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	n.removeChild(right);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	158	2	add
1154	[BUG]  [BUGGY]  n.removeChild(right);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(right);  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(right);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	158	2	add
1155	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  right,  null);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,<null>)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  right,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(n,  right,  null);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,<null>)	166	None	replace
1156	[BUG]  [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  right,  null);  [CE]  no  suitable  constructor  found  for  Node(Node,Node,<null>)  [FE]                  AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  right,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  n.getFirstChild()?  this  :  new  Node(newNumber,  right,  null);	  return    newNumber    ==    left.getFirstChild()?    this    :    new    Node(newNumber,    right,    null);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node,<null>)	166	None	replace
1157	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  right).cloneTree();  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(newNumber,  right).cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(newNumber,  right).cloneTree();	  return    newNumber!=    null?    null    :    new    Node(newNumber).cloneTree();    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	103	None	replace
1158	[BUG]  [BUGGY]  return  newNumber!=  null?  null  :  new  Node(n,  newNumber).cloneTree();  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  newNumber!=  null?  null  :  new  Node(n,  newNumber).cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber!=  null?  null  :  new  Node(n,  newNumber).cloneTree();	  return    newNumber!=    null?    null    :    new    Node(newNumber).cloneTree();    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	103	None	replace
1159	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	127	2	add
1160	[BUG]  [BUGGY]          n.removeChild(left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	127	2	add
1161	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.addChildToFront(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	127	2	add
1162	[BUG]  [BUGGY]          n.removeChild(left);  n.addChildToFront(right);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.addChildToFront(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	127	2	add
1163	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.getParent().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	                n.removeChild(left);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	127	2	add
1164	[BUG]  [BUGGY]          n.removeChild(left);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]          n.removeChild(left);  n.getParent().removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	                n.removeChild(left);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	127	2	add
1165	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  newNumber.addChildToFront(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(left);    newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	160	2	add
1166	[BUG]  [BUGGY]  newNumber.removeChild(left);  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  newNumber.addChildToFront(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(left);    newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	160	2	add
1167	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  newNumber.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	newNumber.removeChild(left);    newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
1168	[BUG]  [BUGGY]  newNumber.removeChild(left);  newNumber.getParent().removeChild(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  newNumber.removeChild(left);  newNumber.getParent().removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	newNumber.removeChild(left);    newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	160	2	add
1169	[BUG]  [BUGGY]  return  resultDouble.doubleValue();  [CE]  cannot  find  symbol  resultDouble  [FE]                      AssertionFailedError      [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  return  resultDouble.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  resultDouble.doubleValue();	  return    this.newNumber.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  resultDouble	68	None	replace
1170	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.removeChild(right);  return  newNumber;  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.removeChild(right);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    n.removeChild(right);  return  newNumber;	  	non-compiled	[CE]  unreachable  statement	156	None	add
1171	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.removeChild(left);  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    n.removeChild(left);	  	non-compiled	[CE]  unreachable  statement	156	None	add
1172	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.getParent().replaceChild(n,  newNumber);  return  newNumber;  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.getParent().replaceChild(n,  newNumber);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    n.getParent().replaceChild(n,  newNumber);  return  newNumber;	  	non-compiled	[CE]  unreachable  statement	156	None	add
1173	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.getParent().replaceChild(n,  newNumber);  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  unreachable  statement	156	None	add
1174	[BUG]  [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.removeChild(left);  return  newNumber;  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();      [BUGGY]  n.removeChild(newNumber);  return  newNumber;  n.removeChild(left);  return  newNumber;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	n.removeChild(newNumber);    return    newNumber;    n.removeChild(left);  return  newNumber;	  	non-compiled	[CE]  unreachable  statement	156	None	add
