bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  newNumber.intValue();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber.intValue();  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.intValue();	return  newNumber;  	non-compiled	[CE]  cannot  find  symbol	41	None	replace
2	[BUG]  [BUGGY]  return  newNumber.doubleValue();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber.doubleValue();  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.doubleValue();	return  newNumber;  	non-compiled	[CE]  cannot  find  symbol	41	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber.cloneTree();  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  newNumber.cloneTree();	return  newNumber;  	compilable	  [FE]  AssertionFailedError  	41	1	replace
4	[BUG]  [BUGGY]  return  newNumber.cloneTree();  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber.cloneTree();  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.cloneTree();	return  newNumber;  	compilable	  [FE]  AssertionFailedError  	41	1	replace
5	[BUG]  [BUGGY]  return  newNumber.toString();  [CE]  incompatible  types  [FE]          AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber.toString();  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.toString();	return  newNumber;  	non-compiled	[CE]  incompatible  types	41	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber.getNext();  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	return  newNumber.getNext();	return  newNumber;  	compilable	  [FE]  AssertionFailedError  	41	1	replace
7	[BUG]  [BUGGY]  return  newNumber.getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber.getNext();  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.getNext();	return  newNumber;  	compilable	  [FE]  AssertionFailedError  	41	1	replace
8	[BUG]  [BUGGY]  return  newNumber.next();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber.next();  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.next();	return  newNumber;  	non-compiled	[CE]  cannot  find  symbol	41	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]    [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	  	return  newNumber;  	compilable	  [FE]  AssertionFailedError  	41	1	replace
10	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]    [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	  	return  newNumber;  	compilable	  [FE]  AssertionFailedError  	41	1	replace
11	[BUG]  [BUGGY]  return  newNumber  }  ;  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber  }  ;  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  }  ;	return  newNumber;  	non-compiled	[CE]  ';'  expected	41	None	replace
12	[BUG]  [BUGGY]  return  newNumber.next;  [CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]      AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber.next;  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber.next;	return  newNumber;  	non-compiled	[CE]  next  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	41	None	replace
13	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]    AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber);  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Double(newNumber);	return  newNumber;  	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	41	None	replace
14	[BUG]  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right);  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]      AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right);  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getFirstChild()?  this  :  new  Node(newNumber,  right);	return  newNumber;  	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	41	None	replace
15	[BUG]  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber);  [CE]  no  suitable  constructor  found  for  Double(Node)  [FE]        AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber);  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  left.getNext()?  this  :  new  Double(newNumber);	return  newNumber;  	non-compiled	[CE]  no  suitable  constructor  found  for  Double(Node)	41	None	replace
16	[BUG]  [BUGGY]  return  newNumber  ==  node?  left.getFirstChild()  :  new  Node(newNumber);  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError  [CONTEXT]  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [BUGGY]  return  newNumber  ==  node?  left.getFirstChild()  :  new  Node(newNumber);  [BUGGY]  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	return  newNumber  ==  node?  left.getFirstChild()  :  new  Node(newNumber);	return  newNumber;  	non-compiled	[CE]  cannot  find  symbol  node	41	None	replace
