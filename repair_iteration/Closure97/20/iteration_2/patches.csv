bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
2	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
3	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [CE]  bad  operand  types  for  binary  operator  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	64	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	64	2	add
5	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	64	2	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
7	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	93	1	add
9	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	93	1	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	93	1	add
11	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	93	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	93	1	add
13	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	93	1	add
14	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [CE]  bad  operand  types  for  binary  operator  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	93	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionError  	93	2	add
16	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [FE]  AssertionError  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionError  	93	2	add
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
18	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
19	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
20	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
21	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
22	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
24	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
25	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
26	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
28	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
29	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
30	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
31	[BUG]  [BUGGY]  result  =  left.replaceChild(right,  newNumber);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(right,  newNumber);	  result    =    newNumber.replaceChild(left,    right);    	non-compiled	[CE]  incompatible  types	144	None	replace
32	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  right);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(n,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  right);	  result    =    newNumber.replaceChild(left,    right);    	non-compiled	[CE]  incompatible  types	144	None	replace
33	[BUG]  [BUGGY]  result  =  node.replaceChild(newNumber,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  node.replaceChild(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  node.replaceChild(newNumber,  newNumber);	  result    =    newNumber.replaceChild(newNumber,    n);    	non-compiled	[CE]  cannot  find  symbol  node	59	None	replace
34	[BUG]  [BUGGY]  result  =  this.newNumber.replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  newNumber  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  this.newNumber.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  this.newNumber.replaceChild(n,  newNumber);	  result    =    newNumber.replaceChild(newNumber,    n);    	non-compiled	[CE]  cannot  find  symbol  newNumber	59	None	replace
35	[BUG]  [BUGGY]  result  =  n.replaceChild(newNumber,  node);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.replaceChild(newNumber,  node);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(newNumber,  node);	  result    =    newNumber.replaceChild(newNumber,    n);    	non-compiled	[CE]  cannot  find  symbol  node	59	None	replace
36	[BUG]  [BUGGY]  result  =  node.replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  node.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  node.replaceChild(n,  newNumber);	  result    =    newNumber.replaceChild(newNumber,    n);    	non-compiled	[CE]  cannot  find  symbol  node	59	None	replace
37	[BUG]  [BUGGY]  result  =  n.getFirstChild();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.getFirstChild();	  result    =    newNumber.getFirstChild();    	non-compiled	[CE]  incompatible  types	52	None	replace
38	[BUG]  [BUGGY]  result  =  newNumber.getLastChild();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.getLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.getLastChild();	  result    =    newNumber.getFirstChild();    	non-compiled	[CE]  incompatible  types	52	None	replace
39	[BUG]  [BUGGY]  result  =  left.getFirstChild();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.getFirstChild();	  result    =    newNumber.getFirstChild();    	non-compiled	[CE]  incompatible  types	52	None	replace
40	[BUG]  [BUGGY]  result  =  right.getFirstChild();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.getFirstChild();	  result    =    newNumber.getFirstChild();    	non-compiled	[CE]  incompatible  types	52	None	replace
41	[BUG]  [BUGGY]  result  =  newNumber.getNext();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.getNext();	  result    =    newNumber.getFirstChild();    	non-compiled	[CE]  incompatible  types	52	None	replace
42	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
43	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
44	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(newNumber);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
45	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(newNumber);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
47	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
48	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
49	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
50	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
51	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
52	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
53	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
54	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(n);	  newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	120	2	replace
55	[BUG]  [BUGGY]  newNumber.removeChild(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(n);	  newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	120	2	replace
56	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(newNumber);	  newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	120	2	replace
57	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(newNumber);	  newNumber.removeChild(left);    	compilable	  [FE]  RuntimeException  	120	2	replace
58	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(newNumber);	  n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	132	2	replace
59	[BUG]  [BUGGY]  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(newNumber);	  n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	132	2	replace
60	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(right);	  n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	132	2	replace
61	[BUG]  [BUGGY]  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(right);	  n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	132	2	replace
62	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(right);	  n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	132	2	replace
63	[BUG]  [BUGGY]  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(right);	  n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	132	2	replace
64	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().replaceChild(n,  newNumber);	  n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	132	2	replace
65	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().replaceChild(n,  newNumber);	  n.getNext().removeChild(left);    	compilable	  [FE]  RuntimeException  	132	2	replace
66	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.replaceChild(n,  newNumber);	  parent.replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	21	2	replace
67	[BUG]  [BUGGY]  newNumber.replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.replaceChild(n,  newNumber);	  parent.replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	21	2	replace
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(newNumber,  newNumber);	  parent.replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	21	2	replace
69	[BUG]  [BUGGY]  n.replaceChild(newNumber,  newNumber);  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(newNumber,  newNumber);	  parent.replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	21	2	replace
70	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeUtil.replaceChild(n,  newNumber);	  parent.replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
71	[BUG]  [BUGGY]  node.replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  node.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	node.replaceChild(n,  newNumber);	  parent.replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	21	None	replace
72	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  right.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  right.getNext();	  Node    left    =    left.getNext();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	replace
73	[BUG]  [BUGGY]  Node  left  =  newNumber.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  newNumber.getNext();	  Node    left    =    left.getNext();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	replace
74	[BUG]  [BUGGY]  Node  left  =  node.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  node.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  node.getNext();	  Node    left    =    left.getNext();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	replace
75	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  right  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  right  =  left.getNext();	  Node    left    =    left.getNext();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	69	None	replace
76	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
77	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
78	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  n.getParent().addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(newNumber);    n.getParent().addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
79	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  n.getParent().addChildToFront(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  n.getParent().addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    n.getParent().addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
80	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(resultDouble);  [CE]  cannot  find  symbol  resultDouble  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(resultDouble);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(resultDouble);	  	non-compiled	[CE]  cannot  find  symbol  resultDouble	40	None	add
81	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
82	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
83	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  node.addChildToFront(newNumber);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  node.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    node.addChildToFront(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	40	None	add
84	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(n);	  	compilable	  [FE]  RuntimeException  	40	2	add
85	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(n);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(n);	  	compilable	  [FE]  RuntimeException  	40	2	add
86	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
87	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lval);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(lval);	  newNumber    =    Node.newNumber(result);    	compilable	  [FE]  AssertionFailedError  	23	2	replace
89	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lval);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lval);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(lval);	  newNumber    =    Node.newNumber(result);    	compilable	  [FE]  AssertionFailedError  	23	2	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(0);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(0);	  newNumber    =    Node.newNumber(result);    	compilable	  [FE]  AssertionFailedError  	23	2	replace
91	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(0);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(0);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(0);	  newNumber    =    Node.newNumber(result);    	compilable	  [FE]  AssertionFailedError  	23	2	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(result  +  1);	  newNumber    =    Node.newNumber(result);    	compilable	  [FE]  AssertionFailedError  	23	2	replace
93	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result  +  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(result  +  1);	  newNumber    =    Node.newNumber(result);    	compilable	  [FE]  AssertionFailedError  	23	2	replace
94	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(n);	  newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	23	None	replace
95	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  newNumber  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    newNumber.getNext();    newNumber  =  newNumber.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
96	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  newNumber  =  newNumber.getNext();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  newNumber  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    newNumber  =  newNumber.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
97	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  Node  newNumber  =  newNumber.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  Node  newNumber  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    Node  newNumber  =  newNumber.getNext();	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	27	None	add
98	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  result  =  newNumber.getNext();  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  result  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    result  =  newNumber.getNext();	  	non-compiled	[CE]  incompatible  types	27	None	add
99	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n  =  left.getNext();  newNumber  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    newNumber.getNext();    n  =  left.getNext();  newNumber  =  newNumber.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
101	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  n  =  left.getNext();  newNumber  =  newNumber.getNext();  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n  =  left.getNext();  newNumber  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    n  =  left.getNext();  newNumber  =  newNumber.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
102	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    result  =  lvalInt  >=  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
103	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    newNumber.getNext();    n  =  newNumber.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
104	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  n  =  newNumber.getNext();  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    n  =  newNumber.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
105	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	43	2	add
106	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	43	2	add
107	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	43	2	add
108	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	43	2	add
109	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(resultDouble);  [CE]  cannot  find  symbol  resultDouble  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(resultDouble);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber.addChildToFront(resultDouble);	  	non-compiled	[CE]  cannot  find  symbol  resultDouble	43	None	add
110	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToFront(newNumber);    newNumber.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	43	2	add
111	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    newNumber.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	43	2	add
112	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
113	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	43	2	add
114	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	43	2	add
115	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(rvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(rvalInt);	  newNumber    =    Node.newNumber(lvalInt);    	compilable	  [FE]  AssertionFailedError  	25	2	replace
117	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(rvalInt);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(rvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(rvalInt);	  newNumber    =    Node.newNumber(lvalInt);    	compilable	  [FE]  AssertionFailedError  	25	2	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(lvalInt  +  1);	  newNumber    =    Node.newNumber(lvalInt);    	compilable	  [FE]  AssertionFailedError  	25	2	replace
119	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(lvalInt  +  1);	  newNumber    =    Node.newNumber(lvalInt);    	compilable	  [FE]  AssertionFailedError  	25	2	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt  -  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(lvalInt  -  1);	  newNumber    =    Node.newNumber(lvalInt);    	compilable	  [FE]  AssertionFailedError  	25	2	replace
121	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt  -  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt  -  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(lvalInt  -  1);	  newNumber    =    Node.newNumber(lvalInt);    	compilable	  [FE]  AssertionFailedError  	25	2	replace
122	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalDouble);  [CE]  cannot  find  symbol  lvalDouble  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalDouble);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(lvalDouble);	  newNumber    =    Node.newNumber(lvalInt);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	25	None	replace
123	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n.getType());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(n.getType());	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(       "Unknown    shift    operator:       "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	78	None	replace
124	[BUG]  [BUGGY]  result  =  n.replaceChild(n,  newNumber);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(n,  newNumber);	  result    =    n.removeFirstChild();    	non-compiled	[CE]  incompatible  types	50	None	replace
125	[BUG]  [BUGGY]  result  =  n.removeFirstChild(),  newNumber);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.removeFirstChild(),  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeFirstChild(),  newNumber);	  result    =    n.removeFirstChild();    	non-compiled	[CE]  ';'  expected	50	None	replace
126	[BUG]  [BUGGY]  newNumber.addChildToFront(right,  result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right,  result);	  newNumber.addChildToFront(result);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
127	[BUG]  [BUGGY]  newNumber.addChildToFront(n,  result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(n,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(n,  result);	  newNumber.addChildToFront(result);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
128	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber,  result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber,  result);	  newNumber.addChildToFront(result);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
129	[BUG]  [BUGGY]  newNumber.addChildToFront(left,  result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(left,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(left,  result);	  newNumber.addChildToFront(result);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
130	[BUG]  [BUGGY]  newNumber.addChildToFront(lval,  result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(lval,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(lval,  result);	  newNumber.addChildToFront(result);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
131	[BUG]  [BUGGY]  newNumber.addChildToFront(result,  left);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(result,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(result,  left);	  newNumber.addChildToFront(result);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    left.getNext();    newNumber  =  left.getNext();	  	compilable	  [FE]  AssertionFailedError  	54	1	add
133	[BUG]  [BUGGY]  newNumber  =  left.getNext();  newNumber  =  left.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    newNumber  =  left.getNext();	  	compilable	  [FE]  AssertionFailedError  	54	1	add
134	[BUG]  [BUGGY]  newNumber  =  left.getNext();  Node  left  =  left.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  Node  left  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    Node  left  =  left.getNext();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	54	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    left.getNext();    n  =  left.getNext();	  	compilable	  [FE]  AssertionFailedError  	54	1	add
136	[BUG]  [BUGGY]  newNumber  =  left.getNext();  n  =  left.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    n  =  left.getNext();	  	compilable	  [FE]  AssertionFailedError  	54	1	add
137	[BUG]  [BUGGY]  newNumber  =  left.getNext();  result  =  left.getNext();  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  result  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    result  =  left.getNext();	  	non-compiled	[CE]  incompatible  types	54	None	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  newNumber  =  right.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    left.getNext();    newNumber  =  right.getNext();	  	compilable	  [FE]  AssertionFailedError  	54	1	add
139	[BUG]  [BUGGY]  newNumber  =  left.getNext();  newNumber  =  right.getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  newNumber  =  right.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    newNumber  =  right.getNext();	  	compilable	  [FE]  AssertionFailedError  	54	1	add
140	[BUG]  [BUGGY]  newNumber  =  left.getNext();  node  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  node  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    node  =  left.getNext();	  	non-compiled	[CE]  cannot  find  symbol  node	54	None	add
141	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  right.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	74	None	replace
142	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  right.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	74	None	replace
143	[BUG]  [BUGGY]  Node  left  =  node.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  node.getLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  node.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	74	None	replace
144	[BUG]  [BUGGY]  Node  newNumber  =  n.getLastChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	74	None	replace
145	[BUG]  [BUGGY]  result  =  lvalInt!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt!=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt!=  >  rvalInt;  break;	          result    =    newNumber!=    >    lvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
146	[BUG]  [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt  >=  >  rvalInt;  break;	          result    =    newNumber!=    >    lvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
147	[BUG]  [BUGGY]  result  =  newNumber  >>  >  lvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber  >>  >  lvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber  >>  >  lvalInt;  break;	          result    =    newNumber!=    >    lvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
148	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  newNumber.setString(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.setString(n.getString());    newNumber.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	123	2	add
149	[BUG]  [BUGGY]  newNumber.setString(n.getString());  newNumber.setString(n.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  newNumber.setString(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    newNumber.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	123	2	add
150	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  n.getParent().removeChild(newNumber);  newNumber.setString(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.setString(n.getString());    n.getParent().removeChild(newNumber);  newNumber.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	123	2	add
151	[BUG]  [BUGGY]  newNumber.setString(n.getString());  n.getParent().removeChild(newNumber);  newNumber.setString(n.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  n.getParent().removeChild(newNumber);  newNumber.setString(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    n.getParent().removeChild(newNumber);  newNumber.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	123	2	add
152	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.setString(n.getString());    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
153	[BUG]  [BUGGY]  newNumber.setString(n.getString());  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	123	2	add
154	[BUG]  [BUGGY]  newNumber.setString(n.getString());  newNumber.setString(n.getString());  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  newNumber.setString(n.getString());  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    newNumber.setString(n.getString());  result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
155	[BUG]  [BUGGY]  newNumber.setString(n.getString());  newNumber.setString(n.getString());  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  newNumber.setString(n.getString());  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    newNumber.setString(n.getString());  result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
156	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  n.setString(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.setString(n.getString());    n.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	123	2	add
157	[BUG]  [BUGGY]  newNumber.setString(n.getString());  n.setString(n.getString());  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  n.setString(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    n.setString(n.getString());	  	compilable	  [FE]  RuntimeException  	123	2	add
158	[BUG]  [BUGGY]  newNumber.setString(n.getString());  newNumber.setString(n.getString());  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  newNumber.setString(n.getString());  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    newNumber.setString(n.getString());  result  =  lvalInt  >=  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
159	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  n.addChildToFront(newNumber);	  n.removeChild(newNumber);    n.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	138	2	replace
160	[BUG]  [BUGGY]  n.removeChild(left);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  n.addChildToFront(newNumber);	  n.removeChild(newNumber);    n.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	138	2	replace
161	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);  n.addChildToFront(newNumber);	  n.removeChild(newNumber);    n.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	138	2	replace
162	[BUG]  [BUGGY]  n.removeChild(right);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);  n.addChildToFront(newNumber);	  n.removeChild(newNumber);    n.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	138	2	replace
163	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);	  n.removeChild(newNumber);    n.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	138	2	replace
164	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);	  n.removeChild(newNumber);    n.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	138	2	replace
165	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;	          result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
166	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  newNumber;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt  >>  >  newNumber;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt  >>  >  newNumber;  break;	          result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
167	[BUG]  [BUGGY]  result  =  lvalInt!=  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt!=  >  MAX_FOLD_NUMBER;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt!=  >  MAX_FOLD_NUMBER;  break;	          result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
168	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  newNumber,  lval);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(n,  newNumber,  lval);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  newNumber,  lval);	  result    =    left.replaceChild(n,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
169	[BUG]  [BUGGY]  result  =  right.replaceChild(n,  newNumber);  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.replaceChild(n,  newNumber);	  result    =    left.replaceChild(n,    newNumber);    	non-compiled	[CE]  incompatible  types	83	None	replace
170	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  newNumber,  rvalInt);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(n,  newNumber,  rvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  newNumber,  rvalInt);	  result    =    left.replaceChild(n,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
171	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(left);	  newNumber.addChildToFront(right);    	compilable	  [FE]  RuntimeException  	122	2	replace
172	[BUG]  [BUGGY]  newNumber.addChildToFront(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(left);	  newNumber.addChildToFront(right);    	compilable	  [FE]  RuntimeException  	122	2	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(n);	  newNumber.addChildToFront(right);    	compilable	  [FE]  AssertionFailedError  	122	2	replace
174	[BUG]  [BUGGY]  newNumber.addChildToFront(n);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(n);	  newNumber.addChildToFront(right);    	compilable	  [FE]  AssertionFailedError  	122	2	replace
175	[BUG]  [BUGGY]  newNumber.addChildToFront(right,  newNumber);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right,  newNumber);	  newNumber.addChildToFront(right);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	122	None	replace
176	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
177	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
178	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(n);	  	compilable	  [FE]  RuntimeException  	6	2	add
179	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(n);	  	compilable	  [FE]  RuntimeException  	6	2	add
180	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(resultDouble);  [CE]  cannot  find  symbol  resultDouble  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(resultDouble);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(resultDouble);	  	non-compiled	[CE]  cannot  find  symbol  resultDouble	6	None	add
181	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(result);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(result);	  	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	6	None	add
182	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(right);	  	compilable	  [FE]  RuntimeException  	6	2	add
183	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(right);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(right);	  	compilable	  [FE]  RuntimeException  	6	2	add
184	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  n.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.addChildToBack(newNumber);    n.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
185	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  n.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  n.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.addChildToBack(newNumber);    n.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
186	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  node.addChildToBack(newNumber);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  node.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.addChildToBack(newNumber);    node.addChildToBack(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	6	None	add
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(left.getType());	  newNumber    =    Node.newNumber(n.getType());    	compilable	  [FE]  AssertionFailedError  	30	2	replace
188	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left.getType());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left.getType());	  newNumber    =    Node.newNumber(n.getType());    	compilable	  [FE]  AssertionFailedError  	30	2	replace
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(right.getType());	  newNumber    =    Node.newNumber(n.getType());    	compilable	  [FE]  AssertionFailedError  	30	2	replace
190	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(right.getType());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(right.getType());	  newNumber    =    Node.newNumber(n.getType());    	compilable	  [FE]  AssertionFailedError  	30	2	replace
191	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getString());  [CE]  no  suitable  method  found  for  newNumber(String)  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(n.getString());	  newNumber    =    Node.newNumber(n.getType());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String)	30	None	replace
192	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType(),  result);  [CE]  no  suitable  method  found  for  newNumber(int,double)  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType(),  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(n.getType(),  result);	  newNumber    =    Node.newNumber(n.getType());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,double)	30	None	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType()  -  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(n.getType()  -  1);	  newNumber    =    Node.newNumber(n.getType());    	compilable	  [FE]  AssertionFailedError  	30	2	replace
194	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType()  -  1);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType()  -  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(n.getType()  -  1);	  newNumber    =    Node.newNumber(n.getType());    	compilable	  [FE]  AssertionFailedError  	30	2	replace
195	[BUG]  [BUGGY]  result  =  n.replaceChild(newNumber,  right);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.replaceChild(newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(newNumber,  right);	  result    =    newNumber.replaceChild(n,    right);    	non-compiled	[CE]  incompatible  types	128	None	replace
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getNext().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left);    n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	131	2	add
197	[BUG]  [BUGGY]  n.getNext().removeChild(left);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getNext().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);    n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	131	2	add
198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	131	2	add
199	[BUG]  [BUGGY]  n.getNext().removeChild(left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	131	2	add
200	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getNext().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left);    n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	131	2	add
201	[BUG]  [BUGGY]  n.getNext().removeChild(left);  n.getNext().removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getNext().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);    n.getNext().removeChild(right);	  	compilable	  [FE]  RuntimeException  	131	2	add
202	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getFirstChild().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left);    n.getFirstChild().removeChild(left);	  	compilable	  [FE]  RuntimeException  	131	2	add
203	[BUG]  [BUGGY]  n.getNext().removeChild(left);  n.getFirstChild().removeChild(left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getFirstChild().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);    n.getFirstChild().removeChild(left);	  	compilable	  [FE]  RuntimeException  	131	2	add
204	[BUG]  [BUGGY]  n.getNext().removeChild(left);  n.getPrevious().removeChild(left);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getPrevious().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);    n.getPrevious().removeChild(left);	  	non-compiled	[CE]  cannot  find  symbol	131	None	add
205	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	131	2	add
206	[BUG]  [BUGGY]  n.getNext().removeChild(left);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	131	2	add
207	[BUG]  [BUGGY]  n.addChildToBack(newNumber,  left);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber,  left);	  n.addChildToBack(newNumber);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
208	[BUG]  [BUGGY]  n.addChildToBack(result);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(result);	  n.addChildToBack(newNumber);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
209	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(right,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,int)  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right,  lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(right,  lvalInt);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int)	107	None	replace
210	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left,  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,int)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left,  lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left,  lvalInt);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int)	107	None	replace
211	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(right,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(right,  result);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	107	None	replace
212	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left,  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left,  result);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	107	None	replace
213	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left,  right);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	107	None	replace
214	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n,  left);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(n,  left);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	107	None	replace
215	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(newNumber);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	139	2	add
216	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(newNumber);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	139	2	add
217	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	139	2	add
218	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	139	2	add
219	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.getParent().removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(left);    n.getParent().removeChild(newNumber);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	139	2	add
220	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.getParent().removeChild(newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.getParent().removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(left);    n.getParent().removeChild(newNumber);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	139	2	add
221	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(left);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	139	2	add
222	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(left);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	139	2	add
223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.getParent().removeChild(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(left);    n.getParent().removeChild(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	139	2	add
224	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.getParent().removeChild(newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.getParent().removeChild(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(left);    n.getParent().removeChild(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	139	2	add
225	[BUG]  [BUGGY]  result  =  newNumber  >>  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber  >>  >  MAX_FOLD_NUMBER;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber  >>  >  MAX_FOLD_NUMBER;  break;	          result    =    newNumber!=    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
226	[BUG]  [BUGGY]  result  =  newNumber!=  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber!=  >  MAX_FOLD_NUMBER;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber!=  >  MAX_FOLD_NUMBER;  break;	          result    =    newNumber!=    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
227	[BUG]  [BUGGY]  result  =  newNumber.removeChild(n.cloneTree());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(n.cloneTree());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(n.cloneTree());	  result    =    newNumber.removeChild(newNumber.cloneTree());    	non-compiled	[CE]  incompatible  types	63	None	replace
228	[BUG]  [BUGGY]  result  =  newNumber.removeChild(newNumber.cloneTree(),  result);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(newNumber.cloneTree(),  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(newNumber.cloneTree(),  result);	  result    =    newNumber.removeChild(newNumber.cloneTree());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
229	[BUG]  [BUGGY]  result  =  n.removeChild(newNumber.cloneTree());  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.removeChild(newNumber.cloneTree());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeChild(newNumber.cloneTree());	  result    =    newNumber.removeChild(newNumber.cloneTree());    	non-compiled	[CE]  incompatible  types	63	None	replace
230	[BUG]  [BUGGY]  result  =  newNumber.removeChild(newNumber.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(newNumber.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(newNumber.getString());	  result    =    newNumber.removeChild(newNumber.cloneTree());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
231	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(n,  newNumber.cloneTree());  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(n,  newNumber.cloneTree());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(n,  newNumber.cloneTree());	  result    =    newNumber.removeChild(newNumber.cloneTree());    	non-compiled	[CE]  incompatible  types	63	None	replace
232	[BUG]  [BUGGY]  result  =  newNumber.removeChild(newNumber.cloneTree(),  left);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(newNumber.cloneTree(),  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(newNumber.cloneTree(),  left);	  result    =    newNumber.removeChild(newNumber.cloneTree());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
233	[BUG]  [BUGGY]  result  =  newNumber!=  right)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber!=  right)  {  reportCodeChange();  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber!=  right)  {  reportCodeChange();  }	  if(newNumber!=    right)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  ';'  expected	143	None	replace
234	[BUG]  [BUGGY]  Result  result  =  left.replaceChild(newNumber,  newNumber);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  left.replaceChild(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  left.replaceChild(newNumber,  newNumber);	  result    =    newNumber.replaceChild(newNumber,    left);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	57	None	replace
235	[BUG]  [BUGGY]  result  =  right.replaceChild(newNumber,  newNumber);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.replaceChild(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.replaceChild(newNumber,  newNumber);	  result    =    newNumber.replaceChild(newNumber,    left);    	non-compiled	[CE]  incompatible  types	57	None	replace
236	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
237	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
238	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
239	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
240	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
241	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
242	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
243	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
244	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
245	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
246	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
247	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
248	[BUG]  [BUGGY]  result.addChildToBack(n,  newNumber);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToBack(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(n,  newNumber);	  result.addChildToBack(n);    	non-compiled	[CE]  double  cannot  be  dereferenced	49	None	replace
249	[BUG]  [BUGGY]  result  =  n.replaceChild(left,  newNumber).removeFirstChild();  [CE]  void  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.replaceChild(left,  newNumber).removeFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(left,  newNumber).removeFirstChild();	  result    =    left.replaceChild(n,    newNumber).removeFirstChild();    	non-compiled	[CE]  void  cannot  be  dereferenced	114	None	replace
250	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(n,  left).removeFirstChild();  [CE]  void  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(n,  left).removeFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(n,  left).removeFirstChild();	  result    =    left.replaceChild(n,    newNumber).removeFirstChild();    	non-compiled	[CE]  void  cannot  be  dereferenced	114	None	replace
251	[BUG]  [BUGGY]  result  =  right.replaceChild(n,  newNumber).removeFirstChild();  [CE]  void  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.replaceChild(n,  newNumber).removeFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.replaceChild(n,  newNumber).removeFirstChild();	  result    =    left.replaceChild(n,    newNumber).removeFirstChild();    	non-compiled	[CE]  void  cannot  be  dereferenced	114	None	replace
252	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  newNumber).removeLastChild();  [CE]  void  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(n,  newNumber).removeLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  newNumber).removeLastChild();	  result    =    left.replaceChild(n,    newNumber).removeFirstChild();    	non-compiled	[CE]  void  cannot  be  dereferenced	114	None	replace
253	[BUG]  [BUGGY]  result  =  node.replaceChild(n,  newNumber).removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  node.replaceChild(n,  newNumber).removeFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  node.replaceChild(n,  newNumber).removeFirstChild();	  result    =    left.replaceChild(n,    newNumber).removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	114	None	replace
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  n.removeChild(right);	  n.removeChild(newNumber);    n.removeChild(right);    	compilable	  [FE]  AssertionFailedError  	134	2	replace
255	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(right);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  n.removeChild(right);	  n.removeChild(newNumber);    n.removeChild(right);    	compilable	  [FE]  AssertionFailedError  	134	2	replace
256	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);  newNumber.removeChild(right);	  n.removeChild(newNumber);    n.removeChild(right);    	compilable	  [FE]  RuntimeException  	134	2	replace
257	[BUG]  [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);  newNumber.removeChild(right);	  n.removeChild(newNumber);    n.removeChild(right);    	compilable	  [FE]  RuntimeException  	134	2	replace
258	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
259	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
260	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
261	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
262	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	13	None	add
263	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    Node  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	13	None	add
264	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
265	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
266	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
267	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(newNumber);  n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(result);    newNumber  =  Node.newNumber(result);	  	compilable	  [FE]  AssertionFailedError  	22	1	add
269	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  newNumber  =  Node.newNumber(result);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    newNumber  =  Node.newNumber(result);	  	compilable	  [FE]  AssertionFailedError  	22	1	add
270	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  Node  newNumber  =  Node.newNumber(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  Node  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    Node  newNumber  =  Node.newNumber(result);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	22	None	add
271	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
272	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    result  =  lvalInt  >=  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
273	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt!=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    result  =  lvalInt!=  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
274	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt  ==  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt  ==  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    result  =  lvalInt  ==  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
275	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
276	[BUG]  [BUGGY]  result  =  n.removeChild(result);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.removeChild(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeChild(result);	  result    =    newNumber.removeChild(result);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
277	[BUG]  [BUGGY]  result  =  newNumber.removeChild(n,  result);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(n,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(n,  result);	  result    =    newNumber.removeChild(result);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
278	[BUG]  [BUGGY]  result  =  newNumber.removeChild(newNumber,  left);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(newNumber,  left);	  result    =    newNumber.removeChild(result);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
279	[BUG]  [BUGGY]  result  =  node.removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  node.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  node.removeChild(newNumber);	  result    =    newNumber.removeChild(result);    	non-compiled	[CE]  cannot  find  symbol  node	90	None	replace
280	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(newNumber);  n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
281	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(newNumber);  n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
282	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
283	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
284	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildAfterFront(newNumber);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildAfterFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(newNumber);  n.addChildAfterFront(newNumber);	  	non-compiled	[CE]  cannot  find  symbol	137	None	add
285	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildIntoFront(newNumber);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildIntoFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(newNumber);  n.addChildIntoFront(newNumber);	  	non-compiled	[CE]  cannot  find  symbol	137	None	add
286	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(newNumber);  n.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
287	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(newNumber);  n.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
288	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.removeChild(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
289	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.removeChild(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
290	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().removeChild(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.getParent().removeChild(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
291	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().removeChild(newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().removeChild(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.getParent().removeChild(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
292	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().replaceChild(n,  newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
293	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().replaceChild(n,  newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().replaceChild(n,  newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
294	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.getParent().removeChild(left);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
295	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().removeChild(left);  n.removeChild(right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.getParent().removeChild(left);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
296	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.addChildToBack(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.addChildToBack(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
297	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.addChildToBack(newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.addChildToBack(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.addChildToBack(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
298	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.removeChild(newNumber);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	133	2	add
299	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.removeChild(newNumber);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	133	2	add
300	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  n.getParent().removeChild(newNumber);	  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	12	2	replace
301	[BUG]  [BUGGY]  n.removeChild(left);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  n.getParent().removeChild(newNumber);	  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	12	2	replace
302	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
303	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
304	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.getParent().removeChild(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
305	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().removeChild(newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.getParent().removeChild(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
306	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
307	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
308	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.addChildToBack(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.addChildToBack(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
309	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.addChildToBack(newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.addChildToBack(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.addChildToBack(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
310	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().removeChild(left);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.getParent().removeChild(left);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
311	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().removeChild(left);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().removeChild(left);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.getParent().removeChild(left);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
312	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.getParent().removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	101	2	add
313	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().removeChild(left);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.getParent().removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.getParent().removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	101	2	add
314	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
315	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
316	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
317	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
318	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
319	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
320	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
321	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
322	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
323	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
324	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  right.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  right.getNext();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
325	[BUG]  [BUGGY]  newNumber  =  right.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  right.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  right.getNext();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  left.getLastChild();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
327	[BUG]  [BUGGY]  newNumber  =  left.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  left.getLastChild();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
328	[BUG]  [BUGGY]  newNumber  =  left.getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext()  +  1;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  left.getNext()  +  1;	  newNumber    =    left.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	55	None	replace
329	[BUG]  [BUGGY]  newNumber  =  left.getNext()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext()  -  1;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  left.getNext()  -  1;	  newNumber    =    left.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	55	None	replace
330	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  n.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  n.getNext();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
331	[BUG]  [BUGGY]  newNumber  =  n.getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  n.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  n.getNext();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
332	[BUG]  [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
333	[BUG]  [BUGGY]  n.removeChild(result);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(result);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(result);  result  =  lvalInt  >>  >  rvalInt;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
334	[BUG]  [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt  >=  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  result  =  lvalInt  >=  >  rvalInt;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
335	[BUG]  [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt!=  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  result  =  lvalInt!=  >  rvalInt;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToBack(n);	  node.addChildToBack(newNumber);    	compilable	  [FE]  AssertionFailedError  	88	2	replace
337	[BUG]  [BUGGY]  newNumber.addChildToBack(n);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(n);	  node.addChildToBack(newNumber);    	compilable	  [FE]  AssertionFailedError  	88	2	replace
338	[BUG]  [BUGGY]  Node.addChildToBack(newNumber);  [CE]  non-static  method  addChildToBack(Node)  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node.addChildToBack(newNumber);	  node.addChildToBack(newNumber);    	non-compiled	[CE]  non-static  method  addChildToBack(Node)  cannot  be  referenced  from  a  static  context	88	None	replace
339	[BUG]  [BUGGY]  result  =  left.replaceChild(newNumber,  right);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(newNumber,  right);	  result    =    right.replaceChild(left,    newNumber);    	non-compiled	[CE]  incompatible  types	81	None	replace
340	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString()  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.setString(n.getString()  +  1);	  newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	124	2	replace
341	[BUG]  [BUGGY]  newNumber.setString(n.getString()  +  1);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString()  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString()  +  1);	  newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	124	2	replace
342	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(right.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.setString(right.getString());	  newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	124	2	replace
343	[BUG]  [BUGGY]  newNumber.setString(right.getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(right.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(right.getString());	  newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	124	2	replace
344	[BUG]  [BUGGY]  newNumber.setString(n.getString(),  result);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString(),  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString(),  result);	  newNumber.setString(n.getString());    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	124	None	replace
345	[BUG]  [BUGGY]  newNumber.setString(result.getString());  [CE]  double  cannot  be  dereferenced  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(result.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(result.getString());	  newNumber.setString(n.getString());    	non-compiled	[CE]  double  cannot  be  dereferenced	124	None	replace
346	[BUG]  [BUGGY]  newNumber.setString(n.getString(),  left);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString(),  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString(),  left);	  newNumber.setString(n.getString());    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	124	None	replace
347	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.removeChild(right);    newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
348	[BUG]  [BUGGY]          newNumber.removeChild(right);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
349	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.removeChild(right);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
350	[BUG]  [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
351	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.removeChild(right);    n.getParent().removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
352	[BUG]  [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(left);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    n.getParent().removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
353	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(right);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.removeChild(right);    n.getParent().removeChild(right);  newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	125	2	add
354	[BUG]  [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(right);  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(right);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    n.getParent().removeChild(right);  newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	125	2	add
355	[BUG]  [BUGGY]          newNumber.removeChild(right);  Node  right  =  left.getNext();  newNumber.removeChild(right);  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  Node  right  =  left.getNext();  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    Node  right  =  left.getNext();  newNumber.removeChild(right);	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	125	None	add
356	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.removeChild(right);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	125	2	add
357	[BUG]  [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	125	2	add
358	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.removeChild(right);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	125	2	add
359	[BUG]  [BUGGY]          newNumber.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	125	2	add
360	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(right.getNext());	  n.getNext().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	73	2	replace
361	[BUG]  [BUGGY]  n.getNext().removeChild(right.getNext());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(right.getNext());	  n.getNext().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	73	2	replace
362	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getLastChild());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left.getLastChild());	  n.getNext().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	73	2	replace
363	[BUG]  [BUGGY]  n.getNext().removeChild(left.getLastChild());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getLastChild());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getLastChild());	  n.getNext().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	73	2	replace
364	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(right.getNext());	  n.getNext().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	73	2	replace
365	[BUG]  [BUGGY]  n.getParent().removeChild(right.getNext());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(right.getNext());	  n.getNext().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	73	2	replace
366	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().replaceChild(left,  newNumber);	  n.getNext().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	73	2	replace
367	[BUG]  [BUGGY]  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().replaceChild(left,  newNumber);	  n.getNext().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	73	2	replace
368	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
369	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
370	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
371	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
372	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.getParent().removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.getParent().removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
373	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.getParent().removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.getParent().removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.getParent().removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
374	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.getParent().replaceChild(n,  newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
375	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.getParent().replaceChild(n,  newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.getParent().replaceChild(n,  newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
376	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.getParent().removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.getParent().removeChild(left);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
377	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.getParent().removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.getParent().removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.getParent().removeChild(left);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
378	[BUG]  [BUGGY]  result  =  left.removeFirstChild(),  newNumber);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.removeFirstChild(),  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.removeFirstChild(),  newNumber);	  result    =    left.removeFirstChild();    	non-compiled	[CE]  ';'  expected	51	None	replace
379	[BUG]  [BUGGY]  result  =  left.replaceChild(newNumber,  node);  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(newNumber,  node);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(newNumber,  node);	  result    =    n.replaceChild(newNumber,    left);    	non-compiled	[CE]  cannot  find  symbol  node	105	None	replace
380	[BUG]  [BUGGY]  n.getNext())  {  reportCodeChange();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext())  {  reportCodeChange();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext())  {  reportCodeChange();	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild    	non-compiled	[CE]  ';'  expected	147	None	replace
381	[BUG]  [BUGGY]  newNumber.getParent())  {  reportCodeChange();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.getParent())  {  reportCodeChange();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.getParent())  {  reportCodeChange();	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild    	non-compiled	[CE]  ';'  expected	147	None	replace
382	[BUG]  [BUGGY]  n.getParent().removeChild(left.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getString());	  n.getParent().removeChild(left.getNext());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	71	None	replace
383	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getParent());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left.getParent());	  n.getParent().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	71	2	replace
384	[BUG]  [BUGGY]  n.getParent().removeChild(left.getParent());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getParent());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getParent());	  n.getParent().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	71	2	replace
385	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(right.getParent());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(right.getParent());	  n.getParent().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	71	2	replace
386	[BUG]  [BUGGY]  n.getParent().removeChild(right.getParent());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(right.getParent());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(right.getParent());	  n.getParent().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	71	2	replace
387	[BUG]  [BUGGY]  result  =  left.replaceChild(left,  newNumber);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(left,  newNumber);	  result    =    newNumber.replaceChild(left,    left);    	non-compiled	[CE]  incompatible  types	145	None	replace
388	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    	compilable	  [FE]  RuntimeException  	17	2	replace
389	[BUG]  [BUGGY]  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    	compilable	  [FE]  RuntimeException  	17	2	replace
390	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(lvalInt  +  1);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	17	None	replace
391	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    	compilable	  [FE]  RuntimeException  	17	2	replace
392	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    	compilable	  [FE]  RuntimeException  	17	2	replace
393	[BUG]  [BUGGY]  node.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  node.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	node.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    	non-compiled	[CE]  cannot  find  symbol  node	17	None	replace
394	[BUG]  [BUGGY]  Node  newNumber  =  n.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getNext();	  Node    left    =    n.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	115	None	replace
395	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
396	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
397	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
398	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
399	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
400	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
401	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
402	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getNext().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,    newNumber);    n.getNext().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	129	2	add
403	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	129	2	add
404	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	129	2	add
405	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	129	None	add
406	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	129	2	add
407	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,    newNumber);    n.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	129	2	add
408	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left.getNext(),  result);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left.getNext(),  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left.getNext(),  result);	  newNumber    =    Node.newNumber(left.getNext());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	118	None	replace
409	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left.getNext(),  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left.getNext(),  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left.getNext(),  right);	  newNumber    =    Node.newNumber(left.getNext());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	118	None	replace
410	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left.getNext(),  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left.getNext(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left.getNext(),  MAX_FOLD_NUMBER_ERROR);	  newNumber    =    Node.newNumber(left.getNext());    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	118	None	replace
411	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left.getNext(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left.getNext(),  MAX_FOLD_NUMBER);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left.getNext(),  MAX_FOLD_NUMBER);	  newNumber    =    Node.newNumber(left.getNext());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	118	None	replace
412	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(right.getNext(),  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right.getNext(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(right.getNext(),  MAX_FOLD_NUMBER_ERROR);	  newNumber    =    Node.newNumber(left.getNext());    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	118	None	replace
413	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left.getNext(),  lvalInt);  [CE]  no  suitable  method  found  for  newNumber(Node,int)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left.getNext(),  lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left.getNext(),  lvalInt);	  newNumber    =    Node.newNumber(left.getNext());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int)	118	None	replace
414	[BUG]  [BUGGY]  node.removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  node.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	node.removeChild(newNumber);	  n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	102	None	replace
415	[BUG]  [BUGGY]  newNumber.addChildToBack(n,  result);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(n,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(n,  result);	  newNumber.addChildToBack(result);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	45	None	replace
416	[BUG]  [BUGGY]  newNumber.addChildToBack(right,  result);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(right,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(right,  result);	  newNumber.addChildToBack(result);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	45	None	replace
417	[BUG]  [BUGGY]  newNumber.addChildToBack(newNumber,  result);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(newNumber,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(newNumber,  result);	  newNumber.addChildToBack(result);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	45	None	replace
418	[BUG]  [BUGGY]  newNumber.addChildToBack(left,  result);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(left,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(left,  result);	  newNumber.addChildToBack(result);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	45	None	replace
419	[BUG]  [BUGGY]  newNumber.addChildToBack(newNumber,  left);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(newNumber,  left);	  newNumber.addChildToBack(result);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	45	None	replace
420	[BUG]  [BUGGY]  newNumber.addChildToBack(result,  left);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(result,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(result,  left);	  newNumber.addChildToBack(result);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	45	None	replace
421	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.replaceChild(left,  newNumber);	  parent.replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	106	2	replace
422	[BUG]  [BUGGY]  newNumber.replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.replaceChild(left,  newNumber);	  parent.replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	106	2	replace
423	[BUG]  [BUGGY]  NodeUtil.replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeUtil.replaceChild(left,  newNumber);	  parent.replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
424	[BUG]  [BUGGY]  node.replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  node.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	node.replaceChild(left,  newNumber);	  parent.replaceChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	106	None	replace
425	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  left);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  left);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
427	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  node,  newNumber);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  result);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  result);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  newNumber,  right);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
430	[BUG]  [BUGGY]  newNumber.removeChildToBack(result);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChildToBack(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChildToBack(result);	  result.removeChildToBack(newNumber);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
431	[BUG]  [BUGGY]  n.removeChildToBack(newNumber);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChildToBack(newNumber);	  result.removeChildToBack(newNumber);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
432	[BUG]  [BUGGY]  result.removeChildToBack(n);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.removeChildToBack(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.removeChildToBack(n);	  result.removeChildToBack(newNumber);    	non-compiled	[CE]  double  cannot  be  dereferenced	87	None	replace
433	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
434	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
435	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
436	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
437	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
438	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
439	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
440	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getNext().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    n.getNext().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
441	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);    newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
442	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  newNumber.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
443	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);  result  =  lvalInt  >=  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  newNumber  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(n.getType());    newNumber  =  Node.newNumber(n.getType());	  	compilable	  [FE]  AssertionFailedError  	29	1	add
445	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  newNumber  =  Node.newNumber(n.getType());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  newNumber  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    newNumber  =  Node.newNumber(n.getType());	  	compilable	  [FE]  AssertionFailedError  	29	1	add
446	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  Node  newNumber  =  Node.newNumber(n.getType());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  Node  newNumber  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    Node  newNumber  =  Node.newNumber(n.getType());	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	29	None	add
447	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(n.getType());    n  =  Node.newNumber(n.getType());	  	compilable	  [FE]  AssertionFailedError  	29	1	add
449	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n  =  Node.newNumber(n.getType());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    n  =  Node.newNumber(n.getType());	  	compilable	  [FE]  AssertionFailedError  	29	1	add
450	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(n.getType());    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	29	2	add
451	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	29	2	add
452	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    result  =  lvalInt  >=  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
453	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(n.getType());    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	29	2	add
454	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	29	2	add
455	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	19	2	replace
456	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	19	2	replace
457	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  n.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	19	2	replace
458	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  n.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	19	2	replace
459	[BUG]  [BUGGY]  result  =  left.removeChild(newNumber);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.removeChild(newNumber);	  result    =    newNumber.removeChild(left);    	non-compiled	[CE]  incompatible  types	91	None	replace
460	[BUG]  [BUGGY]  result  =  right.removeChild(newNumber);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.removeChild(newNumber);	  result    =    newNumber.removeChild(left);    	non-compiled	[CE]  incompatible  types	91	None	replace
461	[BUG]  [BUGGY]  result  =  left.removeChild(n);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.removeChild(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.removeChild(n);	  result    =    newNumber.removeChild(left);    	non-compiled	[CE]  incompatible  types	91	None	replace
462	[BUG]  [BUGGY]  result  =  n.removeChild(left);  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeChild(left);	  result    =    newNumber.removeChild(left);    	non-compiled	[CE]  incompatible  types	91	None	replace
463	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt  >>  >  rvalInt;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
464	[BUG]  [BUGGY]  result  =  lvalInt!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt!=  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt!=  >  rvalInt;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
465	[BUG]  [BUGGY]  result  =  newNumber  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber  >>  >  MAX_FOLD_NUMBER;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber  >>  >  MAX_FOLD_NUMBER;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
466	[BUG]  [BUGGY]  result  =  newNumber  >>  >  lvalInt;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber  >>  >  lvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber  >>  >  lvalInt;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
467	[BUG]  [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt  >=  >  rvalInt;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
468	[BUG]  [BUGGY]  result  =  newNumber!=  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber!=  >  MAX_FOLD_NUMBER;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber!=  >  MAX_FOLD_NUMBER;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
469	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=    right)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	142	1	add
470	[BUG]  [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=    right)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	142	1	add
471	[BUG]  [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [CE]  bad  operand  types  for  binary  operator  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=    right)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  >=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	142	None	add
472	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=    right)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	142	2	add
473	[BUG]  [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=    right)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	142	2	add
474	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
475	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
476	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [CE]  bad  operand  types  for  binary  operator  [FE]      AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	67	None	add
477	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
478	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
479	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
480	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
481	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(n,  left);	  n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	130	2	replace
482	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,  left);	  n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	130	2	replace
483	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,  newNumber,  left);	  n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
484	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,  newNumber  +  1);	  n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	130	None	replace
485	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	130	2	replace
486	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	130	2	replace
487	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
488	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
489	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	16	2	add
490	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	16	2	add
491	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
492	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
493	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
494	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
495	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
496	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
497	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  2);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  2);	  	compilable	  [FE]  RuntimeException  	16	2	add
498	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  2);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  2);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  2);	  	compilable	  [FE]  RuntimeException  	16	2	add
499	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,    newNumber);    n.replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
500	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
501	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
502	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
503	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,    newNumber);    n.replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
504	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
505	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
506	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
507	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,    newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
508	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
509	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,    newNumber);    n.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	36	2	add
510	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().removeChild(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.getParent().removeChild(n);	  	compilable	  [FE]  RuntimeException  	36	2	add
511	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,    newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	36	2	add
512	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	36	2	add
513	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left.getNext());    n.getParent().removeChild(left.getNext());	  	compilable	  [FE]  RuntimeException  	70	2	add
514	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());    n.getParent().removeChild(left.getNext());	  	compilable	  [FE]  RuntimeException  	70	2	add
515	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left.getNext());    n.getParent().removeChild(right.getNext());	  	compilable	  [FE]  RuntimeException  	70	2	add
516	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(right.getNext());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());    n.getParent().removeChild(right.getNext());	  	compilable	  [FE]  RuntimeException  	70	2	add
517	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getNext().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left.getNext());    n.getNext().removeChild(left.getNext());	  	compilable	  [FE]  RuntimeException  	70	2	add
518	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  n.getNext().removeChild(left.getNext());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getNext().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());    n.getNext().removeChild(left.getNext());	  	compilable	  [FE]  RuntimeException  	70	2	add
519	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(right.getNext());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());    n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(right.getNext());	  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	70	None	add
520	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().replaceChild(left.getNext());  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().replaceChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());    n.getParent().replaceChild(left.getNext());	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	70	None	add
521	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left.getNext());    n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	70	2	add
522	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());    n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	70	2	add
523	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(right);    newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	121	2	add
524	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	121	2	add
525	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  n.getParent().removeChild(left);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(right);    n.getParent().removeChild(left);  newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	121	2	add
526	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  n.getParent().removeChild(left);  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  n.getParent().removeChild(left);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    n.getParent().removeChild(left);  newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	121	2	add
527	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  Node  right  =  left.getNext();  newNumber.addChildToFront(right);  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  Node  right  =  left.getNext();  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    Node  right  =  left.getNext();  newNumber.addChildToFront(right);	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	121	None	add
528	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(right);    newNumber.addChildToFront(right);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	121	2	add
529	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(right);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    newNumber.addChildToFront(right);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	121	2	add
530	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  n.getParent().removeChild(newNumber);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(right);    n.getParent().removeChild(newNumber);  newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	121	2	add
531	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  n.getParent().removeChild(newNumber);  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  n.getParent().removeChild(newNumber);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    n.getParent().removeChild(newNumber);  newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	121	2	add
532	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  n.getParent().addChildToFront(right);  newNumber.addChildToFront(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(right);    n.getParent().addChildToFront(right);  newNumber.addChildToFront(left);	  	compilable	  [FE]  RuntimeException  	121	2	add
533	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  n.getParent().addChildToFront(right);  newNumber.addChildToFront(left);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  n.getParent().addChildToFront(right);  newNumber.addChildToFront(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    n.getParent().addChildToFront(right);  newNumber.addChildToFront(left);	  	compilable	  [FE]  RuntimeException  	121	2	add
534	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  n.getParent().removeChild(right);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(right);    n.getParent().removeChild(right);  newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	121	2	add
535	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  n.getParent().removeChild(right);  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  n.getParent().removeChild(right);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    n.getParent().removeChild(right);  newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	121	2	add
536	[BUG]  [BUGGY]  Result  result  =  newNumber.replaceChild(n,  left);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  newNumber.replaceChild(n,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  newNumber.replaceChild(n,  left);	  Result    result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	58	None	replace
537	[BUG]  [BUGGY]  Result  result  =  newNumber.replaceChild(newNumber,  left);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  newNumber.replaceChild(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  newNumber.replaceChild(newNumber,  left);	  Result    result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	58	None	replace
538	[BUG]  [BUGGY]  Result  result  =  newNumber.replaceChild(n,  newNumber,  left);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  newNumber.replaceChild(n,  newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  newNumber.replaceChild(n,  newNumber,  left);	  Result    result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	58	None	replace
539	[BUG]  [BUGGY]  Result  result  =  newNumber.replaceChild(left,  newNumber);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  newNumber.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  newNumber.replaceChild(left,  newNumber);	  Result    result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	58	None	replace
540	[BUG]  [BUGGY]  Result  result  =  newNumber.replaceChild(n,  newNumber)+  1;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  newNumber.replaceChild(n,  newNumber)+  1;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  newNumber.replaceChild(n,  newNumber)+  1;	  Result    result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	58	None	replace
541	[BUG]  [BUGGY]  n.addChildToFront(result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(result);	  result.addChildToFront(n);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
542	[BUG]  [BUGGY]  node.addChildToFront(newNumber);  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  node.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	node.addChildToFront(newNumber);	  result.addChildToFront(n);    	non-compiled	[CE]  cannot  find  symbol  node	95	None	replace
543	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,  newNumber).replaceChild(left,  newNumber);	  n.replaceChild(n,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	37	None	replace
544	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,  newNumber,  result);	  n.replaceChild(n,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	37	None	replace
545	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	75	2	add
546	[BUG]  [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	75	2	add
547	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	75	2	add
548	[BUG]  [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	75	2	add
549	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	75	2	add
550	[BUG]  [BUGGY]  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	75	2	add
551	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	75	2	add
552	[BUG]  [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	75	2	add
553	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  newNumber.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left);    n.getParent().removeChild(left);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	75	2	add
554	[BUG]  [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  newNumber.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  newNumber.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);    n.getParent().removeChild(left);  newNumber.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	75	2	add
555	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  left.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left);    n.getParent().removeChild(left);  left.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	75	2	add
556	[BUG]  [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  left.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  left.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);    n.getParent().removeChild(left);  left.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	75	2	add
557	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(lvalInt);    newNumber  =  Node.newNumber(lvalInt);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
558	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  newNumber  =  Node.newNumber(lvalInt);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    newNumber  =  Node.newNumber(lvalInt);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
559	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  Node  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    Node  newNumber  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	add
560	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
561	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    result  =  lvalInt  >=  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
562	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  newNumber  =  Node.newNumber(lvalDouble);  [CE]  cannot  find  symbol  lvalDouble  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  newNumber  =  Node.newNumber(lvalDouble);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    newNumber  =  Node.newNumber(lvalDouble);	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	24	None	add
563	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt!=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    result  =  lvalInt!=  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
564	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  result  =  newNumber  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  result  =  newNumber  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    result  =  newNumber  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
565	[BUG]  [BUGGY]  result  =  n.getChildren().removeChild(newNumber);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.getChildren().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.getChildren().removeChild(newNumber);	  result    =    newNumber.getChildren().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
566	[BUG]  [BUGGY]  result  =  newNumber.getChildren().removeChild(n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.getChildren().removeChild(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.getChildren().removeChild(n);	  result    =    newNumber.getChildren().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
567	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);    newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	119	2	add
568	[BUG]  [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);    newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	119	2	add
569	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	119	2	add
570	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	119	2	add
571	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	119	2	add
572	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	119	2	add
573	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	119	2	add
574	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	119	2	add
575	[BUG]  [BUGGY]  newNumber.removeChild(left);  node.removeChild(left);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  node.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);    node.removeChild(left);	  	non-compiled	[CE]  cannot  find  symbol  node	119	None	add
576	[BUG]  [BUGGY]  Node  newNumber  =  right.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  right.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  right.getNext();	  Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	26	None	replace
577	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext()  -  1;  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  left.getNext()  -  1;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  left.getNext()  -  1;	  Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	26	None	replace
578	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext()  +  1;  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  left.getNext()  +  1;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  left.getNext()  +  1;	  Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	26	None	replace
579	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext(),  right.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  left.getNext(),  right.getLastChild());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  left.getNext(),  right.getLastChild());	  Node    newNumber    =    left.getNext();    	non-compiled	[CE]  ';'  expected	26	None	replace
580	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getNext().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left.getNext());    n.getNext().removeChild(left.getNext());	  	compilable	  [FE]  RuntimeException  	72	2	add
581	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  n.getNext().removeChild(left.getNext());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getNext().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());    n.getNext().removeChild(left.getNext());	  	compilable	  [FE]  RuntimeException  	72	2	add
582	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().removeChild(left.getParent());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left.getNext());    n.getParent().removeChild(left.getParent());	  	compilable	  [FE]  RuntimeException  	72	2	add
583	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().removeChild(left.getParent());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().removeChild(left.getParent());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());    n.getParent().removeChild(left.getParent());	  	compilable	  [FE]  RuntimeException  	72	2	add
584	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left.getNext());    n.getParent().removeChild(left.getNext());	  	compilable	  [FE]  RuntimeException  	72	2	add
585	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());    n.getParent().removeChild(left.getNext());	  	compilable	  [FE]  RuntimeException  	72	2	add
586	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  n.getPrevious().removeChild(left.getNext());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getPrevious().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());    n.getPrevious().removeChild(left.getNext());	  	non-compiled	[CE]  cannot  find  symbol	72	None	add
587	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left.getNext());    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	72	2	add
588	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	72	2	add
589	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getFirstChild().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left.getNext());    n.getFirstChild().removeChild(left.getNext());	  	compilable	  [FE]  RuntimeException  	72	2	add
590	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  n.getFirstChild().removeChild(left.getNext());  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getFirstChild().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());    n.getFirstChild().removeChild(left.getNext());	  	compilable	  [FE]  RuntimeException  	72	2	add
591	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getNext().removeChild(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left.getNext());    n.getNext().removeChild(right.getNext());	  	compilable	  [FE]  RuntimeException  	72	2	add
592	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  n.getNext().removeChild(right.getNext());  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getNext().removeChild(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());    n.getNext().removeChild(right.getNext());	  	compilable	  [FE]  RuntimeException  	72	2	add
593	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);	  n.removeChild(newNumber);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	136	2	replace
594	[BUG]  [BUGGY]  n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);	  n.removeChild(newNumber);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	136	2	replace
595	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(left,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);  n.getParent().replaceChild(left,  right);	  n.removeChild(newNumber);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	136	2	replace
596	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(left,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(left,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  n.getParent().replaceChild(left,  right);	  n.removeChild(newNumber);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	136	2	replace
597	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber,  left);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber,  left);	  newNumber.addChildToFront(newNumber);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	41	None	replace
598	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  right);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  right);	  result.addChildToFront(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
599	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  left,  right);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(newNumber,  left,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  left,  right);	  result.addChildToFront(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
600	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber,  right);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber,  right);	  result.addChildToFront(newNumber,    left);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	38	None	replace
601	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  left,  newNumber);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(newNumber,  left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  left,  newNumber);	  result.addChildToFront(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
602	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  right);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
603	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  lval);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  lval);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  lval);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
604	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  n);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  n);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
605	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  rvalInt);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  rvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  rvalInt);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
606	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  lvalInt);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  lvalInt);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
607	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNumber,  this);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  n,  newNumber,  this);	  NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	84	None	replace
608	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  result);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  result);	  NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	84	None	replace
609	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  negNum);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  negNum);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  this,  negNum);	  NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	84	None	replace
610	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	NodeUtil.removeChild(left,  newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	100	2	replace
611	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeUtil.removeChild(left,  newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	100	2	replace
612	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	100	2	replace
613	[BUG]  [BUGGY]  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	100	2	replace
614	[BUG]  [BUGGY]  node.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  node.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	node.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	100	None	replace
615	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	98	2	replace
616	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	98	2	replace
617	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	98	2	replace
618	[BUG]  [BUGGY]  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	98	2	replace
619	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	33	2	add
620	[BUG]  [BUGGY]  n.removeChild(right);  n.removeChild(right);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	33	2	add
621	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	33	2	add
622	[BUG]  [BUGGY]  n.removeChild(right);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	33	2	add
623	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);    newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	33	2	add
624	[BUG]  [BUGGY]  n.removeChild(right);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	33	2	add
625	[BUG]  [BUGGY]  n.removeChild(right);  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  Node  right  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    Node  right  =  left.getNext();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	33	None	add
626	[BUG]  [BUGGY]  n.removeChild(right);  node.removeChild(right);  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  node.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    node.removeChild(right);	  	non-compiled	[CE]  cannot  find  symbol  node	33	None	add
627	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);    n.removeChild(left);	  	compilable	  [FE]  AssertionFailedError  	33	1	add
628	[BUG]  [BUGGY]  n.removeChild(right);  n.removeChild(left);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    n.removeChild(left);	  	compilable	  [FE]  AssertionFailedError  	33	1	add
629	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	33	2	add
630	[BUG]  [BUGGY]  n.removeChild(right);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	33	2	add
631	[BUG]  [BUGGY]  result  =  right.removeFirstChild(),  newNumber);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.removeFirstChild(),  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.removeFirstChild(),  newNumber);	  result    =    right.removeFirstChild();    	non-compiled	[CE]  ';'  expected	113	None	replace
632	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(n);	  Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	replace
633	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(lval);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(lval);	  Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	replace
634	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(left,  result);	  Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	replace
635	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(left);	  Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	replace
636	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(n,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(n,  result);	  Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	replace
637	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToBack(right);	          newNumber.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	7	2	replace
638	[BUG]  [BUGGY]  newNumber.addChildToBack(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(right);	          newNumber.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	7	2	replace
639	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right.getType());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(right.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(right.getType());	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(       "Unknown    shift    operator:       "    +    Node.tokenToName(n.getType()));    }    if(newNumber    >=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	79	None	replace
640	[BUG]  [BUGGY]  result  =  n.removeChild(newNumber,  result);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.removeChild(newNumber,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeChild(newNumber,  result);	  result    =    n.removeChild(newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
641	[BUG]  [BUGGY]  result  =  n.removeChild(newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.removeChild(newNumber  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeChild(newNumber  +  1);	  result    =    n.removeChild(newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	61	None	replace
642	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(left,    newNumber);    n.replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	111	2	add
643	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,    newNumber);    n.replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	111	2	add
644	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(left,    newNumber);    n.replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	111	2	add
645	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,    newNumber);    n.replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	111	2	add
646	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	111	2	add
647	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	111	2	add
648	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,    newNumber);    n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
649	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  newNumber.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(left,    newNumber);    newNumber.replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	111	2	add
650	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  newNumber.replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  newNumber.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,    newNumber);    newNumber.replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	111	2	add
651	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,    newNumber);    n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
652	[BUG]  [BUGGY]  Node  node  =  newNumber.removeChild(n);  [CE]  incompatible  types  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  node  =  newNumber.removeChild(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  node  =  newNumber.removeChild(n);	  n.removeChild(newNumber);    node.removeChild(newNumber);    	non-compiled	[CE]  incompatible  types	103	None	replace
653	[BUG]  [BUGGY]  Node  node  =  newNumber.removeChild(newNumber);  [CE]  incompatible  types  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  node  =  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  node  =  newNumber.removeChild(newNumber);	  n.removeChild(newNumber);    node.removeChild(newNumber);    	non-compiled	[CE]  incompatible  types	103	None	replace
654	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  node  =  newNumber.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	Node  node  =  newNumber.getFirstChild();	  n.removeChild(newNumber);    node.removeChild(newNumber);    	compilable	  [FE]  AssertionFailedError  	103	2	replace
655	[BUG]  [BUGGY]  Node  node  =  newNumber.getFirstChild();  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  node  =  newNumber.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  node  =  newNumber.getFirstChild();	  n.removeChild(newNumber);    node.removeChild(newNumber);    	compilable	  [FE]  AssertionFailedError  	103	2	replace
656	[BUG]  [BUGGY]  result  =  newNumber.removeChild(n.getLastChild());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(n.getLastChild());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(n.getLastChild());	  result    =    newNumber.removeChild(n);    	non-compiled	[CE]  incompatible  types	60	None	replace
657	[BUG]  [BUGGY]  result  =  newNumber.removeChild(n.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(n.getString());	  result    =    newNumber.removeChild(n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	60	None	replace
658	[BUG]  [BUGGY]  result  =  newNumber.removeChild(n.getFirstChild());  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(n.getFirstChild());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(n.getFirstChild());	  result    =    newNumber.removeChild(n);    	non-compiled	[CE]  incompatible  types	60	None	replace
659	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);  n.getParent().replaceChild(n,  left);	  n.removeChild(newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
660	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  n.getParent().replaceChild(n,  left);	  n.removeChild(newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
661	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);  n.getParent().replaceChild(n,  right);	  n.removeChild(newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
662	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  n.getParent().replaceChild(n,  right);	  n.removeChild(newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
663	[BUG]  [BUGGY]  result  =  n.replaceChild(newNumber,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.replaceChild(newNumber,  newNumber).replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(newNumber,  newNumber).replaceChild(left,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
664	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  newNumber).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(n,  newNumber).replaceChild(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  newNumber).replaceChild(newNumber,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
665	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(left,  newNumber).replaceChild(newNumber,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
666	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(n,  newNumber).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(n,  newNumber).replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(n,  newNumber).replaceChild(right,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
667	[BUG]  [BUGGY]  result  =  right.replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.replaceChild(n,  newNumber).replaceChild(left,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
668	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);  n.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(left);    	compilable	  [FE]  RuntimeException  	140	2	replace
669	[BUG]  [BUGGY]  n.removeChild(right);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);  n.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(left);    	compilable	  [FE]  RuntimeException  	140	2	replace
670	[BUG]  [BUGGY]  newNumber  =  node.getNext();  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  node.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  node.getNext();	  newNumber    =    newNumber.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	28	None	replace
671	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  newNumber.getLastChild();	  newNumber    =    newNumber.getNext();    	compilable	  [FE]  AssertionFailedError  	28	2	replace
672	[BUG]  [BUGGY]  newNumber  =  newNumber.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  newNumber.getLastChild();	  newNumber    =    newNumber.getNext();    	compilable	  [FE]  AssertionFailedError  	28	2	replace
673	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	109	2	add
674	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(left);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	109	2	add
675	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	109	2	add
676	[BUG]  [BUGGY]  n.removeChild(left);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	109	2	add
677	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(left);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);    n.removeChild(left);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	109	2	add
678	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(left);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(left);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);    n.removeChild(left);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	109	2	add
679	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);    n.removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	109	2	add
680	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(left);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);    n.removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	109	2	add
681	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(left);  newNumber.removeChild(  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);    n.removeChild(left);  newNumber.removeChild(  left);	  	compilable	  [FE]  RuntimeException  	109	2	add
682	[BUG]  [BUGGY]  n.removeChild(left);  n.removeChild(left);  newNumber.removeChild(  left);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.removeChild(left);  newNumber.removeChild(  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);    n.removeChild(left);  newNumber.removeChild(  left);	  	compilable	  [FE]  RuntimeException  	109	2	add
683	[BUG]  [BUGGY]  result  =  left.removeChild(right);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.removeChild(right);	  result    =    newNumber.removeChild(right);    	non-compiled	[CE]  incompatible  types	141	None	replace
684	[BUG]  [BUGGY]  result  =  right.removeChild(n);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.removeChild(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.removeChild(n);	  result    =    newNumber.removeChild(right);    	non-compiled	[CE]  incompatible  types	141	None	replace
685	[BUG]  [BUGGY]  result  =  n.removeChild(right);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeChild(right);	  result    =    newNumber.removeChild(right);    	non-compiled	[CE]  incompatible  types	141	None	replace
686	[BUG]  [BUGGY]  result  =  n.removeLastChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.removeLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeLastChild();	  result    =    newNumber.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
687	[BUG]  [BUGGY]  result  =  left.removeLastChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.removeLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.removeLastChild();	  result    =    newNumber.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
688	[BUG]  [BUGGY]  result  =  node.removeLastChild();  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  node.removeLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  node.removeLastChild();	  result    =    newNumber.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	53	None	replace
689	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left)        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
690	[BUG]  [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left)        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
691	[BUG]  [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [CE]  bad  operand  types  for  binary  operator  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left)        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  >=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	77	None	add
692	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left)        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	77	2	add
693	[BUG]  [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left)        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	77	2	add
694	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(right,  newNumber);	  n.replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	112	2	replace
695	[BUG]  [BUGGY]  n.replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(right,  newNumber);	  n.replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	112	2	replace
696	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber,  result);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,  newNumber,  result);	  n.replaceChild(left,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	112	None	replace
697	[BUG]  [BUGGY]  n.addChildToFront(newNumber,  left);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber,  left);	  n.addChildToFront(newNumber);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	44	None	replace
698	[BUG]  [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
699	[BUG]  [BUGGY]  n.removeChild(result);  n.removeChild(result);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(result);  n.removeChild(result);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(result);  n.removeChild(result);  result  =  lvalInt  >>  >  rvalInt;  break;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
700	[BUG]  [BUGGY]  n.removeChild(result);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(result);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(result);  result  =  lvalInt  >>  >  rvalInt;  break;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
701	[BUG]  [BUGGY]  n.removeChild(result);  n.removeChild(result);  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(result);  n.removeChild(result);  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(result);  n.removeChild(result);  result  =  lvalInt  >=  >  rvalInt;  break;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
702	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(newNumber,  newNumber);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(newNumber,  newNumber);	  result    =    n.replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  incompatible  types	56	None	replace
703	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(newNumber,  node);  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(newNumber,  node);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(newNumber,  node);	  result    =    n.replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	56	None	replace
704	[BUG]  [BUGGY]  result.addChildToBack(newNumber,  right);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToBack(newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(newNumber,  right);	  result.addChildToBack(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
705	[BUG]  [BUGGY]  newNumber.addChildToBack(newNumber,  right);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(newNumber,  right);	  result.addChildToBack(newNumber,    left);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	48	None	replace
706	[BUG]  [BUGGY]  result.addChildToBack(newNumber,  left,  right);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToBack(newNumber,  left,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(newNumber,  left,  right);	  result.addChildToBack(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
707	[BUG]  [BUGGY]  result.addChildToBack(newNumber,  newNumber);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToBack(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(newNumber,  newNumber);	  result.addChildToBack(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
708	[BUG]  [BUGGY]  Node  left  =  right.getParent();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  right.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  right.getParent();	  Node    left    =    n.getParent();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	117	None	replace
709	[BUG]  [BUGGY]  Node  left  =  node.getParent();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  node.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  node.getParent();	  Node    left    =    n.getParent();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	117	None	replace
710	[BUG]  [BUGGY]  Node  left  =  newNumber.getParent();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  newNumber.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  newNumber.getParent();	  Node    left    =    n.getParent();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	117	None	replace
711	[BUG]  [BUGGY]  Node  left  =  newNumber.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  newNumber.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  newNumber.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	116	None	replace
712	[BUG]  [BUGGY]  Node  left  =  node.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  node.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  node.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	116	None	replace
713	[BUG]  [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt  ==  >  rvalInt;  break;	          result    =    newNumber    ==    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
714	[BUG]  [BUGGY]  newNumber.removeChildToFront(result);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChildToFront(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChildToFront(result);	  result.removeChildToFront(newNumber);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
715	[BUG]  [BUGGY]  n.removeChildToFront(newNumber);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChildToFront(newNumber);	  result.removeChildToFront(newNumber);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
716	[BUG]  [BUGGY]  node.removeChildToFront(newNumber);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  node.removeChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	node.removeChildToFront(newNumber);	  result.removeChildToFront(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	96	None	replace
717	[BUG]  [BUGGY]  result.removeChildToFront(n);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.removeChildToFront(n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.removeChildToFront(n);	  result.removeChildToFront(newNumber);    	non-compiled	[CE]  double  cannot  be  dereferenced	96	None	replace
718	[BUG]  [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(newNumber,  left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getParent().addChildToBack(newNumber,  left);	  Node    newNumber    =    n.getParent().addChildToBack(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	89	None	replace
719	[BUG]  [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(right);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getParent().addChildToBack(right);	  Node    newNumber    =    n.getParent().addChildToBack(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	89	None	replace
720	[BUG]  [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getParent().addChildToBack(left);	  Node    newNumber    =    n.getParent().addChildToBack(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	89	None	replace
721	[BUG]  [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(newNumber,  right);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getParent().addChildToBack(newNumber,  right);	  Node    newNumber    =    n.getParent().addChildToBack(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	89	None	replace
722	[BUG]  [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getParent().addChildToBack(result);	  Node    newNumber    =    n.getParent().addChildToBack(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	89	None	replace
723	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
724	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
725	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
726	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
727	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
728	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	46	2	add
729	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  resultDouble  =  Math.max(resultDouble.length(),  newNumber);  [CE]  cannot  find  symbol  resultDouble  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  resultDouble  =  Math.max(resultDouble.length(),  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  resultDouble  =  Math.max(resultDouble.length(),  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  resultDouble	46	None	add
730	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	46	2	add
731	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	46	2	add
732	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(resultDouble);  [CE]  cannot  find  symbol  resultDouble  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(resultDouble);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber.addChildToBack(resultDouble);	  	non-compiled	[CE]  cannot  find  symbol  resultDouble	46	None	add
733	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
734	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
735	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
736	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
737	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.replaceChild(newNumber);  n.getParent().removeChild(newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.replaceChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.replaceChild(newNumber);  n.getParent().removeChild(newNumber);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	add
738	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
739	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
740	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.addChildToBack(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.addChildToBack(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
741	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.addChildToBack(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.addChildToBack(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.addChildToBack(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
742	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  left,  lval);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(newNumber,  left,  lval);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  left,  lval);	  result.addChildToFront(newNumber,    lval);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
743	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  newNumber);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  newNumber);	  result.addChildToFront(newNumber,    lval);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
744	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  rval);  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(newNumber,  rval);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  rval);	  result.addChildToFront(newNumber,    lval);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
745	[BUG]  [BUGGY]  result.addChildToFront(lval,  newNumber);  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(lval,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(lval,  newNumber);	  result.addChildToFront(newNumber,    lval);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
746	[BUG]  [BUGGY]  newNumber.addChildToFront(result,  lval);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(result,  lval);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(result,  lval);	  result.addChildToFront(newNumber,    lval);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	42	None	replace
747	[BUG]  [BUGGY]  n.removeChild(newNumber,  result  +  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber,  result  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber,  result  +  1);	  n.removeChild(newNumber    +    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	35	None	replace
748	[BUG]  [BUGGY]  n.removeChild(newNumber,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber,  newNumber  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber,  newNumber  +  1);	  n.removeChild(newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	35	None	replace
749	[BUG]  [BUGGY]  n.removeChild(newNumber)+  1;  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber)+  1;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber)+  1;	  n.removeChild(newNumber    +    1);    	non-compiled	[CE]  not  a  statement	35	None	replace
750	[BUG]  [BUGGY]  n.removeChild(newNumber  *  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber  *  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber  *  1);	  n.removeChild(newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	35	None	replace
751	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	9	2	add
752	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(left);  n.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	9	2	add
753	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
754	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(left);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
755	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.replaceChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.replaceChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
756	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.replaceChild(left,  newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.replaceChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.replaceChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
757	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
758	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
759	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	9	2	add
760	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	9	2	add
761	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
762	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(right);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
763	[BUG]  [BUGGY]  result  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  node.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  node.getFirstChild();	  result    =    newNumber.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	52	None	replace
764	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	107	None	replace
765	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(right,  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right,  MAX_FOLD_NUMBER);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(right,  MAX_FOLD_NUMBER);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	107	None	replace
766	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left,  MAX_FOLD_NUMBER_ERROR);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	107	None	replace
767	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left,  n);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left,  n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left,  n);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	107	None	replace
768	[BUG]  [BUGGY]  Result  result  =  n.replaceChild(newNumber,  left);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  n.replaceChild(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  n.replaceChild(newNumber,  left);	  Result    result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	58	None	replace
769	[BUG]  [BUGGY]  Result  result  =  n.replaceChild(newNumber,  newNumber);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  n.replaceChild(newNumber,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  n.replaceChild(newNumber,  newNumber);	  Result    result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	58	None	replace
770	[BUG]  [BUGGY]  Result  result  =  left.replaceChild(n,  newNumber);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  left.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  left.replaceChild(n,  newNumber);	  Result    result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	58	None	replace
771	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	129	2	add
772	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,    newNumber);    n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	129	2	add
773	[BUG]  [BUGGY]  result  =  n.removeChild(newNumber,  left);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.removeChild(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeChild(newNumber,  left);	  result    =    n.removeChild(newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
774	[BUG]  [BUGGY]  NodeTraversal.traverse(this.compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(this.compiler,  left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(this.compiler,  left,  newNumber);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
775	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(left,  n);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(left,  n);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(left,  n);	  result    =    n.replaceChild(left,    newNumber);    	non-compiled	[CE]  incompatible  types	82	None	replace
776	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToBack(left);	  node.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	88	2	replace
777	[BUG]  [BUGGY]  newNumber.addChildToBack(left);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(left);	  node.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	88	2	replace
778	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	16	2	add
779	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	16	2	add
780	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	16	2	add
781	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	16	2	add
782	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
783	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	16	2	add
784	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(left);  n.getParent().removeChild(newNumber);	  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	12	None	replace
785	[BUG]  [BUGGY]  result  =  left.replaceChild(newNumber,  Node.newNumber);  [CE]  cannot  find  symbol  newNumber  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(newNumber,  Node.newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(newNumber,  Node.newNumber);	  result    =    n.replaceChild(newNumber,    left);    	non-compiled	[CE]  cannot  find  symbol  newNumber	105	None	replace
786	[BUG]  [BUGGY]  result  =  left.replaceChild(newNumber,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(newNumber,  this);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(newNumber,  this);	  result    =    n.replaceChild(newNumber,    left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	105	None	replace
787	[BUG]  [BUGGY]  newNumber.addChildToFront(left,  newNumber);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(left,  newNumber);	  newNumber.addChildToFront(right);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	122	None	replace
788	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
789	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
790	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  node.getParent().removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  node.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    node.getParent().removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	31	None	add
791	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	18	2	add
792	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	18	2	add
793	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(left);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	18	2	add
794	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  n.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(left);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	18	2	add
795	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
796	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
797	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	18	2	add
798	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	18	2	add
799	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	18	2	add
800	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	18	2	add
801	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(right.getNext(),  MAX_FOLD_NUMBER);  [CE]  no  suitable  method  found  for  newNumber(Node,double)  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right.getNext(),  MAX_FOLD_NUMBER);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(right.getNext(),  MAX_FOLD_NUMBER);	  newNumber    =    Node.newNumber(left.getNext());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,double)	118	None	replace
802	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left.getString());  [CE]  no  suitable  method  found  for  newNumber(String)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left.getString());	  newNumber    =    Node.newNumber(left.getNext());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String)	118	None	replace
803	[BUG]  [BUGGY]  result.addChildToBack(newNumber,  left,  MAX_FOLD_NUMBER);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToBack(newNumber,  left,  MAX_FOLD_NUMBER);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(newNumber,  left,  MAX_FOLD_NUMBER);	  result.addChildToBack(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
804	[BUG]  [BUGGY]  result.addChildToBack(newNumber,  left,  newNumber);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToBack(newNumber,  left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(newNumber,  left,  newNumber);	  result.addChildToBack(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
805	[BUG]  [BUGGY]  result.addChildToBack(left,  newNumber);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToBack(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(left,  newNumber);	  result.addChildToBack(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
806	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left)        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
807	[BUG]  [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left)        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
808	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left)        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
809	[BUG]  [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left)        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	77	1	add
810	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);    n.getParent().removeChild(left);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	119	2	add
811	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);    n.getParent().removeChild(left);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	119	2	add
812	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);    newNumber.removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	119	2	add
813	[BUG]  [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);    newNumber.removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	119	2	add
814	[BUG]  [BUGGY]  newNumber.setString(n.getString());  Node  newNumber  =  Node.newNumber(result);  newNumber.setString(n.getString());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  Node  newNumber  =  Node.newNumber(result);  newNumber.setString(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    Node  newNumber  =  Node.newNumber(result);  newNumber.setString(n.getString());	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	123	None	add
815	[BUG]  [BUGGY]  newNumber.setString(n.getString());  Node  newNumber  =  Node.newNumber(left);  newNumber.setString(n.getString());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  Node  newNumber  =  Node.newNumber(left);  newNumber.setString(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    Node  newNumber  =  Node.newNumber(left);  newNumber.setString(n.getString());	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	123	None	add
816	[BUG]  [BUGGY]  newNumber.setString(n.getString());  Node  newNumber  =  Node.newNumber(left);  newNumber.setString(newNumber.getString());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  Node  newNumber  =  Node.newNumber(left);  newNumber.setString(newNumber.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    Node  newNumber  =  Node.newNumber(left);  newNumber.setString(newNumber.getString());	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	123	None	add
817	[BUG]  [BUGGY]  newNumber.setString(n.getString());  Node  newNumber  =  Node.newNumber(result);  n.setString(n.getString());  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  Node  newNumber  =  Node.newNumber(result);  n.setString(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    Node  newNumber  =  Node.newNumber(result);  n.setString(n.getString());	  	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	123	None	add
818	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(result,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(result,  left);	  Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	replace
819	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(left,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(left,  right);	  Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	replace
820	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(right);	  Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	replace
821	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  n.getNext().replaceChild(left.getNext());  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getNext().replaceChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());    n.getNext().replaceChild(left.getNext());	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	72	None	add
822	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  n.getFirst().removeChild(left.getNext());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getFirst().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());    n.getFirst().removeChild(left.getNext());	  	non-compiled	[CE]  cannot  find  symbol	72	None	add
823	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(right);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(right);	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(       "Unknown    shift    operator:       "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	65	None	replace
824	[BUG]  [BUGGY]  if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   ",    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	149	None	replace
825	[BUG]  [BUGGY]  if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: ",  +  Node.tokenToName(left.getLastChild()));  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: ",  +  Node.tokenToName(left.getLastChild()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: ",  +  Node.tokenToName(left.getLastChild()));  }	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   ",    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	149	None	replace
826	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  right.removeFirstChild());  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(n,  right.removeFirstChild());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  right.removeFirstChild());	  result    =    right.removeFirstChild();    	non-compiled	[CE]  incompatible  types	113	None	replace
827	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  right).removeFirstChild();  [CE]  void  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(n,  right).removeFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  right).removeFirstChild();	  result    =    right.removeFirstChild();    	non-compiled	[CE]  void  cannot  be  dereferenced	113	None	replace
828	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n  =  Node.newNumber(lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(lvalInt);    n  =  Node.newNumber(lvalInt);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
829	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n  =  Node.newNumber(lvalInt);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n  =  Node.newNumber(lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    n  =  Node.newNumber(lvalInt);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
830	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
831	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  node  =  Node.newNumber(lvalInt);  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  node  =  Node.newNumber(lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    node  =  Node.newNumber(lvalInt);	  	non-compiled	[CE]  cannot  find  symbol  node	24	None	add
832	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(left);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(left);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
833	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(left);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(left);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(left);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
834	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
835	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(right);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
836	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
837	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
838	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.replaceChild(left,  newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.replaceChild(left,  newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
839	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.replaceChild(left,  newNumber);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.replaceChild(left,  newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.replaceChild(left,  newNumber);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	99	2	add
840	[BUG]  [BUGGY]  newNumber  =  left.getNext();  Node  left  =  left.getNext();  newNumber  =  left.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  Node  left  =  left.getNext();  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    Node  left  =  left.getNext();  newNumber  =  left.getNext();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	54	None	add
841	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n  =  left.getNext();  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    left.getNext();    n  =  left.getNext();  newNumber  =  left.getNext();	  	compilable	  [FE]  AssertionFailedError  	54	1	add
842	[BUG]  [BUGGY]  newNumber  =  left.getNext();  n  =  left.getNext();  newNumber  =  left.getNext();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n  =  left.getNext();  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    n  =  left.getNext();  newNumber  =  left.getNext();	  	compilable	  [FE]  AssertionFailedError  	54	1	add
843	[BUG]  [BUGGY]  newNumber  =  left.getNext();  node  =  left.getNext();  newNumber  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  node  =  left.getNext();  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    node  =  left.getNext();  newNumber  =  left.getNext();	  	non-compiled	[CE]  cannot  find  symbol  node	54	None	add
844	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(newNumber,  left);	  parent.replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	21	2	replace
845	[BUG]  [BUGGY]  n.replaceChild(newNumber,  left);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(newNumber,  left);	  parent.replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	21	2	replace
846	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(left.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.setString(left.getString());	  newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	124	2	replace
847	[BUG]  [BUGGY]  newNumber.setString(left.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(left.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(left.getString());	  newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	124	2	replace
848	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString()  +  3);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.setString(n.getString()  +  3);	  newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	124	2	replace
849	[BUG]  [BUGGY]  newNumber.setString(n.getString()  +  3);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString()  +  3);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString()  +  3);	  newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	124	2	replace
850	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.removeChild(left);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
851	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(left);  n.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.removeChild(left);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
852	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.replaceChild(left,  newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.replaceChild(left,  newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
853	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.replaceChild(left,  newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.replaceChild(left,  newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.replaceChild(left,  newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
854	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.addChildToFront(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.addChildToFront(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
855	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.addChildToFront(newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.addChildToFront(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.addChildToFront(newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
856	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	133	2	add
857	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	133	2	add
858	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(left);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	139	2	add
859	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(left);  n.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(left);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(left);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	139	2	add
860	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	139	2	add
861	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(left);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	139	2	add
862	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
863	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
864	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
865	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	101	2	add
866	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(left);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	101	2	add
867	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.replaceChild(left,  newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.replaceChild(left,  newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
868	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.replaceChild(left,  newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.replaceChild(left,  newNumber);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.replaceChild(left,  newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
869	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(right);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.removeChild(right);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	101	2	add
870	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(right);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(right);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.removeChild(right);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	101	2	add
871	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	131	2	add
872	[BUG]  [BUGGY]  n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getNext().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);    n.getNext().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	131	2	add
873	[BUG]  [BUGGY]  n.getNext().removeChild(left);  n.getFirst().removeChild(left);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getFirst().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);    n.getFirst().removeChild(left);	  	non-compiled	[CE]  cannot  find  symbol	131	None	add
874	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getNext().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left);    n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	75	2	add
875	[BUG]  [BUGGY]  n.getParent().removeChild(left);  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getNext().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);    n.getNext().removeChild(left);	  	compilable	  [FE]  RuntimeException  	75	2	add
876	[BUG]  [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(right);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(right);	  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	75	None	add
877	[BUG]  [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  parent.replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  parent  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  parent.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);    n.getParent().removeChild(left);  parent.replaceChild(n,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  parent	75	None	add
878	[BUG]  [BUGGY]          newNumber.removeChild(right);  node.removeChild(right);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  node.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    node.removeChild(right);	  	non-compiled	[CE]  cannot  find  symbol  node	125	None	add
879	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.removeChild(right);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
880	[BUG]  [BUGGY]          newNumber.removeChild(right);  n.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
881	[BUG]  [BUGGY]          newNumber.removeChild(right);  node.removeChild(right);  newNumber.removeChild(left);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  node.removeChild(right);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    node.removeChild(right);  newNumber.removeChild(left);	  	non-compiled	[CE]  cannot  find  symbol  node	125	None	add
882	[BUG]  [BUGGY]  result  =  left.getChildren().removeChild(newNumber);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.getChildren().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.getChildren().removeChild(newNumber);	  result    =    newNumber.getChildren().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
883	[BUG]  [BUGGY]  Node  newNumber  =  n.getParent();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getParent();	  Node    left    =    n.getParent();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	117	None	replace
884	[BUG]  [BUGGY]  Node  right  =  n.getParent();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  right  =  n.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  right  =  n.getParent();	  Node    left    =    n.getParent();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	117	None	replace
885	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);	  n.removeChild(newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
886	[BUG]  [BUGGY]  n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);	  n.removeChild(newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
887	[BUG]  [BUGGY]  result  =  n.replaceChild(newNumber,  Node.newNumber());  [CE]  no  suitable  method  found  for  newNumber()  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.replaceChild(newNumber,  Node.newNumber());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(newNumber,  Node.newNumber());	  result    =    newNumber.replaceChild(newNumber,    n);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber()	59	None	replace
888	[BUG]  [BUGGY]  result  =  n.replaceChild(newNumber,  Node.newNumber);  [CE]  cannot  find  symbol  newNumber  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.replaceChild(newNumber,  Node.newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(newNumber,  Node.newNumber);	  result    =    newNumber.replaceChild(newNumber,    n);    	non-compiled	[CE]  cannot  find  symbol  newNumber	59	None	replace
889	[BUG]  [BUGGY]  n.removeChild(right);  Node  right  =  left.getNext();  n.removeChild(right);  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  Node  right  =  left.getNext();  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    Node  right  =  left.getNext();  n.removeChild(right);	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	33	None	add
890	[BUG]  [BUGGY]  n.removeChild(right);  Node  right  =  left.getFirstChild();  n.removeChild(right);  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  Node  right  =  left.getFirstChild();  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    Node  right  =  left.getFirstChild();  n.removeChild(right);	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	33	None	add
891	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(result);  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
892	[BUG]  [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  result  =  lvalInt  >=  >  rvalInt;  break;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
893	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
894	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(newNumber,  Node.newNumber);  [CE]  cannot  find  symbol  newNumber  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(newNumber,  Node.newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(newNumber,  Node.newNumber);	  result    =    n.replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  newNumber	56	None	replace
895	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  n.removeChild(newNumber);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	136	2	replace
896	[BUG]  [BUGGY]  n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  n.removeChild(newNumber);    n.getParent().replaceChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	136	2	replace
897	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right);  n.getParent().replaceChild(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(right);  n.getParent().replaceChild(left,  newNumber);	  n.removeChild(newNumber);    n.getParent().replaceChild(left,    newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	136	None	replace
898	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(right);	  n.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
899	[BUG]  [BUGGY]  n.addChildToBack(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(right);	  n.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	47	2	replace
900	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  node.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  node.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());    node.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());	  	non-compiled	[CE]  cannot  find  symbol  node	70	None	add
901	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  node.getParent().removeChild(left.getNext());  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  node.getParent().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());    node.getParent().removeChild(left.getNext());	  	non-compiled	[CE]  cannot  find  symbol  node	70	None	add
902	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  newNumber.removeChild(newNumber);	  n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	102	2	replace
903	[BUG]  [BUGGY]  n.removeChild(left);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  newNumber.removeChild(newNumber);	  n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	102	2	replace
904	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.removeChild(newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(left);  n.removeChild(newNumber);	  n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	102	None	replace
905	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,  newNumber  +  1);	  n.replaceChild(left,    newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	112	None	replace
906	[BUG]  [BUGGY]  n.removeChild(right,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right,  newNumber);	  n.replaceChild(left,    newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	112	None	replace
907	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
908	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
909	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
910	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
911	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
912	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber    ==    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionError  	67	2	add
913	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  Node.newNumber(result);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    result  =  Node.newNumber(result);	  	non-compiled	[CE]  incompatible  types	22	None	add
914	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
915	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  n  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(result);    n  =  Node.newNumber(result);	  	compilable	  [FE]  AssertionFailedError  	22	1	add
916	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  n  =  Node.newNumber(result);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  n  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    n  =  Node.newNumber(result);	  	compilable	  [FE]  AssertionFailedError  	22	1	add
917	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
918	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(left);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
919	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	13	2	add
920	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  RuntimeException  	13	2	add
921	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	13	2	add
922	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(n,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(n,  left);	  	compilable	  [FE]  RuntimeException  	13	2	add
923	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  n.getFirstChild().getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	116	None	replace
924	[BUG]  [BUGGY]  Node  newNumber  =  n.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	116	None	replace
925	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  Node  left  =  left.getNext();  n.replaceChild(left,  newNumber);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  Node  left  =  left.getNext();  n.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,    newNumber);    Node  left  =  left.getNext();  n.replaceChild(left,  newNumber);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	111	None	add
926	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  Node  left  =  left.getNext();  n.replaceChild(right,  newNumber);  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  Node  left  =  left.getNext();  n.replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,    newNumber);    Node  left  =  left.getNext();  n.replaceChild(right,  newNumber);	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	111	None	add
927	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  node.replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  node.replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,    newNumber);    node.replaceChild(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	111	None	add
928	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(right,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(right,  newNumber);	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(       "Unknown    shift    operator:       "    +    Node.tokenToName(n.getType()));    }    if(newNumber    >=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	66	None	replace
929	[BUG]  [BUGGY]  result  =  left.replaceChild(newNumber,  left);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(newNumber,  left);	  result    =    newNumber.replaceChild(left,    left);    	non-compiled	[CE]  incompatible  types	145	None	replace
930	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  node  =  Node.newNumber(n.getType());  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  node  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    node  =  Node.newNumber(n.getType());	  	non-compiled	[CE]  cannot  find  symbol  node	29	None	add
931	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
932	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
933	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  right.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  right.getParent();	  newNumber    =    newNumber.getNext();    	compilable	  [FE]  AssertionFailedError  	28	2	replace
934	[BUG]  [BUGGY]  newNumber  =  right.getParent();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  right.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  right.getParent();	  newNumber    =    newNumber.getNext();    	compilable	  [FE]  AssertionFailedError  	28	2	replace
935	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  left,  MAX_FOLD_NUMBER);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(newNumber,  left,  MAX_FOLD_NUMBER);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  left,  MAX_FOLD_NUMBER);	  result.addChildToFront(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
936	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  left,  lvalInt);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(newNumber,  left,  lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  left,  lvalInt);	  result.addChildToFront(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
937	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  right.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber!=  right.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	93	1	add
938	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  right.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  right.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber!=  right.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	93	1	add
939	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	93	1	add
940	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(left.getType()));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(left.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	93	1	add
941	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(right);    newNumber.addChildToFront(right);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	121	2	add
942	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(right);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    newNumber.addChildToFront(right);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	121	2	add
943	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(right);    newNumber.addChildToFront(left);	  	compilable	  [FE]  RuntimeException  	121	2	add
944	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  newNumber.addChildToFront(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    newNumber.addChildToFront(left);	  	compilable	  [FE]  RuntimeException  	121	2	add
945	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  node.addChildToFront(right);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  node.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    node.addChildToFront(right);	  	non-compiled	[CE]  cannot  find  symbol  node	121	None	add
946	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  lvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt  >>  >  lvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt  >>  >  lvalInt;  break;	          result    =    newNumber!=    >    lvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
947	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  n;  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt  >>  >  n;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt  >>  >  n;  break;	          result    =    newNumber!=    >    lvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
948	[BUG]  [BUGGY]  result  =  n.replaceChild(right,  newNumber);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(right,  newNumber);	  result    =    newNumber.replaceChild(n,    right);    	non-compiled	[CE]  incompatible  types	128	None	replace
949	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left,  right.getType());  [CE]  no  suitable  method  found  for  newNumber(Node,int)  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left,  right.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left,  right.getType());	  newNumber    =    Node.newNumber(n.getType());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,int)	30	None	replace
950	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType(),  left);  [CE]  no  suitable  method  found  for  newNumber(int,Node)  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType(),  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(n.getType(),  left);	  newNumber    =    Node.newNumber(n.getType());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(int,Node)	30	None	replace
951	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	100	2	replace
952	[BUG]  [BUGGY]  n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  NodeUtil.removeChild(right,  newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	100	2	replace
953	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  NodeUtil.removeChild(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  NodeUtil.removeChild(newNumber,  left);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	100	2	replace
954	[BUG]  [BUGGY]  n.removeChild(left);  NodeUtil.removeChild(newNumber,  left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  NodeUtil.removeChild(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  NodeUtil.removeChild(newNumber,  left);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	100	2	replace
955	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  NodeUtil.removeChild(newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  NodeUtil.removeChild(newNumber,  right);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	100	2	replace
956	[BUG]  [BUGGY]  n.removeChild(left);  NodeUtil.removeChild(newNumber,  right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  NodeUtil.removeChild(newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  NodeUtil.removeChild(newNumber,  right);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    	compilable	  [FE]  RuntimeException  	100	2	replace
957	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	130	2	replace
958	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	130	2	replace
959	[BUG]  [BUGGY]  result  =  rvalInt  >>  >  newNumber;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  rvalInt  >>  >  newNumber;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  rvalInt  >>  >  newNumber;  break;	          result    =    newNumber!=    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
960	[BUG]  [BUGGY]  result  =  newNumber  ==  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber  ==  >  MAX_FOLD_NUMBER;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber  ==  >  MAX_FOLD_NUMBER;  break;	          result    =    newNumber!=    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
961	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  MAX_FOLD_NUMBER);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
962	[BUG]  [BUGGY]  n.removeChild(left,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left,  newNumber);	  n.replaceChild(n,    newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	37	None	replace
963	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(left);	  	compilable	  [FE]  RuntimeException  	6	2	add
964	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(left);	  	compilable	  [FE]  RuntimeException  	6	2	add
965	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(node);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(node);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(node);	  	non-compiled	[CE]  cannot  find  symbol  node	6	None	add
966	[BUG]  [BUGGY]  Node  left  =  n.getLastChild().getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  n.getLastChild().getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  n.getLastChild().getNext();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	74	None	replace
967	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(result);  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(result);  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
968	[BUG]  [BUGGY]  newNumber.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
969	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getFirstChild());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left.getFirstChild());	  n.getParent().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	71	2	replace
970	[BUG]  [BUGGY]  n.getParent().removeChild(left.getFirstChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getFirstChild());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getFirstChild());	  n.getParent().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	71	2	replace
971	[BUG]  [BUGGY]  newNumber  =  left.replaceChild(n,  newNumber);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  left.replaceChild(n,  newNumber);	  newNumber    =    left.getNext();    	non-compiled	[CE]  incompatible  types	55	None	replace
972	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.removeFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  left.removeFirstChild();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
973	[BUG]  [BUGGY]  newNumber  =  left.removeFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.removeFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  left.removeFirstChild();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
974	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  left.getParent();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
975	[BUG]  [BUGGY]  newNumber  =  left.getParent();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  left.getParent();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
976	[BUG]  [BUGGY]  result  =  left.replaceChild(newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(newNumber);	  result    =    newNumber.removeChild(left);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	91	None	replace
977	[BUG]  [BUGGY]  NodeUtil.removeChildToBack(newNumber);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeUtil.removeChildToBack(newNumber);	  result.removeChildToBack(newNumber);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
978	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(left);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(left);  n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
979	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(left);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(left);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(left);  n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
980	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
981	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
982	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber  =  Node.newNumber(result);	  	compilable	  [FE]  RuntimeException  	46	2	add
983	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber  =  Node.newNumber(result);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber  =  Node.newNumber(result);	  	compilable	  [FE]  RuntimeException  	46	2	add
984	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber  =  NodeUtil.newNumber(left,  newNumber);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber  =  NodeUtil.newNumber(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber  =  NodeUtil.newNumber(left,  newNumber);	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
985	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber  =  NodeUtil.newNumber(result);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber  =  NodeUtil.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber  =  NodeUtil.newNumber(result);	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
986	[BUG]  [BUGGY]  result  =  newNumber  ==  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber  ==  >  MAX_FOLD_NUMBER;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber  ==  >  MAX_FOLD_NUMBER;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
987	[BUG]  [BUGGY]  result  =  rvalInt  >>  >  newNumber;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  rvalInt  >>  >  newNumber;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  rvalInt  >>  >  newNumber;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
988	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
989	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
990	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
991	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
992	[BUG]  [BUGGY]  result  =  right.removeLastChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.removeLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.removeLastChild();	  result    =    newNumber.removeLastChild();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
993	[BUG]  [BUGGY]  result  =  rvalInt  ==  >  newNumber;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  rvalInt  ==  >  newNumber;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  rvalInt  ==  >  newNumber;  break;	          result    =    newNumber    ==    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
994	[BUG]  [BUGGY]  result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;  break;	          result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
995	[BUG]  [BUGGY]  result  =  rvalInt  >>  >  lvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  rvalInt  >>  >  lvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  rvalInt  >>  >  lvalInt;  break;	          result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
996	[BUG]  [BUGGY]  if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()),    newNumber);    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	148	None	replace
997	[BUG]  [BUGGY]  if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getFirstChild()),  newNumber);  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getFirstChild()),  newNumber);  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getFirstChild()),  newNumber);  }	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()),    newNumber);    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	148	None	replace
998	[BUG]  [BUGGY]  n.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()),    newNumber);    }    	non-compiled	[CE]  	148	None	replace
999	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
1000	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.replaceChild(left,  newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
1001	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(left);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.removeChild(left);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	11	2	add
1002	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(left);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(left);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.removeChild(left);  n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	11	2	add
1003	[BUG]  [BUGGY]  if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getFirstChild()));  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getFirstChild()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(left!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getFirstChild()));  }	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	146	None	replace
1004	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChild(left,  newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	NodeUtil.removeChild(left,  newNumber);  n.removeChild(right);	  n.removeChild(newNumber);    n.removeChild(right);    	compilable	  [FE]  RuntimeException  	134	2	replace
1005	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChild(left,  newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeUtil.removeChild(left,  newNumber);  n.removeChild(right);	  n.removeChild(newNumber);    n.removeChild(right);    	compilable	  [FE]  RuntimeException  	134	2	replace
1006	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1007	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(right.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1008	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1009	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1010	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getParent())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getParent())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1011	[BUG]  [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getParent())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getParent())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left.getNext())        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getParent())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1012	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber  =  Node.newNumber(result);	  	compilable	  [FE]  RuntimeException  	43	2	add
1013	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber  =  Node.newNumber(result);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber  =  Node.newNumber(result);	  	compilable	  [FE]  RuntimeException  	43	2	add
1014	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber.addChildToFront(result);	  	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	43	None	add
1015	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToFront(right);	  n.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	44	2	replace
1016	[BUG]  [BUGGY]  n.addChildToFront(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(right);	  n.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	44	2	replace
1017	[BUG]  [BUGGY]  result  =  result.removeChild(newNumber);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  result.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  result.removeChild(newNumber);	  result    =    newNumber.removeChild(result);    	non-compiled	[CE]  double  cannot  be  dereferenced	90	None	replace
1018	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);    newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	109	2	add
1019	[BUG]  [BUGGY]  n.removeChild(left);  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);    newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	109	2	add
1020	[BUG]  [BUGGY]  n.removeChild(left);  node.removeChild(left);  [CE]  cannot  find  symbol  node  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  node.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);    node.removeChild(left);	  	non-compiled	[CE]  cannot  find  symbol  node	109	None	add
1021	[BUG]  [BUGGY]  n.removeChild(left);  Node  left  =  left.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  Node  left  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);    Node  left  =  left.getNext();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
1022	[BUG]  [BUGGY]  n.removeChild(left);  Node  left  =  n.getParent();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  Node  left  =  n.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);    Node  left  =  n.getParent();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	109	None	add
1023	[BUG]  [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(left,  newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getParent().addChildToBack(left,  newNumber);	  Node    newNumber    =    n.getParent().addChildToBack(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	89	None	replace
1024	[BUG]  [BUGGY]  result  =  right.replaceChild(newNumber,  left);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.replaceChild(newNumber,  left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.replaceChild(newNumber,  left);	  result    =    left.replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  incompatible  types	80	None	replace
1025	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  newNumber);  node.removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChild(left,  newNumber);  node.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeUtil.removeChild(left,  newNumber);  node.removeChild(newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	98	None	replace
1026	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  newNumber).replaceChild(left,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
1027	[BUG]  [BUGGY]  result  =  n.replaceChild(newNumber,  left).replaceChild(newNumber);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.replaceChild(newNumber,  left).replaceChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(newNumber,  left).replaceChild(newNumber);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
1028	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(n,  left).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(n,  left).replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(n,  left).replaceChild(left,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
1029	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(left,  newNumber).replaceChild(newNumber);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(left,  newNumber).replaceChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(left,  newNumber).replaceChild(newNumber);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
1030	[BUG]  [BUGGY]  result  =  newNumber.removeChild(right.cloneTree());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(right.cloneTree());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(right.cloneTree());	  result    =    newNumber.removeChild(newNumber.cloneTree());    	non-compiled	[CE]  incompatible  types	63	None	replace
1031	[BUG]  [BUGGY]  result  =  newNumber.removeChild(result.cloneTree());  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(result.cloneTree());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(result.cloneTree());	  result    =    newNumber.removeChild(newNumber.cloneTree());    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
1032	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
1033	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,    newNumber);    n.replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
1034	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
1035	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.replaceChild(left,  newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
1036	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  node.removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  node.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.replaceChild(left,  newNumber);  node.removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	36	None	add
1037	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(left);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
1038	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(left);  NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
1039	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  NodeUtil.removeChild(newNumber);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  NodeUtil.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(left);  NodeUtil.removeChild(newNumber);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	97	None	add
1040	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	97	2	add
1041	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	97	2	add
1042	[BUG]  [BUGGY]  Node  newNumber  =  left.removeFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  left.removeFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  left.removeFirstChild();	  Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	26	None	replace
1043	[BUG]  [BUGGY]  Node  newNumber  =  left.getFirstChild();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  left.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  left.getFirstChild();	  Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	26	None	replace
1044	[BUG]  [BUGGY]  Node  newNumber  =  left.getParent();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  left.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  left.getParent();	  Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	26	None	replace
1045	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(result);	  	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	40	None	add
1046	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	40	2	add
1047	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	40	2	add
1048	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(left);	  	compilable	  [FE]  RuntimeException  	40	2	add
1049	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(left);	  	compilable	  [FE]  RuntimeException  	40	2	add
1050	[BUG]  [BUGGY]  n.removeChild(newNumber,  left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber,  left  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber,  left  +  1);	  n.removeChild(newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	35	None	replace
1051	[BUG]  [BUGGY]  Node  node  =  node.removeChild(newNumber);  [CE]  incompatible  types  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  node  =  node.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  node  =  node.removeChild(newNumber);	  n.removeChild(newNumber);    node.removeChild(newNumber);    	non-compiled	[CE]  incompatible  types	103	None	replace
1052	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=    right)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	142	1	add
1053	[BUG]  [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=    right)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	142	1	add
1054	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);  newNumber.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	10	2	replace
1055	[BUG]  [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  newNumber.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);  newNumber.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	10	2	replace
1056	[BUG]  [BUGGY]  newNumber  =  right.replaceChild(n,  newNumber);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  right.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  right.replaceChild(n,  newNumber);	  if(newNumber!=    right)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  incompatible  types	143	None	replace
1057	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left,  newNumber);	  if(newNumber!=    right)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	143	None	replace
1058	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);  n.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	10	2	replace
1059	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);  n.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	10	2	replace
1060	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(       "Unknown    shift    operator:       "    +    Node.tokenToName(n.getType()));    }    if(newNumber    >=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	79	1	replace
1061	[BUG]  [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  change  operator: "  +  Node.tokenToName(n.getType()));  }	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(       "Unknown    shift    operator:       "    +    Node.tokenToName(n.getType()));    }    if(newNumber    >=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	79	1	replace
1062	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  switch  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  switch  operator: "  +  Node.tokenToName(n.getType()));  }	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(       "Unknown    shift    operator:       "    +    Node.tokenToName(n.getType()));    }    if(newNumber    >=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	79	1	replace
1063	[BUG]  [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  switch  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  switch  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  switch  operator: "  +  Node.tokenToName(n.getType()));  }	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(       "Unknown    shift    operator:       "    +    Node.tokenToName(n.getType()));    }    if(newNumber    >=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	79	1	replace
1064	[BUG]  [BUGGY]  if(left!=  right.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(left!=  right.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(left!=  right.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   ",    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	149	None	replace
1065	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  n.removeChild(left);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(right);    n.removeChild(left);  newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	121	2	add
1066	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  n.removeChild(left);  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(right);  n.removeChild(left);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);    n.removeChild(left);  newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	121	2	add
1067	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(lvalInt);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalInt);	  	compilable	  [FE]  RuntimeException  	24	2	add
1068	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalInt);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalInt);	  	compilable	  [FE]  RuntimeException  	24	2	add
1069	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(lvalInt);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	24	2	add
1070	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	24	2	add
1071	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(lvalInt);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	24	2	add
1072	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	24	2	add
1073	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalDouble);  [CE]  cannot  find  symbol  lvalDouble  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalDouble);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(lvalDouble);	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	24	None	add
1074	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(rvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(lvalInt);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(rvalInt);	  	compilable	  [FE]  RuntimeException  	24	2	add
1075	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(rvalInt);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(rvalInt);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(lvalInt);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(rvalInt);	  	compilable	  [FE]  RuntimeException  	24	2	add
1076	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.removeChild(left);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
1077	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(left,    newNumber);    n.removeChild(left);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	135	2	add
1078	[BUG]  [BUGGY]  newNumber.addChildToFront(newNode);  [CE]  cannot  find  symbol  newNode  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNode);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNode);	  newNumber.addChildToFront(right);    	non-compiled	[CE]  cannot  find  symbol  newNode	122	None	replace
1079	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild();  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  lvalInt  =  left.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  lvalInt  =  left.getFirstChild();	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(       "Unknown    shift    operator:       "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getType()));    }    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	94	None	replace
1080	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().replaceChild(left.getNext(),  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().replaceChild(left.getNext(),  newNumber);	  n.getNext().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	73	2	replace
1081	[BUG]  [BUGGY]  n.getNext().replaceChild(left.getNext(),  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().replaceChild(left.getNext(),  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().replaceChild(left.getNext(),  newNumber);	  n.getNext().removeChild(left.getNext());    	compilable	  [FE]  RuntimeException  	73	2	replace
1082	[BUG]  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  	146	None	replace
1083	[BUG]  [BUGGY]  result  =  left.replaceChild(newNumber,  Node.newNumber());  [CE]  no  suitable  method  found  for  newNumber()  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(newNumber,  Node.newNumber());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(newNumber,  Node.newNumber());	  result    =    n.replaceChild(newNumber,    left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber()	105	None	replace
1084	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  right  =  n.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	74	None	replace
1085	[BUG]  [BUGGY]  result  =  newNumber.getChildren().removeChild(oldNumber);  [CE]  cannot  find  symbol  oldNumber  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.getChildren().removeChild(oldNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.getChildren().removeChild(oldNumber);	  result    =    newNumber.getChildren().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  oldNumber	62	None	replace
1086	[BUG]  [BUGGY]  result  =  newNumber.getChildren().removeChild(left);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.getChildren().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.getChildren().removeChild(left);	  result    =    newNumber.getChildren().removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
1087	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(negNum);  [CE]  cannot  find  symbol  negNum  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(negNum);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(negNum);	  newNumber    =    Node.newNumber(lvalInt);    	non-compiled	[CE]  cannot  find  symbol  negNum	25	None	replace
1088	[BUG]  [BUGGY]  node.removeChildToBack(newNumber);  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  node.removeChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	node.removeChildToBack(newNumber);	  result.removeChildToBack(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	87	None	replace
1089	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    	compilable	  [FE]  RuntimeException  	17	2	replace
1090	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber    =    Node.newNumber(lvalInt    +    1);    	compilable	  [FE]  RuntimeException  	17	2	replace
1091	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  newNumber,  this);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  newNumber,  this);	  n.removeChild(newNumber);    node.removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	103	None	replace
1092	[BUG]  [BUGGY]  Node  node  =  newNumber.removeChild(left);  [CE]  incompatible  types  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  node  =  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  node  =  newNumber.removeChild(left);	  n.removeChild(newNumber);    node.removeChild(newNumber);    	non-compiled	[CE]  incompatible  types	103	None	replace
1093	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	31	2	add
1094	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	31	2	add
1095	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);    n.getParent().addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
1096	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().addChildToFront(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    n.getParent().addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	31	2	add
1097	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	31	2	add
1098	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(right);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(newNumber);  n.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);    n.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	31	2	add
1099	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(result);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(result);	  	compilable	  [FE]  RuntimeException  	22	2	add
1100	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(result);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(result);	  	compilable	  [FE]  RuntimeException  	22	2	add
1101	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(result);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	22	2	add
1102	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	22	2	add
1103	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().removeChild(right);  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(result);    n.getParent().removeChild(right);  newNumber  =  Node.newNumber(result);	  	compilable	  [FE]  RuntimeException  	22	2	add
1104	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().removeChild(right);  newNumber  =  Node.newNumber(result);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().removeChild(right);  newNumber  =  Node.newNumber(result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    n.getParent().removeChild(right);  newNumber  =  Node.newNumber(result);	  	compilable	  [FE]  RuntimeException  	22	2	add
1105	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(result);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	22	2	add
1106	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	22	2	add
1107	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(result);    newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	22	2	add
1108	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(result);  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(result);    newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	22	2	add
1109	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  lvalDouble);  [CE]  cannot  find  symbol  lvalDouble  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(newNumber,  lvalDouble);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  lvalDouble);	  result.addChildToFront(newNumber,    lval);    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	42	None	replace
1110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.detachFromParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.detachFromParent();	  newNumber.removeChild(left);    	compilable	  [FE]  AssertionFailedError  	120	2	replace
1111	[BUG]  [BUGGY]  newNumber.detachFromParent();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.detachFromParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.detachFromParent();	  newNumber.removeChild(left);    	compilable	  [FE]  AssertionFailedError  	120	2	replace
1112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber.addChildToBack(right);	  	compilable	  [FE]  RuntimeException  	46	2	add
1113	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber.addChildToBack(right);	  	compilable	  [FE]  RuntimeException  	46	2	add
1114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber.addChildToBack(left);	  	compilable	  [FE]  RuntimeException  	46	2	add
1115	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.addChildToBack(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber.addChildToBack(left);	  	compilable	  [FE]  RuntimeException  	46	2	add
1116	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	46	2	add
1117	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(newNumber);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(newNumber);  newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	46	2	add
1118	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(newNumber);    n.addChildToBack(right);	  	compilable	  [FE]  RuntimeException  	46	2	add
1119	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(right);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToBack(newNumber);  n.addChildToBack(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);    n.addChildToBack(right);	  	compilable	  [FE]  RuntimeException  	46	2	add
1120	[BUG]  [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left);  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(newNumber);	  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	75	None	add
1121	[BUG]  [BUGGY]  result  =  newNumber.removeChild(right,  newNumber);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(right,  newNumber);	  result    =    newNumber.removeChild(right);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	141	None	replace
1122	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(right);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(right);  n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
1123	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(right);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(right);  n.addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(right);  n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	137	2	add
1124	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(left);  n.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(left);  n.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	137	2	add
1125	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(left);  n.addChildToFront(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(left);  n.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(left);  n.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	137	2	add
1126	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildAfter(newNumber);  [CE]  method  addChildAfter  in  class  Node  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildAfter(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(newNumber);  n.addChildAfter(newNumber);	  	non-compiled	[CE]  method  addChildAfter  in  class  Node  cannot  be  applied  to  given  types;	137	None	add
1127	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildBefore(newNumber);  [CE]  method  addChildBefore  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);  n.addChildBefore(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.addChildToFront(newNumber);    n.removeChild(newNumber);  n.addChildBefore(newNumber);	  	non-compiled	[CE]  method  addChildBefore  in  class  Node  cannot  be  applied  to  given  types;	137	None	add
1128	[BUG]  [BUGGY]  node.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  node.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	node.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);	  n.removeChild(newNumber);    n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	14	None	replace
1129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(n);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(n);  n.getParent().replaceChild(n,  newNumber);	  n.removeChild(newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
1130	[BUG]  [BUGGY]  newNumber.removeChild(n);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(n);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(n);  n.getParent().replaceChild(n,  newNumber);	  n.removeChild(newNumber);    n.getParent().replaceChild(n,    newNumber);    	compilable	  [FE]  RuntimeException  	14	2	replace
1131	[BUG]  [BUGGY]  result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;  break;  [CE]  cannot  find  symbol  Delete  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;  break;	          result    =    newNumber!=    >    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  Delete	2	None	replace
1132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
1133	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.addChildToFront(newNumber);  n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
1134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
1135	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().removeChild(newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	11	2	add
1136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.removeChild(right);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);    n.removeChild(right);  newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	33	2	add
1137	[BUG]  [BUGGY]  n.removeChild(right);  n.removeChild(right);  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.removeChild(right);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    n.removeChild(right);  newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	33	2	add
1138	[BUG]  [BUGGY]  n.removeChild(right);  n.removeChild(right);  newNumber  =  Node.newNumber(left);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(right);  n.removeChild(right);  newNumber  =  Node.newNumber(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);    n.removeChild(right);  newNumber  =  Node.newNumber(left);	  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	33	None	add
1139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(right);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
1140	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(right);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(right);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(right);  n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
1141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
1142	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(left);  n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
1143	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(left);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
1144	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(right,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);  n.removeChild(left);  n.getParent().replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.getParent().replaceChild(n,    newNumber);    n.removeChild(left);  n.getParent().replaceChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	13	2	add
1145	[BUG]  [BUGGY]  result  =  n.replaceChild(newNumber,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  n.replaceChild(newNumber,  this);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(newNumber,  this);	  result    =    newNumber.replaceChild(newNumber,    n);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	59	None	replace
1146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  left.getFirstChild();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
1147	[BUG]  [BUGGY]  newNumber  =  left.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  left.getFirstChild();	  newNumber    =    left.getNext();    	compilable	  [FE]  AssertionFailedError  	55	2	replace
1148	[BUG]  [BUGGY]  Node  newNumber  =  left.cloneTree();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  left.cloneTree();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  left.cloneTree();	  Node    newNumber    =    left.getNext();    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	26	None	replace
1149	[BUG]  [BUGGY]  result.addChildToFront(left,  newNumber);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(left,  newNumber);	  result.addChildToFront(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
1150	[BUG]  [BUGGY]  result.addChildToFront(right,  newNumber);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToFront(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(right,  newNumber);	  result.addChildToFront(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
1151	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  right  =  n.getNext();	  Node    left    =    n.getNext();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	115	None	replace
1152	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(left,  newNumber).removeFirstChild();  [CE]  void  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(left,  newNumber).removeFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(left,  newNumber).removeFirstChild();	  result    =    left.replaceChild(n,    newNumber).removeFirstChild();    	non-compiled	[CE]  void  cannot  be  dereferenced	114	None	replace
1153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.removeChild(right);    newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
1154	[BUG]  [BUGGY]          newNumber.removeChild(right);  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
1155	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  newNumber.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.removeChild(right);    newNumber.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
1156	[BUG]  [BUGGY]          newNumber.removeChild(right);  newNumber.getParent().removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  newNumber.getParent().removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    newNumber.getParent().removeChild(right);	  	compilable	  [FE]  RuntimeException  	125	2	add
1157	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  newNumber.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	                newNumber.removeChild(right);    newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	125	2	add
1158	[BUG]  [BUGGY]          newNumber.removeChild(right);  newNumber.getParent().removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.removeChild(right);  newNumber.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.removeChild(right);    newNumber.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	125	2	add
1159	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.addChildToFront(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
1160	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.addChildToFront(newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.addChildToFront(newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.addChildToFront(newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
1161	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
1162	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(left);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(left);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().removeChild(left);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	9	2	add
1163	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	9	2	add
1164	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	9	2	add
1165	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);    n.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	109	2	add
1166	[BUG]  [BUGGY]  n.removeChild(left);  n.addChildToFront(right);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  n.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);    n.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	109	2	add
1167	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  right  =  n.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	116	None	replace
1168	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber).replaceChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,  newNumber).replaceChild(right,  newNumber);	  n.replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	112	None	replace
1169	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().removeChild(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left.getNext());    n.getParent().removeChild(right.getNext());	  	compilable	  [FE]  RuntimeException  	72	2	add
1170	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().removeChild(right.getNext());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left.getNext());  n.getParent().removeChild(right.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());    n.getParent().removeChild(right.getNext());	  	compilable	  [FE]  RuntimeException  	72	2	add
1171	[BUG]  [BUGGY]  Result  result  =  newNumber.replaceChild(n,  right);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  newNumber.replaceChild(n,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  newNumber.replaceChild(n,  right);	  Result    result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	58	None	replace
1172	[BUG]  [BUGGY]  Result  result  =  this.newNumber.replaceChild(n,  newNumber);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Result  result  =  this.newNumber.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  this.newNumber.replaceChild(n,  newNumber);	  Result    result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	58	None	replace
1173	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
1174	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	40	2	add
1175	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToFront(newNumber);  newNumber.addChildToFront(newNumber);  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);    newNumber.addChildToFront(newNumber);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	40	None	add
1176	[BUG]  [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: ".  +  Node.tokenToName(n.getType()));  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(     "Unknown    shift    operator:     "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: ".  +  Node.tokenToName(n.getType()));  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=        left)        {        reportCodeChange();        }        else        {        throw        new        AssertionError(       "Unknown        shift        operator:       "        +        Node.tokenToName(n.getType()));        }        if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: ".  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  <identifier>  expected	77	None	add
1177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(n.getType());    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(n.getType());	  	compilable	  [FE]  RuntimeException  	29	2	add
1178	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(n.getType());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(n.getType());	  	compilable	  [FE]  RuntimeException  	29	2	add
1179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(newNumber);  newNumber  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(n.getType());    n.getParent().removeChild(newNumber);  newNumber  =  Node.newNumber(n.getType());	  	compilable	  [FE]  RuntimeException  	29	2	add
1180	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(newNumber);  newNumber  =  Node.newNumber(n.getType());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(newNumber);  newNumber  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    n.getParent().removeChild(newNumber);  newNumber  =  Node.newNumber(n.getType());	  	compilable	  [FE]  RuntimeException  	29	2	add
1181	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(right);  newNumber  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(n.getType());    n.getParent().removeChild(right);  newNumber  =  Node.newNumber(n.getType());	  	compilable	  [FE]  RuntimeException  	29	2	add
1182	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(right);  newNumber  =  Node.newNumber(n.getType());  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(right);  newNumber  =  Node.newNumber(n.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    n.getParent().removeChild(right);  newNumber  =  Node.newNumber(n.getType());	  	compilable	  [FE]  RuntimeException  	29	2	add
1183	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(right.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    Node.newNumber(n.getType());    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(right.getType());	  	compilable	  [FE]  RuntimeException  	29	2	add
1184	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(right.getType());  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getType());  n.getParent().removeChild(left);  newNumber  =  Node.newNumber(right.getType());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    Node.newNumber(n.getType());    n.getParent().removeChild(left);  newNumber  =  Node.newNumber(right.getType());	  	compilable	  [FE]  RuntimeException  	29	2	add
1185	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(left,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(left,  newNumber);  n.replaceChild(left,  newNumber);  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,    newNumber);    n.replaceChild(left,  newNumber);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	111	None	add
1186	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(newNumber,  Node.newNumber());  [CE]  no  suitable  method  found  for  newNumber()  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(newNumber,  Node.newNumber());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(newNumber,  Node.newNumber());	  result    =    n.replaceChild(newNumber,    newNumber);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber()	56	None	replace
1187	[BUG]  [BUGGY]  n.removeChild(newNumber);  result  =  lvalDouble  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  result  =  lvalDouble  >>  >  rvalInt;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  result  =  lvalDouble  >>  >  rvalInt;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1188	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(n,  right).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(n,  right).replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(n,  right).replaceChild(left,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
1189	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(n,  newNumber).replaceChild(left,  right);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(n,  newNumber).replaceChild(left,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(n,  newNumber).replaceChild(left,  right);	  result    =    newNumber.replaceChild(n,    newNumber).replaceChild(left,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	127	None	replace
1190	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,  newNumber).replaceChild(left,  newNumber);	  n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	130	None	replace
1191	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber).removeChild(left);  [CE]  void  cannot  be  dereferenced  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().replaceChild(n,  newNumber).removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,  newNumber).removeChild(left);	  n.getParent().replaceChild(n,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	130	None	replace
1192	[BUG]  [BUGGY]  newNumber.setString(n.getString());  newNumber.setPosition(n.getPosition());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  newNumber.setPosition(n.getPosition());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    newNumber.setPosition(n.getPosition());	  	non-compiled	[CE]  cannot  find  symbol	123	None	add
1193	[BUG]  [BUGGY]  newNumber.setString(n.getString());  newNumber.setLocale(n.getLocale());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  newNumber.setLocale(n.getLocale());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    newNumber.setLocale(n.getLocale());	  	non-compiled	[CE]  cannot  find  symbol	123	None	add
1194	[BUG]  [BUGGY]  newNumber.setString(n.getString());  newNumber.setLength(n.getLength());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  newNumber.setLength(n.getLength());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    newNumber.setLength(n.getLength());	  	non-compiled	[CE]  cannot  find  symbol	123	None	add
1195	[BUG]  [BUGGY]  newNumber.setString(n.getString());  newNumber.setName(n.getString());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  newNumber.setName(n.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    newNumber.setName(n.getString());	  	non-compiled	[CE]  cannot  find  symbol	123	None	add
1196	[BUG]  [BUGGY]  newNumber.setString(n.getString());  newNumber.setLong(n.getLong());  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(n.getString());  newNumber.setLong(n.getLong());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());    newNumber.setLong(n.getLong());	  	non-compiled	[CE]  cannot  find  symbol	123	None	add
1197	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  lvalDouble  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  lvalDouble  >>  >  rvalInt;  break;	          result    =    newNumber    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1198	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(left,  right,  newNumber);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.replaceChild(left,  right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(left,  right,  newNumber);	  result    =    newNumber.replaceChild(left,    right);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	144	None	replace
1199	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  newNumber,  right);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  left.replaceChild(n,  newNumber,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  newNumber,  right);	  result    =    left.replaceChild(n,    newNumber);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
1200	[BUG]  [BUGGY]  result  =  right.removeChild(left);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  right.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.removeChild(left);	  result    =    newNumber.removeChild(left);    	non-compiled	[CE]  incompatible  types	91	None	replace
1201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  newNumber.getParent();	  newNumber    =    newNumber.getNext();    	compilable	  [FE]  AssertionFailedError  	28	2	replace
1202	[BUG]  [BUGGY]  newNumber  =  newNumber.getParent();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  newNumber.getParent();	  newNumber    =    newNumber.getNext();    	compilable	  [FE]  AssertionFailedError  	28	2	replace
1203	[BUG]  [BUGGY]  Node  left  =  right,  n.getParent();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  left  =  right,  n.getParent();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  right,  n.getParent();	  Node    left    =    n.getParent();    	non-compiled	[CE]  ';'  expected	117	None	replace
1204	[BUG]  [BUGGY]  n.removeChild(newNumber);  result  =  lvalDouble  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  result  =  lvalDouble  >>  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  result  =  lvalDouble  >>  >  rvalInt;  break;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1205	[BUG]  [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  result  =  lvalInt!=  >  rvalInt;  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  result  =  lvalInt!=  >  rvalInt;  break;	  n.removeChild(newNumber);    n.removeChild(newNumber);    result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1206	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(node);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  Node.newNumber(node);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(node);	  Node    newNumber    =    Node.newNumber(result);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	108	None	replace
1207	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	97	2	add
1208	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	97	2	add
1209	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
1210	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
1211	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
1212	[BUG]  [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  NodeUtil.removeChild(right,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  NodeUtil.removeChild(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);  NodeUtil.removeChild(right,  newNumber);	  	compilable	  [FE]  RuntimeException  	97	2	add
1213	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());    n.getParent().removeChild(left.getNext());  newNumber  =  Node.newNumber(newNumber);	  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	70	None	add
1214	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  node.getParent().removeChild(left.getNext());  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(left.getNext());  n.getParent().removeChild(left.getNext());  node.getParent().removeChild(left.getNext());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());    n.getParent().removeChild(left.getNext());  node.getParent().removeChild(left.getNext());	  	non-compiled	[CE]  cannot  find  symbol  node	70	None	add
1215	[BUG]  [BUGGY]  result  =  newNumber.removeChild(left.cloneTree());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(left.cloneTree());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(left.cloneTree());	  result    =    newNumber.removeChild(newNumber.cloneTree());    	non-compiled	[CE]  incompatible  types	63	None	replace
1216	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(right);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(right);  n.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(left);    	compilable	  [FE]  RuntimeException  	140	2	replace
1217	[BUG]  [BUGGY]  newNumber.removeChild(right);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(right);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(right);  n.removeChild(newNumber);	  n.removeChild(newNumber);    n.removeChild(left);    	compilable	  [FE]  RuntimeException  	140	2	replace
1218	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
1219	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(newNumber);    newNumber.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	18	2	add
1220	[BUG]  [BUGGY]  n.removeChild(left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            RuntimeException      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left  +  1);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left  +  1);	  n.removeChild(newNumber    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	35	None	replace
1221	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(newNumber);  newNumber  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    newNumber.getNext();    n.getParent().removeChild(newNumber);  newNumber  =  newNumber.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
1222	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(newNumber);  newNumber  =  newNumber.getNext();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(newNumber);  newNumber  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    n.getParent().removeChild(newNumber);  newNumber  =  newNumber.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
1223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(left);  newNumber  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    newNumber.getNext();    n.getParent().removeChild(left);  newNumber  =  newNumber.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
1224	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(left);  newNumber  =  newNumber.getNext();  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(left);  newNumber  =  newNumber.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    n.getParent().removeChild(left);  newNumber  =  newNumber.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
1225	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    newNumber.getNext();    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	27	2	add
1226	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	27	2	add
1227	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(newNumber);  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    newNumber.getNext();    n.getParent().removeChild(newNumber);  newNumber  =  left.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
1228	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(newNumber);  newNumber  =  left.getNext();  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().removeChild(newNumber);  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    n.getParent().removeChild(newNumber);  newNumber  =  left.getNext();	  	compilable	  [FE]  RuntimeException  	27	2	add
1229	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    newNumber.getNext();    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	27	2	add
1230	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  newNumber.getNext();  n.getParent().replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    newNumber.getNext();    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	27	2	add
1231	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(right,  newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(right,  newNumber);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	107	None	replace
1232	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(right,  right);  [CE]  no  suitable  method  found  for  newNumber(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(right,  right);	  newNumber    =    Node.newNumber(left);    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node,Node)	107	None	replace
1233	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
1234	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.getParent().replaceChild(left,  newNumber);  n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	133	2	add
1235	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(right);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	133	2	add
1236	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(right);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(right);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	133	2	add
1237	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);  newNumber.removeChild(right);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	19	2	replace
1238	[BUG]  [BUGGY]  n.removeChild(newNumber);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);  newNumber.removeChild(right);	  n.removeChild(newNumber);    n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	19	2	replace
1239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  this);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  this);	  NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	84	None	replace
1240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  right);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this,  right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  this,  right);	  NodeTraversal.traverse(compiler,    left,    newNumber,    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	84	None	replace
1241	[BUG]  [BUGGY]  result  =  newNumber.removeChild(left,  result);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber.removeChild(left,  result);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(left,  result);	  result    =    newNumber.removeChild(result);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
1242	[BUG]  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()),    newNumber);    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	148	None	replace
1243	[BUG]  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  result);  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  result);  }  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  result);  }	  if(left!=    newNumber.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()),    newNumber);    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	148	None	replace
1244	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	119	2	add
1245	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	119	2	add
1246	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);    n.getParent().removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	119	2	add
1247	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);    n.getParent().removeChild(left);  newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	119	2	add
1248	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(right);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);    n.getParent().removeChild(right);  newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	119	2	add
1249	[BUG]  [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(right);  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.removeChild(left);  n.getParent().removeChild(right);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);    n.getParent().removeChild(right);  newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	119	2	add
1250	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(newNumber.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.setString(newNumber.getString());	  newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	124	2	replace
1251	[BUG]  [BUGGY]  newNumber.setString(newNumber.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.setString(newNumber.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(newNumber.getString());	  newNumber.setString(n.getString());    	compilable	  [FE]  RuntimeException  	124	2	replace
1252	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n.getParent().removeChild(left);  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    left.getNext();    n.getParent().removeChild(left);  newNumber  =  left.getNext();	  	compilable	  [FE]  RuntimeException  	54	2	add
1253	[BUG]  [BUGGY]  newNumber  =  left.getNext();  n.getParent().removeChild(left);  newNumber  =  left.getNext();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n.getParent().removeChild(left);  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    n.getParent().removeChild(left);  newNumber  =  left.getNext();	  	compilable	  [FE]  RuntimeException  	54	2	add
1254	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    left.getNext();    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	54	2	add
1255	[BUG]  [BUGGY]  newNumber  =  left.getNext();  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n.getParent().removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    n.getParent().removeChild(left);	  	compilable	  [FE]  RuntimeException  	54	2	add
1256	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    left.getNext();    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	54	2	add
1257	[BUG]  [BUGGY]  newNumber  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	54	2	add
1258	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n.removeChild(left);  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber    =    left.getNext();    n.removeChild(left);  newNumber  =  left.getNext();	  	compilable	  [FE]  AssertionFailedError  	54	1	add
1259	[BUG]  [BUGGY]  newNumber  =  left.getNext();  n.removeChild(left);  newNumber  =  left.getNext();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  left.getNext();  n.removeChild(left);  newNumber  =  left.getNext();  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber    =    left.getNext();    n.removeChild(left);  newNumber  =  left.getNext();	  	compilable	  [FE]  AssertionFailedError  	54	1	add
1260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  MAX_FOLD_NUMBER);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  MAX_FOLD_NUMBER);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
1261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  BITWISE_OPERAND);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  BITWISE_OPERAND);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  BITWISE_OPERAND);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
1262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  this.negative);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber,  this.negative);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber,  this.negative);	  NodeTraversal.traverse(compiler,    right,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
1263	[BUG]  [BUGGY]  newNumber.addChildToBack(right,  newNumber);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber.addChildToBack(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(right,  newNumber);	  result.addChildToBack(newNumber,    left);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	48	None	replace
1264	[BUG]  [BUGGY]  result.addChildToBack(right,  newNumber);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result.addChildToBack(right,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(right,  newNumber);	  result.addChildToBack(newNumber,    left);    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
1265	[BUG]  [BUGGY]  n.getParent().removeChild(right.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getParent().removeChild(right.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(right.getString());	  n.getParent().removeChild(left.getNext());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	71	None	replace
1266	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(right.getString());  [CE]  no  suitable  method  found  for  newNumber(String)  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(right.getString());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(right.getString());	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(       "Unknown    shift    operator:       "    +    Node.tokenToName(n.getType()));    }    if(newNumber    >=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(String)	66	None	replace
1267	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
1268	[BUG]  [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    newNumber.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.replaceChild(n,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        newNumber.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	101	2	add
1269	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(right);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	139	2	add
1270	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(right);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(right);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(right);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	139	2	add
1271	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.addChildToFront(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(left);    n.addChildToFront(newNumber);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	139	2	add
1272	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.addChildToFront(newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.addChildToFront(newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(left);    n.addChildToFront(newNumber);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	139	2	add
1273	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(right);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(right);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	139	2	add
1274	[BUG]  [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(right);  n.removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(newNumber);    n.removeChild(left);  n.removeChild(right);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);        n.removeChild(left);    n.removeChild(right);  n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	139	2	add
1275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  BITWISE_OPERAND);  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  BITWISE_OPERAND);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  BITWISE_OPERAND);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
1276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this.negative);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this.negative);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  this.negative);	  NodeTraversal.traverse(compiler,    left,    newNumber);    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
1277	[BUG]  [BUGGY]  Node  newNumber  =  left.getParent().addChildToBack(newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  left.getParent().addChildToBack(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  left.getParent().addChildToBack(newNumber);	  Node    newNumber    =    n.getParent().addChildToBack(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	89	None	replace
1278	[BUG]  [BUGGY]  Node  newNumber  =  n.getParent().addChildToFront(newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  Node  newNumber  =  n.getParent().addChildToFront(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getParent().addChildToFront(newNumber);	  Node    newNumber    =    n.getParent().addChildToBack(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	89	None	replace
1279	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);  newNumber.removeChild(right);	  n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	102	2	replace
1280	[BUG]  [BUGGY]  n.removeChild(left);  newNumber.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.removeChild(left);  newNumber.removeChild(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);  newNumber.removeChild(right);	  n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	102	2	replace
1281	[BUG]  [BUGGY]  NodeUtil.removeChild(newNumber);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeUtil.removeChild(newNumber);	  n.removeChild(newNumber);    newNumber.removeChild(newNumber);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	102	None	replace
1282	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber.addChildToFront(left);	  	compilable	  [FE]  RuntimeException  	43	2	add
1283	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(left);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber.addChildToFront(left);	  	compilable	  [FE]  RuntimeException  	43	2	add
1284	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	43	2	add
1285	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.addChildToFront(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber.addChildToFront(right);	  	compilable	  [FE]  RuntimeException  	43	2	add
1286	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	43	2	add
1287	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.addChildToFront(newNumber);  n.addChildToFront(newNumber);  newNumber.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);    n.addChildToFront(newNumber);  newNumber.removeChild(left);	  	compilable	  [FE]  RuntimeException  	43	2	add
1288	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChild(n,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	NodeUtil.removeChild(n,  newNumber);  n.removeChild(newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	98	2	replace
1289	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  NodeUtil.removeChild(n,  newNumber);  n.removeChild(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeUtil.removeChild(n,  newNumber);  n.removeChild(newNumber);	  n.removeChild(newNumber);    NodeUtil.removeChild(left,    newNumber);    n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	98	2	replace
1290	[BUG]  [BUGGY]  n.getNext().removeChild(left);  n.getNext().removeChild(left);  newNumber  =  Node.newNumber(right);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getNext().removeChild(left);  newNumber  =  Node.newNumber(right);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);    n.getNext().removeChild(left);  newNumber  =  Node.newNumber(right);	  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	131	None	add
1291	[BUG]  [BUGGY]  n.getNext().removeChild(left);  n.getNext().removeChild(left);  newNumber  =  Node.newNumber(newNumber);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.getNext().removeChild(left);  n.getNext().removeChild(left);  newNumber  =  Node.newNumber(newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);    n.getNext().removeChild(left);  newNumber  =  Node.newNumber(newNumber);	  	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	131	None	add
1292	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getFirstChild());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    AssertionFailedError    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  newNumber  =  Node.newNumber(n.getFirstChild());  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(n.getFirstChild());	  newNumber    =    Node.newNumber(n.getType());    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	30	None	replace
1293	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
1294	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	36	2	add
1295	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  break;  [CE]  break  outside  switch  or  loop  [FE]      RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.replaceChild(left,  newNumber);  break;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.replaceChild(left,  newNumber);  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	36	None	add
1296	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,    newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	36	2	add
1297	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  n.replaceChild(n,  newNumber);  n.removeChild(left);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,    newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	36	2	add
1298	[BUG]  [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(rect);  [CE]  cannot  find  symbol  rect  [FE]    RuntimeException    [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]          newNumber.addChildToBack(newNumber);  newNumber.addChildToBack(rect);  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	                newNumber.addChildToBack(newNumber);    newNumber.addChildToBack(rect);	  	non-compiled	[CE]  cannot  find  symbol  rect	6	None	add
1299	[BUG]  [BUGGY]  result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;  [CE]  cannot  find  symbol  Delete  [FE]                    AssertionFailedError      [CONTEXT]        result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);      [BUGGY]  result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;  [BUGGY]        return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber  [Delete]  >  MAX_FOLD_NUMBER;	          result    =    newNumber!=    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  Delete	8	None	replace
