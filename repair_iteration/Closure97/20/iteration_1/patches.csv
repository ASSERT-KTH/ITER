bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]      result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	        result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
2	[BUG]  [BUGGY]      result  =  newNumber!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]      result  =  newNumber!=  >  rvalInt;  break;  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	        result  =  newNumber!=  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
3	[BUG]  [BUGGY]      result  =  newNumber  ==  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]      result  =  newNumber  ==  >  rvalInt;  break;  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	        result  =  newNumber  ==  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
4	[BUG]  [BUGGY]      result  =  newNumber  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]      result  =  newNumber  >>  >  rvalInt;  break;  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	        result  =  newNumber  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
5	[BUG]  [BUGGY]      result  =  newNumber!=  >  lvalInt;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]      result  =  newNumber!=  >  lvalInt;  break;  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	        result  =  newNumber!=  >  lvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
6	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]      newNumber.addChildToBack(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	        newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
7	[BUG]  [BUGGY]      newNumber.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]      newNumber.addChildToBack(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	        newNumber.addChildToBack(newNumber);	  	compilable	  [FE]  RuntimeException  	6	2	add
8	[BUG]  [BUGGY]      result  =  newNumber!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]      result  =  newNumber!=  >  rvalInt;  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	        result  =  newNumber!=  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
10	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
12	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.getParent().removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.getParent().removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
13	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
14	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.getParent().replaceChild(n,  newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
15	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
16	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	3	2	add
17	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber  =  Node.newNumber(lvalInt  +  1);	  	compilable	  [FE]  RuntimeException  	3	2	add
18	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
19	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.removeChild(newNumber);  newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
20	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.removeChild(newNumber);  result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
21	[BUG]  [BUGGY]  parent.replaceChild(n,  newNumber);  [CE]  cannot  find  symbol  parent  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  parent.replaceChild(n,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	parent.replaceChild(n,  newNumber);	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  cannot  find  symbol  parent	15	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  Node.newNumber(result);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(result);	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
23	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(result);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  Node.newNumber(result);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(result);	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(lvalInt);	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
25	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  Node.newNumber(lvalInt);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(lvalInt);	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
26	[BUG]  [BUGGY]  Node  newNumber  =  left.getNext();  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  Node  newNumber  =  left.getNext();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  left.getNext();	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	15	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  newNumber.getNext();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  newNumber.getNext();	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
28	[BUG]  [BUGGY]  newNumber  =  newNumber.getNext();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  newNumber.getNext();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  newNumber.getNext();	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  Node.newNumber(n.getType());  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  Node.newNumber(n.getType());	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
30	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(n.getType());  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  Node.newNumber(n.getType());  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(n.getType());	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	15	2	replace
31	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getParent().removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(newNumber);	  n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
32	[BUG]  [BUGGY]  n.getParent().removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getParent().removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(newNumber);	  n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(right);	  n.removeChild(newNumber);    	compilable	  [FE]  AssertionFailedError  	4	2	replace
34	[BUG]  [BUGGY]  n.removeChild(right);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(right);	  n.removeChild(newNumber);    	compilable	  [FE]  AssertionFailedError  	4	2	replace
35	[BUG]  [BUGGY]  n.removeChild(newNumber  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber  +  1);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber  +  1);	  n.removeChild(newNumber);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
36	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.replaceChild(n,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(n,  newNumber);	  n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
37	[BUG]  [BUGGY]  n.replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.replaceChild(n,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(n,  newNumber);	  n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
38	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  left);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result.addChildToFront(newNumber,  left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  left);	  result.addChildToFront(newNumber);    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
39	[BUG]  [BUGGY]  newNumber.addChildToFront(result);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber.addChildToFront(result);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(result);	  result.addChildToFront(newNumber);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
40	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber.addChildToFront(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(newNumber);	  result.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
41	[BUG]  [BUGGY]  newNumber.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber.addChildToFront(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(newNumber);	  result.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
42	[BUG]  [BUGGY]  result.addChildToFront(newNumber,  lval);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result.addChildToFront(newNumber,  lval);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber,  lval);	  result.addChildToFront(newNumber);    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
43	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.addChildToFront(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToFront(newNumber);	  result.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
44	[BUG]  [BUGGY]  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.addChildToFront(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToFront(newNumber);	  result.addChildToFront(newNumber);    	compilable	  [FE]  RuntimeException  	2	2	replace
45	[BUG]  [BUGGY]  newNumber.addChildToBack(result);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber.addChildToBack(result);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToBack(result);	  result.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.addChildToBack(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.addChildToBack(newNumber);	  result.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	5	2	replace
47	[BUG]  [BUGGY]  n.addChildToBack(newNumber);  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.addChildToBack(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.addChildToBack(newNumber);	  result.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);    	compilable	  [FE]  RuntimeException  	5	2	replace
48	[BUG]  [BUGGY]  result.addChildToBack(newNumber,  left);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result.addChildToBack(newNumber,  left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(newNumber,  left);	  result.addChildToBack(newNumber);    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
49	[BUG]  [BUGGY]  result.addChildToBack(n);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result.addChildToBack(n);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(n);	  result.addChildToBack(newNumber);    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
50	[BUG]  [BUGGY]  result  =  n.removeFirstChild();  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  n.removeFirstChild();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeFirstChild();	  result    =    newNumber.removeFirstChild();    	non-compiled	[CE]  incompatible  types	11	None	replace
51	[BUG]  [BUGGY]  result  =  left.removeFirstChild();  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  left.removeFirstChild();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.removeFirstChild();	  result    =    newNumber.removeFirstChild();    	non-compiled	[CE]  incompatible  types	11	None	replace
52	[BUG]  [BUGGY]  result  =  newNumber.getFirstChild();  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.getFirstChild();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.getFirstChild();	  result    =    newNumber.removeFirstChild();    	non-compiled	[CE]  incompatible  types	11	None	replace
53	[BUG]  [BUGGY]  result  =  newNumber.removeLastChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.removeLastChild();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeLastChild();	  result    =    newNumber.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  left.getNext();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber  =  left.getNext();	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	13	2	replace
55	[BUG]  [BUGGY]  newNumber  =  left.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  left.getNext();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  left.getNext();	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	13	2	replace
56	[BUG]  [BUGGY]  result  =  n.replaceChild(newNumber,  newNumber);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  n.replaceChild(newNumber,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(newNumber,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  incompatible  types	8	None	replace
57	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(newNumber,  left);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.replaceChild(newNumber,  left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(newNumber,  left);	  result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  incompatible  types	8	None	replace
58	[BUG]  [BUGGY]  Result  result  =  newNumber.replaceChild(n,  newNumber);  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  Result  result  =  newNumber.replaceChild(n,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Result  result  =  newNumber.replaceChild(n,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	replace
59	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(newNumber,  n);  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.replaceChild(newNumber,  n);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(newNumber,  n);	  result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  incompatible  types	8	None	replace
60	[BUG]  [BUGGY]  result  =  newNumber.removeChild(n);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.removeChild(n);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(n);	  result    =    newNumber.removeChild(newNumber);    	non-compiled	[CE]  incompatible  types	9	None	replace
61	[BUG]  [BUGGY]  result  =  n.removeChild(newNumber);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  n.removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.removeChild(newNumber);	  result    =    newNumber.removeChild(newNumber);    	non-compiled	[CE]  incompatible  types	9	None	replace
62	[BUG]  [BUGGY]  result  =  newNumber.getChildren().removeChild(newNumber);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.getChildren().removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.getChildren().removeChild(newNumber);	  result    =    newNumber.removeChild(newNumber);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
63	[BUG]  [BUGGY]  result  =  newNumber.removeChild(newNumber.cloneTree());  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.removeChild(newNumber.cloneTree());  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(newNumber.cloneTree());	  result    =    newNumber.removeChild(newNumber);    	non-compiled	[CE]  incompatible  types	9	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
65	[BUG]  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
66	[BUG]  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [CE]  bad  operand  types  for  binary  operator  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  >=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	12	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	12	2	add
68	[BUG]  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionError  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  ==  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionError  	12	2	add
69	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  Node  left  =  left.getNext();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  left.getNext();	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	17	None	replace
70	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getParent().removeChild(left.getNext());  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left.getNext());	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	compilable	  [FE]  RuntimeException  	17	2	replace
71	[BUG]  [BUGGY]  n.getParent().removeChild(left.getNext());  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getParent().removeChild(left.getNext());  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left.getNext());	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	compilable	  [FE]  RuntimeException  	17	2	replace
72	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getNext().removeChild(left.getNext());  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left.getNext());	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	compilable	  [FE]  RuntimeException  	17	2	replace
73	[BUG]  [BUGGY]  n.getNext().removeChild(left.getNext());  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getNext().removeChild(left.getNext());  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left.getNext());	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	compilable	  [FE]  RuntimeException  	17	2	replace
74	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  n.getLastChild();	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getLastChild()));    }    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	16	None	replace
75	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getParent().removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().removeChild(left);	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getLastChild()));    }    	compilable	  [FE]  RuntimeException  	16	2	replace
76	[BUG]  [BUGGY]  n.getParent().removeChild(left);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getParent().removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().removeChild(left);	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getLastChild()));    }    	compilable	  [FE]  RuntimeException  	16	2	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
78	[BUG]  [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
79	[BUG]  [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [CE]  bad  operand  types  for  binary  operator  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber  >=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber  >=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	14	None	add
80	[BUG]  [BUGGY]  result  =  left.replaceChild(newNumber,  newNumber);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  left.replaceChild(newNumber,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(newNumber,  newNumber);	  result    =    newNumber.replaceChild(left,    newNumber);    	non-compiled	[CE]  incompatible  types	10	None	replace
81	[BUG]  [BUGGY]  result  =  right.replaceChild(left,  newNumber);  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  right.replaceChild(left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.replaceChild(left,  newNumber);	  result    =    newNumber.replaceChild(left,    newNumber);    	non-compiled	[CE]  incompatible  types	10	None	replace
82	[BUG]  [BUGGY]  result  =  n.replaceChild(left,  newNumber);  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  n.replaceChild(left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(left,  newNumber);	  result    =    newNumber.replaceChild(left,    newNumber);    	non-compiled	[CE]  incompatible  types	10	None	replace
83	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  newNumber);  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  left.replaceChild(n,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  newNumber);	  result    =    newNumber.replaceChild(left,    newNumber);    	non-compiled	[CE]  incompatible  types	10	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [CE]  cannot  find  symbol  compiler  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber,  this);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber,  this);	      	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  left,  newNumber);	      	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber);  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  NodeTraversal.traverse(compiler,  right,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	NodeTraversal.traverse(compiler,  right,  newNumber);	      	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
87	[BUG]  [BUGGY]  result.removeChildToBack(newNumber);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result.removeChildToBack(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.removeChildToBack(newNumber);	  result.addChildToBack(newNumber);    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
88	[BUG]  [BUGGY]  node.addChildToBack(newNumber);  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  node.addChildToBack(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	node.addChildToBack(newNumber);	  result.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);    	non-compiled	[CE]  cannot  find  symbol  node	5	None	replace
89	[BUG]  [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(newNumber);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  Node  newNumber  =  n.getParent().addChildToBack(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  n.getParent().addChildToBack(newNumber);	  result.addChildToBack(newNumber);    newNumber.addChildToBack(newNumber);    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	5	None	replace
90	[BUG]  [BUGGY]  result  =  newNumber.removeChild(result);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.removeChild(result);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(result);	  result    =    newNumber.removeChild(newNumber);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
91	[BUG]  [BUGGY]  result  =  newNumber.removeChild(left);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(left);	  result    =    newNumber.removeChild(newNumber);    	non-compiled	[CE]  incompatible  types	9	None	replace
92	[BUG]  [BUGGY]  result  =  left.replaceChild(newNumber,  n);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  left.replaceChild(newNumber,  n);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(newNumber,  n);	  result    =    newNumber.replaceChild(left,    newNumber);    	non-compiled	[CE]  incompatible  types	10	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
94	[BUG]  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError(   "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getType()));  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
95	[BUG]  [BUGGY]  result.addChildToFront(n);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result.addChildToFront(n);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(n);	  result.addChildToFront(newNumber);    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
96	[BUG]  [BUGGY]  result.removeChildToFront(newNumber);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result.removeChildToFront(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.removeChildToFront(newNumber);	  result.addChildToFront(newNumber);    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
97	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
98	[BUG]  [BUGGY]  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);  n.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
99	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
100	[BUG]  [BUGGY]  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  NodeUtil.removeChild(left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    NodeUtil.removeChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
101	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
102	[BUG]  [BUGGY]  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  newNumber.removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    newNumber.removeChild(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
103	[BUG]  [BUGGY]  n.removeChild(newNumber);  node.removeChild(newNumber);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  node.removeChild(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    node.removeChild(newNumber);	  	non-compiled	[CE]  cannot  find  symbol  node	3	None	add
104	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(n,  left);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.replaceChild(n,  left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(n,  left);	  result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  incompatible  types	8	None	replace
105	[BUG]  [BUGGY]  result  =  n.replaceChild(newNumber,  left);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  n.replaceChild(newNumber,  left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  n.replaceChild(newNumber,  left);	  result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  incompatible  types	8	None	replace
106	[BUG]  [BUGGY]  parent.replaceChild(left,  newNumber);  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  parent.replaceChild(left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	parent.replaceChild(left,  newNumber);	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  cannot  find  symbol  parent	17	None	replace
107	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left);  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  Node.newNumber(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left);	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	15	None	replace
108	[BUG]  [BUGGY]  Node  newNumber  =  Node.newNumber(result);  [CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  Node  newNumber  =  Node.newNumber(result);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  newNumber  =  Node.newNumber(result);	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  variable  newNumber  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	15	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(left);	  n.removeChild(newNumber);    	compilable	  [FE]  AssertionFailedError  	4	2	replace
110	[BUG]  [BUGGY]  n.removeChild(left);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(left);	  n.removeChild(newNumber);    	compilable	  [FE]  AssertionFailedError  	4	2	replace
111	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.replaceChild(left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.replaceChild(left,  newNumber);	  n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
112	[BUG]  [BUGGY]  n.replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.replaceChild(left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.replaceChild(left,  newNumber);	  n.removeChild(newNumber);    	compilable	  [FE]  RuntimeException  	4	2	replace
113	[BUG]  [BUGGY]  result  =  right.removeFirstChild();  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  right.removeFirstChild();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  right.removeFirstChild();	  result    =    newNumber.removeFirstChild();    	non-compiled	[CE]  incompatible  types	11	None	replace
114	[BUG]  [BUGGY]  result  =  left.replaceChild(n,  newNumber).removeFirstChild();  [CE]  void  cannot  be  dereferenced  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  left.replaceChild(n,  newNumber).removeFirstChild();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  left.replaceChild(n,  newNumber).removeFirstChild();	  result    =    newNumber.removeFirstChild();    	non-compiled	[CE]  void  cannot  be  dereferenced	11	None	replace
115	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  n.getNext();	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getLastChild()));    }    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	16	None	replace
116	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  n.getFirstChild();	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getLastChild()));    }    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	16	None	replace
117	[BUG]  [BUGGY]  Node  left  =  n.getParent();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  Node  left  =  n.getParent();  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	Node  left  =  n.getParent();	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getLastChild()));    }    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	16	None	replace
118	[BUG]  [BUGGY]  newNumber  =  Node.newNumber(left.getNext());  [CE]  no  suitable  method  found  for  newNumber(Node)  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber  =  Node.newNumber(left.getNext());  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber  =  Node.newNumber(left.getNext());	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	non-compiled	[CE]  no  suitable  method  found  for  newNumber(Node)	13	None	replace
119	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber.removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.removeChild(left);	      	compilable	  [FE]  RuntimeException  	7	2	replace
120	[BUG]  [BUGGY]  newNumber.removeChild(left);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber.removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.removeChild(left);	      	compilable	  [FE]  RuntimeException  	7	2	replace
121	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber.addChildToFront(right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.addChildToFront(right);	      	compilable	  [FE]  RuntimeException  	7	2	replace
122	[BUG]  [BUGGY]  newNumber.addChildToFront(right);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber.addChildToFront(right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.addChildToFront(right);	      	compilable	  [FE]  RuntimeException  	7	2	replace
123	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber.setString(n.getString());  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	newNumber.setString(n.getString());	      	compilable	  [FE]  RuntimeException  	7	2	replace
124	[BUG]  [BUGGY]  newNumber.setString(n.getString());  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  newNumber.setString(n.getString());  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	newNumber.setString(n.getString());	      	compilable	  [FE]  RuntimeException  	7	2	replace
125	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]      newNumber.removeChild(right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	        newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	6	2	add
126	[BUG]  [BUGGY]      newNumber.removeChild(right);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]      newNumber.removeChild(right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	        newNumber.removeChild(right);	  	compilable	  [FE]  RuntimeException  	6	2	add
127	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [CE]  void  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.replaceChild(n,  newNumber).replaceChild(left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(n,  newNumber).replaceChild(left,  newNumber);	  result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  void  cannot  be  dereferenced	8	None	replace
128	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(n,  right);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.replaceChild(n,  right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(n,  right);	  result    =    newNumber.replaceChild(n,    newNumber);    	non-compiled	[CE]  incompatible  types	8	None	replace
129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getParent().replaceChild(n,  newNumber);	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  RuntimeException  	13	2	replace
130	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  newNumber);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getParent().replaceChild(n,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getParent().replaceChild(n,  newNumber);	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  RuntimeException  	13	2	replace
131	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getNext().removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.getNext().removeChild(left);	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getLastChild()));    }    	compilable	  [FE]  RuntimeException  	16	2	replace
132	[BUG]  [BUGGY]  n.getNext().removeChild(left);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.getNext().removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.getNext().removeChild(left);	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getLastChild()));    }    	compilable	  [FE]  RuntimeException  	16	2	replace
133	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	3	2	add
134	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.removeChild(right);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.removeChild(right);	  	compilable	  [FE]  RuntimeException  	3	2	add
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
136	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.getParent().replaceChild(left,  newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.getParent().replaceChild(left,  newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
137	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.addChildToFront(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
138	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.addChildToFront(newNumber);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.addChildToFront(newNumber);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.addChildToFront(newNumber);	  	compilable	  [FE]  RuntimeException  	3	2	add
139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	3	2	add
140	[BUG]  [BUGGY]  n.removeChild(newNumber);  n.removeChild(left);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  n.removeChild(newNumber);  n.removeChild(left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);    n.removeChild(left);	  	compilable	  [FE]  RuntimeException  	3	2	add
141	[BUG]  [BUGGY]  result  =  newNumber.removeChild(right);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.removeChild(right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(right);	  result    =    newNumber.removeChild(newNumber);    	non-compiled	[CE]  incompatible  types	9	None	replace
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
143	[BUG]  [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=  right)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	  if(newNumber!=    left)    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(n.getType()));    }    	compilable	  [FE]  AssertionFailedError  	15	1	replace
144	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(left,  right);  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.replaceChild(left,  right);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(left,  right);	  result    =    newNumber.replaceChild(left,    newNumber);    	non-compiled	[CE]  incompatible  types	10	None	replace
145	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(left,  left);  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  result  =  newNumber.replaceChild(left,  left);  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(left,  left);	  result    =    newNumber.replaceChild(left,    newNumber);    	non-compiled	[CE]  incompatible  types	10	None	replace
146	[BUG]  [BUGGY]  if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	17	None	replace
147	[BUG]  [BUGGY]  if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild  [CE]  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  	17	None	replace
148	[BUG]  [BUGGY]  if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()),  newNumber);  }	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	17	None	replace
149	[BUG]  [BUGGY]  if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: ",  +  Node.tokenToName(left.getLastChild()));  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]      result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);    [BUGGY]  if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: ",  +  Node.tokenToName(left.getLastChild()));  }  [BUGGY]      return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(left!=  newNumber.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: ",  +  Node.tokenToName(left.getLastChild()));  }	  if(newNumber!=    left.getNext())    {    reportCodeChange();    }    else    {    throw    new    AssertionError(   "Unknown    shift    operator:   "    +    Node.tokenToName(left.getLastChild()));    }    	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	17	None	replace
