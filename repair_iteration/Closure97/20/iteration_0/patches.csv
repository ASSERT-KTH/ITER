bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result.addChildToBack(newNumber);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  result.addChildToBack(newNumber);  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(newNumber);	reportCodeChange();  	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
2	[BUG]  [BUGGY]  result.addChildToFront(newNumber);  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  result.addChildToFront(newNumber);  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToFront(newNumber);	reportCodeChange();  	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  n.removeChild(newNumber);  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	n.removeChild(newNumber);	reportCodeChange();  	compilable	  [FE]  RuntimeException  	39	2	replace
4	[BUG]  [BUGGY]  n.removeChild(newNumber);  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  n.removeChild(newNumber);  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	n.removeChild(newNumber);	reportCodeChange();  	compilable	  [FE]  RuntimeException  	39	2	replace
5	[BUG]  [BUGGY]  result.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  result.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result.addChildToBack(newNumber);  newNumber.addChildToBack(newNumber);	reportCodeChange();  	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]    [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	  	reportCodeChange();  	compilable	  [FE]  AssertionFailedError  	39	2	replace
7	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]    [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	  	reportCodeChange();  	compilable	  [FE]  AssertionFailedError  	39	2	replace
8	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(n,  newNumber);  [CE]  incompatible  types  [FE]    AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  result  =  newNumber.replaceChild(n,  newNumber);  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(n,  newNumber);	reportCodeChange();  	non-compiled	[CE]  incompatible  types	39	None	replace
9	[BUG]  [BUGGY]  result  =  newNumber.removeChild(newNumber);  [CE]  incompatible  types  [FE]      AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  result  =  newNumber.removeChild(newNumber);  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeChild(newNumber);	reportCodeChange();  	non-compiled	[CE]  incompatible  types	39	None	replace
10	[BUG]  [BUGGY]  result  =  newNumber.replaceChild(left,  newNumber);  [CE]  incompatible  types  [FE]        AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  result  =  newNumber.replaceChild(left,  newNumber);  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.replaceChild(left,  newNumber);	reportCodeChange();  	non-compiled	[CE]  incompatible  types	39	None	replace
11	[BUG]  [BUGGY]  result  =  newNumber.removeFirstChild();  [CE]  incompatible  types  [FE]          AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  result  =  newNumber.removeFirstChild();  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	result  =  newNumber.removeFirstChild();	reportCodeChange();  	non-compiled	[CE]  incompatible  types	39	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	reportCodeChange();  	compilable	  [FE]  AssertionFailedError  	39	1	replace
13	[BUG]  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	reportCodeChange();  	compilable	  [FE]  AssertionFailedError  	39	1	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	reportCodeChange();  	compilable	  [FE]  AssertionFailedError  	39	1	replace
15	[BUG]  [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=  left)  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getType()));  }	reportCodeChange();  	compilable	  [FE]  AssertionFailedError  	39	1	replace
16	[BUG]  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getLastChild()));  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getLastChild()));  }  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(n.getLastChild()));  }	reportCodeChange();  	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
17	[BUG]  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }  [CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  [BUGGY]  if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }  [BUGGY]    return  newNumber;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	if(newNumber!=  left.getNext())  {  reportCodeChange();  }  else  {  throw  new  AssertionError( "Unknown  shift  operator: "  +  Node.tokenToName(left.getLastChild()));  }	reportCodeChange();  	non-compiled	[CE]  method  tokenToName  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
