bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	compilable	  [FE]  AssertionFailedError  	13	1	replace
2	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	compilable	  [FE]  AssertionFailedError  	13	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	compilable	  [FE]  AssertionFailedError  	13	1	replace
4	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	compilable	  [FE]  AssertionFailedError  	13	1	replace
5	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	13	2	replace
6	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	13	2	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	compilable	  [FE]  AssertionFailedError  	13	1	replace
8	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	compilable	  [FE]  AssertionFailedError  	13	1	replace
9	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]    [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	  	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	compilable	  [FE]  AssertionFailedError  	13	1	replace
11	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	compilable	  [FE]  AssertionFailedError  	13	1	replace
12	[BUG]  [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionFailedError  [CONTEXT]  if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	13	None	replace
