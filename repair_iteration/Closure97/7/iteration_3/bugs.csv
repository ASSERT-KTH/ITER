bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
2	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
3	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
4	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
5	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  If(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  If(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    If(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval    [Delete]    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	77	1	replace
7	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval    [Delete]    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	77	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(rval  ==  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	1	1	replace
9	[BUG]  [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(rval  ==  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	1	1	replace
10	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	1	2	replace
11	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	1	2	replace
12	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval!=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(rval  ==  Integer.MIN_VALUE  ||  rval!=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	1	2	replace
13	[BUG]  [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval!=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval!=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(rval  ==  Integer.MIN_VALUE  ||  rval!=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	1	2	replace
14	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	39	None	add
15	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	39	None	add
16	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	39	None	add
17	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >>  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	39	None	add
18	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	39	None	add
19	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	39	None	add
20	[BUG]  [BUGGY]  double  rval  =  left.getRawOffset();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  left.getRawOffset();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getRawOffset();	  double    rval    =    right.getRawOffset();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
21	[BUG]  [BUGGY]  double  rval  =  right.getRawOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawOffset()  +  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawOffset()  +  1;	  double    rval    =    right.getRawOffset();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
22	[BUG]  [BUGGY]  double  rval  =  right.getRawOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawOffset()  -  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawOffset()  -  1;	  double    rval    =    right.getRawOffset();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
23	[BUG]  [BUGGY]  double  rval  =  right.getRawOffset()  -  2;  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawOffset()  -  2;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawOffset()  -  2;	  double    rval    =    right.getRawOffset();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
24	[BUG]  [BUGGY]  double  rval  =  right.getRawOffset()  +  2;  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawOffset()  +  2;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawOffset()  +  2;	  double    rval    =    right.getRawOffset();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
25	[BUG]  [BUGGY]  double  rval  =  right.getDouble()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getDouble()  +  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getDouble()  +  1;	  double    rval    =    right.getDouble();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
26	[BUG]  [BUGGY]  double  rval  =  right.getInt();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getInt();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getInt();	  double    rval    =    right.getDouble();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
27	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
28	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
29	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
30	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
31	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval!=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
32	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
33	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
34	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
35	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	88	None	add
36	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  If(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  If(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    If(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	88	None	add
37	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	88	None	add
38	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MAX_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MAX_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MAX_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	88	None	add
39	[BUG]  [BUGGY]  double  rval  =  left.getDouble()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  left.getDouble()  +  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getDouble()  +  1;	  double    rval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
40	[BUG]  [BUGGY]  double  rval  =  left.getInt();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  left.getInt();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getInt();	  double    rval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
41	[BUG]  [BUGGY]  double  rval  =  left.getNumber();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  left.getNumber();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getNumber();	  double    rval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
42	[BUG]  [BUGGY]  double  rval  =  left.getDouble()  +  2;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  left.getDouble()  +  2;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getDouble()  +  2;	  double    rval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
43	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	98	None	add
44	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	98	None	add
45	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  =  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  =  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  =  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
46	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	98	None	add
47	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <=  Integer.MIN_VALUE  |&  lval  <=  Integer.MAX_VALUE))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <=  Integer.MIN_VALUE  |&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <=  Integer.MIN_VALUE  |&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
48	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	98	None	add
49	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	47	2	replace
50	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	47	2	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
52	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
54	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
55	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	29	2	replace
56	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	29	2	replace
57	[BUG]  [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	29	None	replace
58	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval!=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval!=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	29	2	replace
59	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval!=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval!=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval!=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	29	2	replace
60	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	29	None	replace
61	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {	  if(lval    <=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	73	2	replace
62	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {	  if(lval    <=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	73	2	replace
63	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    <=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	73	2	replace
64	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    <=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	73	2	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    If    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
66	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    If    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
67	[BUG]  [BUGGY]  double  rval  =  left.getRawType();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  left.getRawType();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getRawType();	  double    rval    =    right.getRawType();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
68	[BUG]  [BUGGY]  double  rval  =  right.getRawType()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawType()  +  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawType()  +  1;	  double    rval    =    right.getRawType();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
69	[BUG]  [BUGGY]  double  rval  =  right.getRawValue();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawValue();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawValue();	  double    rval    =    right.getRawType();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
70	[BUG]  [BUGGY]  double  rval  =  right.getRawType()  -  1;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawType()  -  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawType()  -  1;	  double    rval    =    right.getRawType();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
71	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(rval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval    ==    Integer.MIN_VALUE    |&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	100	2	replace
72	[BUG]  [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(rval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval    ==    Integer.MIN_VALUE    |&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	100	2	replace
73	[BUG]  [BUGGY]  double  rval  =  left.getRval();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  left.getRval();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getRval();	  double    rval    =    right.getRval();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
74	[BUG]  [BUGGY]  double  rval  =  right.getRval()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRval()  +  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRval()  +  1;	  double    rval    =    right.getRval();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
75	[BUG]  [BUGGY]  double  rval  =  right.getRval()  *  result;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRval()  *  result;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRval()  *  result;	  double    rval    =    right.getRval();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
76	[BUG]  [BUGGY]  double  rval  =  right.getRval()  +  2;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRval()  +  2;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRval()  +  2;	  double    rval    =    right.getRval();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
77	[BUG]  [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE))    {    if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	92	None	add
78	[BUG]  [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  If  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  If  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE))    {    If  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	92	None	add
79	[BUG]  [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  if  (!(lval  <  Integer.MAX_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  if  (!(lval  <  Integer.MAX_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE))    {    if  (!(lval  <  Integer.MAX_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	92	None	add
80	[BUG]  [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE))    {    if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	92	None	add
81	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	76	2	replace
82	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	76	2	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE)  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
84	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE)  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE)  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
86	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE)  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
87	[BUG]  [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	78	None	add
88	[BUG]  [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  If  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  If  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    If  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	78	None	add
89	[BUG]  [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	78	None	add
90	[BUG]  [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  >  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
91	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  n  =  left.getLastChild();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
92	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
93	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  n  =  left.getNext();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	n  =  left.getNext();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
94	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
95	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    if(lval!=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
96	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    if(lval  >>  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
97	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    if(lval  ==  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
98	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(rval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
100	[BUG]  [BUGGY]  if(rval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(rval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
101	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(rval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	14	2	replace
102	[BUG]  [BUGGY]  if(rval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(rval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	14	2	replace
103	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	59	None	add
104	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    if  (!(lval  >>  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	59	None	add
105	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    if  (!(lval!=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	59	None	add
106	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    if  (!(lval  ==  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	59	None	add
107	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  if  (!(lval  [Delete]  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  if  (!(lval  [Delete]  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    if  (!(lval  [Delete]  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ')'  expected	59	None	add
108	[BUG]  [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	61	None	add
109	[BUG]  [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	61	None	add
110	[BUG]  [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	61	None	add
111	[BUG]  [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  If  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  If  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    If  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	61	None	add
112	[BUG]  [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	61	None	add
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
114	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
116	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
117	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	75	2	replace
118	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	75	2	replace
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(rval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
120	[BUG]  [BUGGY]  if(rval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(rval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  ==  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
122	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  ==  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
124	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
125	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
126	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  If(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  If(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    If(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
127	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  =  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  =  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >=  =  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
128	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  <=  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  <=  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  <=  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
129	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
130	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	22	None	add
131	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	22	None	add
132	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	22	None	add
133	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	22	None	add
134	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ')'  expected	22	None	add
135	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  If(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  If(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    If(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	22	None	add
136	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
137	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
138	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
139	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
140	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  If(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  If(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    If(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
142	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
144	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
146	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
148	[BUG]  [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
150	[BUG]  [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
151	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(rval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    ==    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	4	2	replace
152	[BUG]  [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(rval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    ==    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	4	2	replace
153	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	24	None	add
154	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	24	None	add
155	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	24	None	add
156	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	24	None	add
157	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ')'  expected	24	None	add
158	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  If(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  If(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    If(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	24	None	add
159	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	35	None	add
160	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    If(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	35	None	add
161	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  ||  lval  >=  =  Integer.MAX_VALUE))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  ||  lval  >=  =  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >  Integer.MIN_VALUE  ||  lval  >=  =  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
162	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	35	None	add
163	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ';'  expected	96	None	add
164	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ';'  expected	96	None	add
165	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ';'  expected	96	None	add
166	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ';'  expected	96	None	add
167	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ')'  expected	96	None	add
168	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	89	2	replace
169	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	89	2	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  AssertionFailedError  	97	1	replace
171	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  AssertionFailedError  	97	1	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  AssertionFailedError  	97	1	replace
173	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  AssertionFailedError  	97	1	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  AssertionFailedError  	97	1	replace
175	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  AssertionFailedError  	97	1	replace
176	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER)  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	97	2	replace
177	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER)  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	97	2	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
179	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
181	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  ==  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
183	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  ==  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  ==  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
185	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  ==  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval!=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
187	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
188	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
189	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  If(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  If(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    If(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
190	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
191	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
192	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >  Integer.MIN_VALUE  &&  rval  >=  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >  Integer.MIN_VALUE  &&  rval  >=  =  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >  Integer.MIN_VALUE  &&  rval  >=  =  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
193	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
194	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
195	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >>  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >>  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >>  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
196	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
197	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >>  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >>  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >>  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
198	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
199	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
200	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	83	None	add
201	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	83	None	add
202	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	83	None	add
203	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	83	None	add
204	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	83	None	add
205	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	83	None	add
206	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	20	None	add
207	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	20	None	add
208	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	20	None	add
209	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	20	None	add
210	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	86	None	add
211	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	86	None	add
212	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	86	None	add
213	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  |&  lval  <=  Integer.MAX_VALUE))  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  |&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  |&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
214	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	86	None	add
215	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	86	None	add
216	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
217	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  If(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  If(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    If(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
218	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
219	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  if(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  if(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    if(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  ==  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {	  if(lval    ==    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
221	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  ==  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {	  if(lval    ==    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
223	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
225	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  ||  rval  ==  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
227	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
228	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	87	1	replace
229	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	87	1	replace
230	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
231	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  If(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  If(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    If(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
232	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  <  Integer.MIN_VALUE  ||  rval  >=  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  <  Integer.MIN_VALUE  ||  rval  >=  =  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  <  Integer.MIN_VALUE  ||  rval  >=  =  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
233	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
234	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  <  Integer.MAX_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  <  Integer.MAX_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    <    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  <  Integer.MAX_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
236	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
237	[BUG]  [BUGGY]  double  rval  =  right.getNumber()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getNumber()  +  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getNumber()  +  1;	  double    rval    =    right.getNumber();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
238	[BUG]  [BUGGY]  double  rval  =  right.getNumber()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getNumber()  -  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getNumber()  -  1;	  double    rval    =    right.getNumber();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
239	[BUG]  [BUGGY]  Double  rval  =  left.getDouble();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  Double  rval  =  left.getDouble();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	Double  rval  =  left.getDouble();	  Double    rval    =    right.getDouble();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
240	[BUG]  [BUGGY]  Double  rval  =  right.getDouble()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  Double  rval  =  right.getDouble()  +  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	Double  rval  =  right.getDouble()  +  1;	  Double    rval    =    right.getDouble();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
241	[BUG]  [BUGGY]  Double  rval  =  right.getNumber();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  Double  rval  =  right.getNumber();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	Double  rval  =  right.getNumber();	  Double    rval    =    right.getDouble();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
242	[BUG]  [BUGGY]  double  lval  =  right.getDouble();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  lval  =  right.getDouble();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  lval  =  right.getDouble();	  double    lval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
243	[BUG]  [BUGGY]  double  lval  =  left.getDouble()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  lval  =  left.getDouble()  +  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
244	[BUG]  [BUGGY]  double  lval  =  left.getLowerCase();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  lval  =  left.getLowerCase();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  lval  =  left.getLowerCase();	  double    lval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
245	[BUG]  [BUGGY]  double  lval  =  left.getInt();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  lval  =  left.getInt();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  lval  =  left.getInt();	  double    lval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
246	[BUG]  [BUGGY]  double  lval  =  left.getLong();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  lval  =  left.getLong();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  lval  =  left.getLong();	  double    lval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
247	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	37	None	add
248	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    If(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	37	None	add
249	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >=  =  Integer.MAX_VALUE))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >=  =  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  ||  lval  >=  =  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
250	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	37	None	add
251	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	38	2	replace
252	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	38	2	replace
253	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
254	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  If(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  If(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    If(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
255	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
256	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
257	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  ||  rval  >=  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  ||  rval  >=  =  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  ==  Integer.MIN_VALUE  ||  rval  >=  =  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
258	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(rval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    [Delete]    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	18	2	replace
259	[BUG]  [BUGGY]  if(rval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(rval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    [Delete]    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	18	2	replace
260	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	90	None	add
261	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    if  (!(lval  >>  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	90	None	add
262	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    if  (!(lval!=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	90	None	add
263	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    if  (!(lval  ==  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	90	None	add
264	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  If  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  If  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    If  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	90	None	add
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	71	1	replace
266	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	71	1	replace
267	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	71	2	replace
268	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	71	2	replace
269	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	43	None	add
270	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	43	None	add
271	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >>  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	43	None	add
272	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	43	None	add
273	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  [Delete]  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ')'  expected	43	None	add
274	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  If(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  If(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	43	None	add
275	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
276	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
278	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
279	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
280	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
281	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
282	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
283	[BUG]  [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	84	None	replace
284	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval!=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <  Integer.MIN_VALUE  ||  rval!=  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	56	2	replace
285	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval!=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval!=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <  Integer.MIN_VALUE  ||  rval!=  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	56	2	replace
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
287	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
288	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	27	2	replace
289	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval!=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	27	2	replace
290	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	27	2	replace
291	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	27	2	replace
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
293	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
295	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
296	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ';'  expected	94	None	add
297	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ';'  expected	94	None	add
298	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ';'  expected	94	None	add
299	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ';'  expected	94	None	add
300	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ')'  expected	94	None	add
301	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  If(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  If(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    If(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ';'  expected	94	None	add
302	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	41	None	add
303	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  If(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  If(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    If(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	41	None	add
304	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE))  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
305	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	41	None	add
306	[BUG]  [BUGGY]  double  rval  =  left.getRaw();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  left.getRaw();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getRaw();	  double    rval    =    right.getRaw();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
307	[BUG]  [BUGGY]  double  rval  =  right.getRaw()  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRaw()  +  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRaw()  +  1;	  double    rval    =    right.getRaw();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
308	[BUG]  [BUGGY]  double  rval  =  right.getColumn();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getColumn();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getColumn();	  double    rval    =    right.getRaw();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  MAX_FOLD_NUMBER))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
310	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  MAX_FOLD_NUMBER))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
311	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    rval    <    Integer.MAX_VALUE))    {    if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	57	None	add
312	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    rval    <    Integer.MAX_VALUE))    {    if  (!(lval  >>  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	57	None	add
313	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    rval    <    Integer.MAX_VALUE))    {    if  (!(lval!=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	57	None	add
314	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    rval    <    Integer.MAX_VALUE))    {    if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	57	None	add
315	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  if  (!(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  if  (!(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    rval    <    Integer.MAX_VALUE))    {    if  (!(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ')'  expected	57	None	add
316	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
317	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
318	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
319	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
320	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval!=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval!=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval!=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
321	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
322	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	79	1	replace
324	[BUG]  [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	79	1	replace
325	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	91	2	replace
326	[BUG]  [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  ==  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	91	2	replace
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval!=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval!=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	91	1	replace
328	[BUG]  [BUGGY]  if  (!(lval!=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval!=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval!=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	91	1	replace
329	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
330	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
331	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  >>  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
332	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
333	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  If(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  If(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    If(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    [Delete]    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
335	[BUG]  [BUGGY]  if(lval  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    [Delete]    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
336	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    [Delete]    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	5	2	replace
337	[BUG]  [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    [Delete]    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	5	2	replace
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(rval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    [Delete]    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
339	[BUG]  [BUGGY]  if(rval  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(rval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(rval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    [Delete]    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
340	[BUG]  [BUGGY]  double  lval  =  left.getDouble()  +  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  lval  =  left.getDouble()  +  MAX_FOLD_NUMBER;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  lval  =  left.getDouble()  +  MAX_FOLD_NUMBER;	  double    lval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
341	[BUG]  [BUGGY]  double  lval  =  left.getLowerBound();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  lval  =  left.getLowerBound();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  lval  =  left.getLowerBound();	  double    lval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
342	[BUG]  [BUGGY]  double  lval  =  left.getNumber();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  lval  =  left.getNumber();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  lval  =  left.getNumber();	  double    lval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
343	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  If  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  If  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    If  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	59	None	add
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  ==  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
345	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  ==  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
346	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
347	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
348	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	95	2	replace
349	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	95	2	replace
350	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  MAX_FOLD_NUMBER))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	95	2	replace
351	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  MAX_FOLD_NUMBER))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  MAX_FOLD_NUMBER))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	95	2	replace
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
353	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
354	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  lval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	91	2	replace
355	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  >  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  lval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	91	2	replace
356	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  if(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    if(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
357	[BUG]  [BUGGY]  double  rval  =  right.getNumber()  *  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getNumber()  *  MAX_FOLD_NUMBER;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getNumber()  *  MAX_FOLD_NUMBER;	  double    rval    =    right.getNumber();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
358	[BUG]  [BUGGY]  double  rval  =  right.getNumber()  +  2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getNumber()  +  2;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getNumber()  +  2;	  double    rval    =    right.getNumber();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
359	[BUG]  [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	27	None	replace
360	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <=  MAX_FOLD_NUMBER)  {	  if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval    ==    Integer.MIN_VALUE    |&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	100	2	replace
361	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <=  MAX_FOLD_NUMBER)  {	  if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval    ==    Integer.MIN_VALUE    |&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	100	2	replace
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
363	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
364	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  (lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  (lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    (lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  not  a  statement	70	None	add
365	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	38	2	replace
366	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	38	2	replace
367	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	46	2	replace
368	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	46	2	replace
369	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE)  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	46	2	replace
370	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE)  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	46	2	replace
371	[BUG]  [BUGGY]  double  rval  =  right.getRawOffset()  +  3;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawOffset()  +  3;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawOffset()  +  3;	  double    rval    =    right.getRawOffset();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
372	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  If(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  If(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    If(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <=  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
374	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <=  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
375	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)	  	non-compiled	[CE]  ')'  expected	26	None	add
376	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VAL  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VAL  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MAX_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VAL	  	non-compiled	[CE]  ')'  expected	26	None	add
377	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval!=  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
378	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
379	[BUG]  [BUGGY]  if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	9	None	replace
380	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  If(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  If(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    If(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	93	1	replace
382	[BUG]  [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	93	1	replace
383	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)	  	non-compiled	[CE]  ')'  expected	83	None	add
384	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  If(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  If(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    If(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  	non-compiled	[CE]  ';'  expected	96	None	add
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
386	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
388	[BUG]  [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
389	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	37	None	add
390	[BUG]  [BUGGY]  double  rval  =  left.getDouble()  +  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  left.getDouble()  +  MAX_FOLD_NUMBER;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getDouble()  +  MAX_FOLD_NUMBER;	  double    rval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
391	[BUG]  [BUGGY]  double  rval  =  right.getVar(lval);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getVar(lval);  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getVar(lval);	  double    rval    =    right.getDouble();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >  MAX_FOLD_NUMBER  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	71	1	replace
393	[BUG]  [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >  MAX_FOLD_NUMBER  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	71	1	replace
394	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	101	2	replace
395	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	101	2	replace
396	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  If(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  If(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    If(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	20	None	add
397	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	75	2	replace
398	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	75	2	replace
399	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  If  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  If  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    rval    <    Integer.MAX_VALUE))    {    If  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	57	None	add
400	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval!=  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
401	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=  Integer.MIN_VALUE  ||  rval  >=  Integer.MAX_VALUE)  {	  if(lval!=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
402	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	35	None	add
403	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  &&  lval  >  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	89	2	replace
404	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  >  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  &&  lval  >  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	89	2	replace
405	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(rval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(rval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	89	2	replace
406	[BUG]  [BUGGY]  if(!(rval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(rval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(rval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	89	2	replace
407	[BUG]  [BUGGY]  double  rval  =  right.getRaw()  +  2;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRaw()  +  2;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRaw()  +  2;	  double    rval    =    right.getRaw();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
408	[BUG]  [BUGGY]  double  rval  =  right.getRawType()  +  2;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawType()  +  2;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawType()  +  2;	  double    rval    =    right.getRawType();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
409	[BUG]  [BUGGY]  double  rval  =  right.getNumberType();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getNumberType();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getNumberType();	  double    rval    =    right.getRawType();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
410	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
411	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
413	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
415	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
416	[BUG]  [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	29	None	replace
417	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	29	2	replace
418	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]            AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	29	2	replace
419	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(rval  >>  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	29	None	replace
420	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  MAX_FOLD_NUMBER))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  AssertionFailedError  	97	1	replace
421	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <  MAX_FOLD_NUMBER))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  AssertionFailedError  	97	1	replace
422	[BUG]  [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval!=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	97	None	replace
423	[BUG]  [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	78	None	add
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	91	1	replace
425	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    >    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	91	1	replace
426	[BUG]  [BUGGY]  double  rval  =  right.getRawParent();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawParent();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawParent();	  double    rval    =    right.getRaw();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
427	[BUG]  [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	78	None	add
428	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  2)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  2))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  2)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  2))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	29	2	replace
429	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  2)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  2))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  2)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  2))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  2)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  2))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <    Integer.MAX_VALUE)||(rval    >=    Integer.MAX_VALUE    &&    rval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	29	2	replace
430	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	41	None	add
431	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
432	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    ==    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
433	[BUG]  [BUGGY]  if(!lval  >  MAX_FOLD_NUMBER)  {  [CE]  bad  operand  type  double  for  unary  operator  '!'  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!lval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!lval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	non-compiled	[CE]  bad  operand  type  double  for  unary  operator  '!'	17	None	replace
434	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  0  ||  rval  >  0)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <  0  ||  rval  >  0)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	17	2	replace
435	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  >  0)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  0  ||  rval  >  0)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <  0  ||  rval  >  0)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	17	2	replace
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  ==  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
437	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  ==  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
438	[BUG]  [BUGGY]  Double  lval  =  right.getDouble();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  Double  lval  =  right.getDouble();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	Double  lval  =  right.getDouble();	  double    lval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
439	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    ==    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	4	2	replace
440	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if    (!(lval    ==    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	4	2	replace
441	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  0  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  0  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	87	1	replace
442	[BUG]  [BUGGY]  if(!(lval  <  0  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  0  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  0  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	87	1	replace
443	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  0))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  0))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	95	2	replace
444	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  0))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  0))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  0))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	95	2	replace
445	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  1))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  1))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	95	2	replace
446	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  1))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  1))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  1))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    MAX_FOLD_NUMBER))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	95	2	replace
447	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >=    Integer.MIN_VALUE    ||    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  [Delete]  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ')'  expected	20	None	add
448	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  0  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  0  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	46	1	replace
449	[BUG]  [BUGGY]  if(!(lval  <  0  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  0  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  0  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	46	1	replace
450	[BUG]  [BUGGY]  double  rval  =  right.getRawClass();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawClass();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawClass();	  double    rval    =    right.getRawType();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
451	[BUG]  [BUGGY]  double  rval  =  right.getRawOffset()  *  result;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRawOffset()  *  result;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawOffset()  *  result;	  double    rval    =    right.getRawOffset();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
452	[BUG]  [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	61	None	add
453	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE  ||  lval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE  ||  lval  >  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
454	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE  ||  lval  >  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE  ||  lval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE  ||  lval  >  Integer.MAX_VALUE)  {	  if(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
455	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	35	None	add
456	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
457	[BUG]  [BUGGY]  double  rval  =  right.getDouble()  *  result;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getDouble()  *  result;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getDouble()  *  result;	  double    rval    =    right.getDouble();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
458	[BUG]  [BUGGY]  double  rval  =  right.getRow();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRow();  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRow();	  double    rval    =    right.getNumber();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
459	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	43	None	add
460	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  0  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  0  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	42	1	replace
461	[BUG]  [BUGGY]  if(!(lval  <  0  &&  rval  <  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  0  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  0  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    <    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	42	1	replace
462	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  n  =  left.getFirstChild()  +  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	n  =  left.getFirstChild()  +  1;	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
463	[BUG]  [BUGGY]  Double  rval  =  right.getDouble()  *  result;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  Double  rval  =  right.getDouble()  *  result;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	Double  rval  =  right.getDouble()  *  result;	  Double    rval    =    right.getDouble();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
464	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)&&!right.isEmpty())  {  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)&&!right.isEmpty())  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)&&!right.isEmpty())  {	  if    (!(lval    <    Integer.MIN_VALUE    ||    rval    >    Integer.MAX_VALUE))    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
465	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE)  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	45	2	replace
466	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE)  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	45	2	replace
467	[BUG]  [BUGGY]  double  rval  =  left.getDouble()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  left.getDouble()  -  1;  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getDouble()  -  1;	  double    rval    =    left.getDouble();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
468	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    ==    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	39	None	add
469	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE)  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    >    Integer.MIN_VALUE    |&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	48	2	replace
470	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE)  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval    >    Integer.MIN_VALUE    |&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	48	2	replace
471	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
472	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
473	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
474	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)||(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	84	2	replace
475	[BUG]  [BUGGY]  double  rval  =  right.getRval(lval);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();        [BUGGY]  double  rval  =  right.getRval(lval);  [BUGGY]      error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRval(lval);	  double    rval    =    right.getRval();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
